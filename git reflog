[33mcommit 238e485ec58b6a03206ff1e352c22e9492a19ef7[m
Author: SandyBhau <sandeshbharitkar24@gmail.com>
Date:   Tue Apr 2 01:19:04 2024 +0530

    NLP Updated

[1mdiff --git a/.ipynb_checkpoints/Data_RAG-checkpoint.ipynb b/.ipynb_checkpoints/Data_RAG-checkpoint.ipynb[m
[1mnew file mode 100644[m
[1mindex 0000000..805e1e6[m
[1m--- /dev/null[m
[1m+++ b/.ipynb_checkpoints/Data_RAG-checkpoint.ipynb[m
[36m@@ -0,0 +1,1223 @@[m
[32m+[m[32m{[m
[32m+[m[32m "cells": [[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "IOpw--87wvkW"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Instead of using fine-tuning, we'll use RAG to build our own \"Commander Data\" based on everything he ever said in the scripts.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "To summarize the high level approach:\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "- We'll first parse all of the scripts to extract every line from Data, much as we did in the fine-tuning example.\n",[m
[32m+[m[32m    "- Then we'll use the OpenAI embeddings API to compute embedding vectors for every one of his lines. This basically gives us similarity measures between every line.\n",[m
[32m+[m[32m    "- RAG calls for use of a vector database to store these lines with the associated embedding vectors. To keep things simple, we'll use a local database called vectordb. There are plenty of cloud-based vector database services out there as well.\n",[m
[32m+[m[32m    "- Then we'll make a little retrieval function that retrieves the N most-similar lines from the vector database for a given query\n",[m
[32m+[m[32m    "- Those similar lines are then added as context to the prompt before it is handed off the the chat API.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "I'm intentionally not using langchain or some other higher-level framework, because this is actually pretty simple without it.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "First, let's install vectordb:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 1,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "colab": {[m
[32m+[m[32m     "base_uri": "https://localhost:8080/"[m
[32m+[m[32m    },[m
[32m+[m[32m    "id": "2J2I0mlbLWba",[m
[32m+[m[32m    "outputId": "7c94ad51-76ee-42ed-8a8c-605b40b7f833"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Requirement already satisfied: vectordb in /usr/local/lib/python3.10/dist-packages (0.0.20)\n",[m
[32m+[m[32m      "Requirement already satisfied: jina>=3.20.0 in /usr/local/lib/python3.10/dist-packages (from vectordb) (3.23.2)\n",[m
[32m+[m[32m      "Requirement already satisfied: docarray[hnswlib]>=0.34.0 in /usr/local/lib/python3.10/dist-packages (from vectordb) (0.40.0)\n",[m
[32m+[m[32m      "Requirement already satisfied: numpy>=1.17.3 in /usr/local/lib/python3.10/dist-packages (from docarray[hnswlib]>=0.34.0->vectordb) (1.23.5)\n",[m
[32m+[m[32m      "Requirement already satisfied: orjson>=3.8.2 in /usr/local/lib/python3.10/dist-packages (from docarray[hnswlib]>=0.34.0->vectordb) (3.9.13)\n",[m
[32m+[m[32m      "Requirement already satisfied: pydantic>=1.10.8 in /usr/local/lib/python3.10/dist-packages (from docarray[hnswlib]>=0.34.0->vectordb) (1.10.14)\n",[m
[32m+[m[32m      "Requirement already satisfied: rich>=13.1.0 in /usr/local/lib/python3.10/dist-packages (from docarray[hnswlib]>=0.34.0->vectordb) (13.7.0)\n",[m
[32m+[m[32m      "Requirement already satisfied: types-requests>=2.28.11.6 in /usr/local/lib/python3.10/dist-packages (from docarray[hnswlib]>=0.34.0->vectordb) (2.31.0.6)\n",[m
[32m+[m[32m      "Requirement already satisfied: typing-inspect>=0.8.0 in /usr/local/lib/python3.10/dist-packages (from docarray[hnswlib]>=0.34.0->vectordb) (0.9.0)\n",[m
[32m+[m[32m      "Requirement already satisfied: hnswlib>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from docarray[hnswlib]>=0.34.0->vectordb) (0.8.0)\n",[m
[32m+[m[32m      "Requirement already satisfied: protobuf>=3.20.0 in /usr/local/lib/python3.10/dist-packages (from docarray[hnswlib]>=0.34.0->vectordb) (4.25.2)\n",[m
[32m+[m[32m      "Requirement already satisfied: urllib3<2.0.0,>=1.25.9 in /usr/local/lib/python3.10/dist-packages (from jina>=3.20.0->vectordb) (1.26.18)\n",[m
[32m+[m[32m      "Requirement already satisfied: opentelemetry-instrumentation-grpc>=0.35b0 in /usr/local/lib/python3.10/dist-packages (from jina>=3.20.0->vectordb) (0.40b0)\n",[m
[32m+[m[32m      "Requirement already satisfied: grpcio<=1.57.0,>=1.46.0 in /usr/local/lib/python3.10/dist-packages (from jina>=3.20.0->vectordb) (1.57.0)\n",[m
[32m+[m[32m      "Requirement already satisfied: opentelemetry-sdk<1.20.0,>=1.14.0 in /usr/local/lib/python3.10/dist-packages (from jina>=3.20.0->vectordb) (1.19.0)\n",[m
[32m+[m[32m      "Requirement already satisfied: jcloud>=0.0.35 in /usr/local/lib/python3.10/dist-packages (from jina>=3.20.0->vectordb) (0.3)\n",[m
[32m+[m[32m      "Requirement already satisfied: jina-hubble-sdk>=0.30.4 in /usr/local/lib/python3.10/dist-packages (from jina>=3.20.0->vectordb) (0.39.0)\n",[m
[32m+[m[32m      "Requirement already satisfied: websockets in /usr/local/lib/python3.10/dist-packages (from jina>=3.20.0->vectordb) (12.0)\n",[m
[32m+[m[32m      "Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from jina>=3.20.0->vectordb) (3.13.1)\n",[m
[32m+[m[32m      "Requirement already satisfied: fastapi>=0.76.0 in /usr/local/lib/python3.10/dist-packages (from jina>=3.20.0->vectordb) (0.109.2)\n",[m
[32m+[m[32m      "Requirement already satisfied: opentelemetry-api>=1.12.0 in /usr/local/lib/python3.10/dist-packages (from jina>=3.20.0->vectordb) (1.19.0)\n",[m
[32m+[m[32m      "Requirement already satisfied: opentelemetry-instrumentation-aiohttp-client>=0.33b0 in /usr/local/lib/python3.10/dist-packages (from jina>=3.20.0->vectordb) (0.40b0)\n",[m
[32m+[m[32m      "Requirement already satisfied: pyyaml>=5.3.1 in /usr/local/lib/python3.10/dist-packages (from jina>=3.20.0->vectordb) (6.0.1)\n",[m
[32m+[m[32m      "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from jina>=3.20.0->vectordb) (2.31.0)\n",[m
[32m+[m[32m      "Requirement already satisfied: opentelemetry-instrumentation-fastapi>=0.33b0 in /usr/local/lib/python3.10/dist-packages (from jina>=3.20.0->vectordb) (0.40b0)\n",[m
[32m+[m[32m      "Requirement already satisfied: opentelemetry-exporter-prometheus>=0.33b0 in /usr/local/lib/python3.10/dist-packages (from jina>=3.20.0->vectordb) (0.41b0)\n",[m
[32m+[m[32m      "Requirement already satisfied: python-multipart in /usr/local/lib/python3.10/dist-packages (from jina>=3.20.0->vectordb) (0.0.7)\n",[m
[32m+[m[32m      "Requirement already satisfied: opentelemetry-exporter-otlp>=1.12.0 in /usr/local/lib/python3.10/dist-packages (from jina>=3.20.0->vectordb) (1.19.0)\n",[m
[32m+[m[32m      "Requirement already satisfied: pathspec in /usr/local/lib/python3.10/dist-packages (from jina>=3.20.0->vectordb) (0.12.1)\n",[m
[32m+[m[32m      "Requirement already satisfied: aiofiles in /usr/local/lib/python3.10/dist-packages (from jina>=3.20.0->vectordb) (23.2.1)\n",[m
[32m+[m[32m      "Requirement already satisfied: grpcio-health-checking<=1.57.0,>=1.46.0 in /usr/local/lib/python3.10/dist-packages (from jina>=3.20.0->vectordb) (1.57.0)\n",[m
[32m+[m[32m      "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from jina>=3.20.0->vectordb) (23.2)\n",[m
[32m+[m[32m      "Requirement already satisfied: uvicorn[standard]<=0.23.1 in /usr/local/lib/python3.10/dist-packages (from jina>=3.20.0->vectordb) (0.23.1)\n",[m
[32m+[m[32m      "Requirement already satisfied: docker in /usr/local/lib/python3.10/dist-packages (from jina>=3.20.0->vectordb) (7.0.0)\n",[m
[32m+[m[32m      "Requirement already satisfied: prometheus-client>=0.12.0 in /usr/local/lib/python3.10/dist-packages (from jina>=3.20.0->vectordb) (0.19.0)\n",[m
[32m+[m[32m      "Requirement already satisfied: opentelemetry-exporter-otlp-proto-grpc>=1.13.0 in /usr/local/lib/python3.10/dist-packages (from jina>=3.20.0->vectordb) (1.19.0)\n",[m
[32m+[m[32m      "Requirement already satisfied: grpcio-reflection<=1.57.0,>=1.46.0 in /usr/local/lib/python3.10/dist-packages (from jina>=3.20.0->vectordb) (1.57.0)\n",[m
[32m+[m[32m      "Requirement already satisfied: aiohttp in /usr/local/lib/python3.10/dist-packages (from jina>=3.20.0->vectordb) (3.9.3)\n",[m
[32m+[m[32m      "Requirement already satisfied: uvloop in /usr/local/lib/python3.10/dist-packages (from jina>=3.20.0->vectordb) (0.19.0)\n",[m
[32m+[m[32m      "Requirement already satisfied: starlette<0.37.0,>=0.36.3 in /usr/local/lib/python3.10/dist-packages (from fastapi>=0.76.0->jina>=3.20.0->vectordb) (0.36.3)\n",[m
[32m+[m[32m      "Requirement already satisfied: typing-extensions>=4.8.0 in /usr/local/lib/python3.10/dist-packages (from fastapi>=0.76.0->jina>=3.20.0->vectordb) (4.9.0)\n",[m
[32m+[m[32m      "Requirement already satisfied: python-dotenv in /usr/local/lib/python3.10/dist-packages (from jcloud>=0.0.35->jina>=3.20.0->vectordb) (1.0.1)\n",[m
[32m+[m[32m      "Requirement already satisfied: python-dateutil in /usr/local/lib/python3.10/dist-packages (from jcloud>=0.0.35->jina>=3.20.0->vectordb) (2.8.2)\n",[m
[32m+[m[32m      "Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.10/dist-packages (from aiohttp->jina>=3.20.0->vectordb) (1.3.1)\n",[m
[32m+[m[32m      "Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp->jina>=3.20.0->vectordb) (23.2.0)\n",[m
[32m+[m[32m      "Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from aiohttp->jina>=3.20.0->vectordb) (1.4.1)\n",[m
[32m+[m[32m      "Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.10/dist-packages (from aiohttp->jina>=3.20.0->vectordb) (6.0.4)\n",[m
[32m+[m[32m      "Requirement already satisfied: yarl<2.0,>=1.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp->jina>=3.20.0->vectordb) (1.9.4)\n",[m
[32m+[m[32m      "Requirement already satisfied: async-timeout<5.0,>=4.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp->jina>=3.20.0->vectordb) (4.0.3)\n",[m
[32m+[m[32m      "Requirement already satisfied: importlib-metadata in /usr/local/lib/python3.10/dist-packages (from jina-hubble-sdk>=0.30.4->jina>=3.20.0->vectordb) (6.11.0)\n",[m
[32m+[m[32m      "Requirement already satisfied: python-jose in /usr/local/lib/python3.10/dist-packages (from jina-hubble-sdk>=0.30.4->jina>=3.20.0->vectordb) (3.3.0)\n",[m
[32m+[m[32m      "Requirement already satisfied: deprecated>=1.2.6 in /usr/local/lib/python3.10/dist-packages (from opentelemetry-api>=1.12.0->jina>=3.20.0->vectordb) (1.2.14)\n",[m
[32m+[m[32m      "Requirement already satisfied: opentelemetry-exporter-otlp-proto-http==1.19.0 in /usr/local/lib/python3.10/dist-packages (from opentelemetry-exporter-otlp>=1.12.0->jina>=3.20.0->vectordb) (1.19.0)\n",[m
[32m+[m[32m      "Requirement already satisfied: backoff<3.0.0,>=1.10.0 in /usr/local/lib/python3.10/dist-packages (from opentelemetry-exporter-otlp-proto-grpc>=1.13.0->jina>=3.20.0->vectordb) (2.2.1)\n",[m
[32m+[m[32m      "Requirement already satisfied: googleapis-common-protos~=1.52 in /usr/local/lib/python3.10/dist-packages (from opentelemetry-exporter-otlp-proto-grpc>=1.13.0->jina>=3.20.0->vectordb) (1.62.0)\n",[m
[32m+[m[32m      "Requirement already satisfied: opentelemetry-exporter-otlp-proto-common==1.19.0 in /usr/local/lib/python3.10/dist-packages (from opentelemetry-exporter-otlp-proto-grpc>=1.13.0->jina>=3.20.0->vectordb) (1.19.0)\n",[m
[32m+[m[32m      "Requirement already satisfied: opentelemetry-proto==1.19.0 in /usr/local/lib/python3.10/dist-packages (from opentelemetry-exporter-otlp-proto-grpc>=1.13.0->jina>=3.20.0->vectordb) (1.19.0)\n",[m
[32m+[m[32m      "Requirement already satisfied: opentelemetry-instrumentation==0.40b0 in /usr/local/lib/python3.10/dist-packages (from opentelemetry-instrumentation-aiohttp-client>=0.33b0->jina>=3.20.0->vectordb) (0.40b0)\n",[m
[32m+[m[32m      "Requirement already satisfied: opentelemetry-semantic-conventions==0.40b0 in /usr/local/lib/python3.10/dist-packages (from opentelemetry-instrumentation-aiohttp-client>=0.33b0->jina>=3.20.0->vectordb) (0.40b0)\n",[m
[32m+[m[32m      "Requirement already satisfied: opentelemetry-util-http==0.40b0 in /usr/local/lib/python3.10/dist-packages (from opentelemetry-instrumentation-aiohttp-client>=0.33b0->jina>=3.20.0->vectordb) (0.40b0)\n",[m
[32m+[m[32m      "Requirement already satisfied: wrapt<2.0.0,>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from opentelemetry-instrumentation-aiohttp-client>=0.33b0->jina>=3.20.0->vectordb) (1.14.1)\n",[m
[32m+[m[32m      "Requirement already satisfied: setuptools>=16.0 in /usr/local/lib/python3.10/dist-packages (from opentelemetry-instrumentation==0.40b0->opentelemetry-instrumentation-aiohttp-client>=0.33b0->jina>=3.20.0->vectordb) (67.7.2)\n",[m
[32m+[m[32m      "Requirement already satisfied: opentelemetry-instrumentation-asgi==0.40b0 in /usr/local/lib/python3.10/dist-packages (from opentelemetry-instrumentation-fastapi>=0.33b0->jina>=3.20.0->vectordb) (0.40b0)\n",[m
[32m+[m[32m      "Requirement already satisfied: asgiref~=3.0 in /usr/local/lib/python3.10/dist-packages (from opentelemetry-instrumentation-asgi==0.40b0->opentelemetry-instrumentation-fastapi>=0.33b0->jina>=3.20.0->vectordb) (3.7.2)\n",[m
[32m+[m[32m      "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->jina>=3.20.0->vectordb) (3.3.2)\n",[m
[32m+[m[32m      "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->jina>=3.20.0->vectordb) (3.6)\n",[m
[32m+[m[32m      "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->jina>=3.20.0->vectordb) (2023.11.17)\n",[m
[32m+[m[32m      "Requirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.10/dist-packages (from rich>=13.1.0->docarray[hnswlib]>=0.34.0->vectordb) (3.0.0)\n",[m
[32m+[m[32m      "Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.10/dist-packages (from rich>=13.1.0->docarray[hnswlib]>=0.34.0->vectordb) (2.16.1)\n",[m
[32m+[m[32m      "Requirement already satisfied: types-urllib3 in /usr/local/lib/python3.10/dist-packages (from types-requests>=2.28.11.6->docarray[hnswlib]>=0.34.0->vectordb) (1.26.25.14)\n",[m
[32m+[m[32m      "Requirement already satisfied: mypy-extensions>=0.3.0 in /usr/local/lib/python3.10/dist-packages (from typing-inspect>=0.8.0->docarray[hnswlib]>=0.34.0->vectordb) (1.0.0)\n",[m
[32m+[m[32m      "Requirement already satisfied: click>=7.0 in /usr/local/lib/python3.10/dist-packages (from uvicorn[standard]<=0.23.1->jina>=3.20.0->vectordb) (8.1.7)\n",[m
[32m+[m[32m      "Requirement already satisfied: h11>=0.8 in /usr/local/lib/python3.10/dist-packages (from uvicorn[standard]<=0.23.1->jina>=3.20.0->vectordb) (0.14.0)\n",[m
[32m+[m[32m      "Requirement already satisfied: httptools>=0.5.0 in /usr/local/lib/python3.10/dist-packages (from uvicorn[standard]<=0.23.1->jina>=3.20.0->vectordb) (0.6.1)\n",[m
[32m+[m[32m      "Requirement already satisfied: watchfiles>=0.13 in /usr/local/lib/python3.10/dist-packages (from uvicorn[standard]<=0.23.1->jina>=3.20.0->vectordb) (0.21.0)\n",[m
[32m+[m[32m      "Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.10/dist-packages (from importlib-metadata->jina-hubble-sdk>=0.30.4->jina>=3.20.0->vectordb) (3.17.0)\n",[m
[32m+[m[32m      "Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.10/dist-packages (from markdown-it-py>=2.2.0->rich>=13.1.0->docarray[hnswlib]>=0.34.0->vectordb) (0.1.2)\n",[m
[32m+[m[32m      "Requirement already satisfied: anyio<5,>=3.4.0 in /usr/local/lib/python3.10/dist-packages (from starlette<0.37.0,>=0.36.3->fastapi>=0.76.0->jina>=3.20.0->vectordb) (3.7.1)\n",[m
[32m+[m[32m      "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil->jcloud>=0.0.35->jina>=3.20.0->vectordb) (1.16.0)\n",[m
[32m+[m[32m      "Requirement already satisfied: ecdsa!=0.15 in /usr/local/lib/python3.10/dist-packages (from python-jose->jina-hubble-sdk>=0.30.4->jina>=3.20.0->vectordb) (0.18.0)\n",[m
[32m+[m[32m      "Requirement already satisfied: rsa in /usr/local/lib/python3.10/dist-packages (from python-jose->jina-hubble-sdk>=0.30.4->jina>=3.20.0->vectordb) (4.9)\n",[m
[32m+[m[32m      "Requirement already satisfied: pyasn1 in /usr/local/lib/python3.10/dist-packages (from python-jose->jina-hubble-sdk>=0.30.4->jina>=3.20.0->vectordb) (0.5.1)\n",[m
[32m+[m[32m      "Requirement already satisfied: sniffio>=1.1 in /usr/local/lib/python3.10/dist-packages (from anyio<5,>=3.4.0->starlette<0.37.0,>=0.36.3->fastapi>=0.76.0->jina>=3.20.0->vectordb) (1.3.0)\n",[m
[32m+[m[32m      "Requirement already satisfied: exceptiongroup in /usr/local/lib/python3.10/dist-packages (from anyio<5,>=3.4.0->starlette<0.37.0,>=0.36.3->fastapi>=0.76.0->jina>=3.20.0->vectordb) (1.2.0)\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "!pip install vectordb"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "L4_ysgbQx-jF"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Now we'll parse out all of the scripts and extract every line of dialog from \"DATA\". This is almost exactly the same code as from our fine tuning example's preprocessing script. Note you will need to upload all of the script files into a tng folder within your sample_data folder in your CoLab workspace first.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "An archive can be found at https://www.st-minutiae.com/resources/scripts/ (look for \"All TNG Epsiodes\"), but you could easily adapt this to read scripts from your favorite character from your favorite TV show or movie instead."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 2,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "dLjupJ8rLXr6"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "import os\n",[m
[32m+[m[32m    "import re\n",[m
[32m+[m[32m    "import random\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "dialogues = []\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "def strip_parentheses(s):\n",[m
[32m+[m[32m    "    return re.sub(r'\\(.*?\\)', '', s)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "def is_single_word_all_caps(s):\n",[m
[32m+[m[32m    "    # First, we split the string into words\n",[m
[32m+[m[32m    "    words = s.split()\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    # Check if the string contains only a single word\n",[m
[32m+[m[32m    "    if len(words) != 1:\n",[m
[32m+[m[32m    "        return False\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    # Make sure it isn't a line number\n",[m
[32m+[m[32m    "    if bool(re.search(r'\\d', words[0])):\n",[m
[32m+[m[32m    "        return False\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    # Check if the single word is in all caps\n",[m
[32m+[m[32m    "    return words[0].isupper()\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "def extract_character_lines(file_path, character_name):\n",[m
[32m+[m[32m    "    lines = []\n",[m
[32m+[m[32m    "    with open(file_path, 'r') as script_file:\n",[m
[32m+[m[32m    "        try:\n",[m
[32m+[m[32m    "            lines = script_file.readlines()\n",[m
[32m+[m[32m    "        except UnicodeDecodeError:\n",[m
[32m+[m[32m    "            pass\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    is_character_line = False\n",[m
[32m+[m[32m    "    current_line = ''\n",[m
[32m+[m[32m    "    current_character = ''\n",[m
[32m+[m[32m    "    for line in lines:\n",[m
[32m+[m[32m    "        strippedLine = line.strip()\n",[m
[32m+[m[32m    "        if (is_single_word_all_caps(strippedLine)):\n",[m
[32m+[m[32m    "            is_character_line = True\n",[m
[32m+[m[32m    "            current_character = strippedLine\n",[m
[32m+[m[32m    "        elif (line.strip() == '') and is_character_line:\n",[m
[32m+[m[32m    "            is_character_line = False\n",[m
[32m+[m[32m    "            dialog_line = strip_parentheses(current_line).strip()\n",[m
[32m+[m[32m    "            dialog_line = dialog_line.replace('\"', \"'\")\n",[m
[32m+[m[32m    "            if (current_character == 'DATA' and len(dialog_line)>0):\n",[m
[32m+[m[32m    "                dialogues.append(dialog_line)\n",[m
[32m+[m[32m    "            current_line = ''\n",[m
[32m+[m[32m    "        elif is_character_line:\n",[m
[32m+[m[32m    "            current_line += line.strip() + ' '\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "def process_directory(directory_path, character_name):\n",[m
[32m+[m[32m    "    for filename in os.listdir(directory_path):\n",[m
[32m+[m[32m    "        file_path = os.path.join(directory_path, filename)\n",[m
[32m+[m[32m    "        if os.path.isfile(file_path):  # Ignore directories\n",[m
[32m+[m[32m    "            extract_character_lines(file_path, character_name)\n",[m
[32m+[m[32m    "\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 3,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "Yh3peBSuMiyx"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "process_directory(\"./sample_data/tng\", 'DATA')"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "jqjo_OdEyeNF"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Let's do a little sanity check to make sure the lines imported correctly, and print out the first one."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 4,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "colab": {[m
[32m+[m[32m     "base_uri": "https://localhost:8080/"[m
[32m+[m[32m    },[m
[32m+[m[32m    "id": "x5dPI-29Myxo",[m
[32m+[m[32m    "outputId": "8f061770-2351-4e80-83d4-109d0cc04808"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "The only permanent solution would be to re-liquefy the core.\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "print (dialogues[0])"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "7x4s4hOnyqIr"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Now we'll set up what a document in our vector database looks like; it's just a string and its embedding vector. We're going with 128 dimensions in our embeddings to keep it simple, but you could go larger. The OpenAI model we're using has up to 1536 I believe."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 5,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "S15N5wi2QMvn"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "from docarray import BaseDoc\n",[m
[32m+[m[32m    "from docarray.typing import NdArray\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "embedding_dimensions = 128\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "class DialogLine(BaseDoc):\n",[m
[32m+[m[32m    "    text: str = ''\n",[m
[32m+[m[32m    "    embedding: NdArray[embedding_dimensions]"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "8W1jJUxty9kk"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "It's time to start computing embeddings for each line in OpenAI, so let's make sure OpenAI is installed:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 6,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "colab": {[m
[32m+[m[32m     "base_uri": "https://localhost:8080/"[m
[32m+[m[32m    },[m
[32m+[m[32m    "id": "4Sqtgr4kQQG9",[m
[32m+[m[32m    "outputId": "869de3f7-9d55-4614-965c-bb015a94b251"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Requirement already satisfied: openai in /usr/local/lib/python3.10/dist-packages (1.11.1)\n",[m
[32m+[m[32m      "Requirement already satisfied: anyio<5,>=3.5.0 in /usr/local/lib/python3.10/dist-packages (from openai) (3.7.1)\n",[m
[32m+[m[32m      "Requirement already satisfied: distro<2,>=1.7.0 in /usr/lib/python3/dist-packages (from openai) (1.7.0)\n",[m
[32m+[m[32m      "Requirement already satisfied: httpx<1,>=0.23.0 in /usr/local/lib/python3.10/dist-packages (from openai) (0.26.0)\n",[m
[32m+[m[32m      "Requirement already satisfied: pydantic<3,>=1.9.0 in /usr/local/lib/python3.10/dist-packages (from openai) (1.10.14)\n",[m
[32m+[m[32m      "Requirement already satisfied: sniffio in /usr/local/lib/python3.10/dist-packages (from openai) (1.3.0)\n",[m
[32m+[m[32m      "Requirement already satisfied: tqdm>4 in /usr/local/lib/python3.10/dist-packages (from openai) (4.66.1)\n",[m
[32m+[m[32m      "Requirement already satisfied: typing-extensions<5,>=4.7 in /usr/local/lib/python3.10/dist-packages (from openai) (4.9.0)\n",[m
[32m+[m[32m      "Requirement already satisfied: idna>=2.8 in /usr/local/lib/python3.10/dist-packages (from anyio<5,>=3.5.0->openai) (3.6)\n",[m
[32m+[m[32m      "Requirement already satisfied: exceptiongroup in /usr/local/lib/python3.10/dist-packages (from anyio<5,>=3.5.0->openai) (1.2.0)\n",[m
[32m+[m[32m      "Requirement already satisfied: certifi in /usr/local/lib/python3.10/dist-packages (from httpx<1,>=0.23.0->openai) (2023.11.17)\n",[m
[32m+[m[32m      "Requirement already satisfied: httpcore==1.* in /usr/local/lib/python3.10/dist-packages (from httpx<1,>=0.23.0->openai) (1.0.2)\n",[m
[32m+[m[32m      "Requirement already satisfied: h11<0.15,>=0.13 in /usr/local/lib/python3.10/dist-packages (from httpcore==1.*->httpx<1,>=0.23.0->openai) (0.14.0)\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "!pip install openai --upgrade"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "Y8oMwMzOzFLD"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Let's initialize the OpenAI client, and test creating an embedding for a single line of dialog just to make sure it works.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "You will need to provide your own OpenAI secret key here. To use this code as-is, click on the little key icon in CoLab and add a \"secret\" for OPENAI_API_KEY that points to your secret key."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 7,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "colab": {[m
[32m+[m[32m     "base_uri": "https://localhost:8080/"[m
[32m+[m[32m    },[m
[32m+[m[32m    "id": "4kJhWeYySMWL",[m
[32m+[m[32m    "outputId": "ac5229f3-ed86-4a51-b12b-0162e6af65f6"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "[-0.012653457932174206, 0.1878061145544052, 0.06242372468113899, 0.05711544305086136, -0.029895080253481865, 0.07711408287286758, 0.04201359301805496, 0.06258831918239594, 0.015657367184758186, -0.11883962899446487, 0.07929500192403793, -0.02032783068716526, -0.02041012980043888, -0.11159732192754745, 0.13159595429897308, -0.07991224527359009, 0.10846996307373047, -0.11349020153284073, -0.09793570637702942, 0.08131132274866104, 0.02429875358939171, 0.059008318930864334, 0.02514231763780117, -0.01591455191373825, 0.014916677959263325, -0.04162267595529556, 0.08698994666337967, 0.09596052765846252, -0.001743708155117929, -0.0023995277006179094, 0.19356703758239746, -0.06081889569759369, 0.045346699655056, -0.0030656345188617706, 0.020379267632961273, -0.0014942395500838757, 0.017714841291308403, 0.19504842162132263, -0.0978534072637558, 0.0042306785471737385, 0.03197312727570534, -0.01794116199016571, -0.08888282626867294, 0.04567589610815048, 0.055551763623952866, -0.047033827751874924, -0.26714226603507996, -0.07225844264030457, 0.10493110865354538, 0.03440094366669655, 0.03205542638897896, 0.09250397235155106, -0.07011867314577103, -0.01869213953614235, -0.04460601136088371, -0.1436115950345993, 0.02195323444902897, 0.02322886697947979, -0.1384267657995224, 0.046087391674518585, -0.06797890365123749, 0.05941981449723244, 0.17414449155330658, 0.028660595417022705, 0.06814349442720413, 0.09168098866939545, -0.09275086969137192, 0.15735551714897156, -0.010302795097231865, 0.07221729308366776, 0.00018372588965576142, 0.027302663773298264, -0.10665939003229141, -0.15653252601623535, 0.04448256269097328, -0.19801117479801178, -0.11554767191410065, -0.005097388755530119, -0.012684319168329239, -0.023599212989211082, 0.13134905695915222, -0.09834720194339752, 0.12583503127098083, -0.09085799753665924, -0.15101850032806396, -0.042548537254333496, 0.11908652633428574, 0.05345314368605614, -0.1468212604522705, -0.055428314954042435, -0.04538784921169281, 0.10929295420646667, -0.0007940558716654778, -0.022261856123805046, -0.020626164972782135, 0.013692481443285942, -0.01563679240643978, -0.0819285660982132, 0.0863315537571907, 0.10863456130027771, 0.15225298702716827, -0.05596325919032097, 0.055387165397405624, -0.08048833161592484, 0.2585831880569458, -0.021191969513893127, -0.12065020203590393, 0.18879370391368866, -0.011151502840220928, 0.010035322979092598, 0.13455872237682343, -0.029607033357024193, 0.02314656786620617, 0.00872882828116417, 0.011130928061902523, 0.05645705386996269, 0.07217614352703094, 0.055551763623952866, -0.06468694657087326, 0.04621083661913872, -0.1316782534122467, 0.017159322276711464, -0.05822648108005524, 0.006640493404120207, 0.04555244743824005, -0.0692133828997612, 0.06871958822011948, -0.024010706692934036]\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "from google.colab import userdata\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "from openai import OpenAI\n",[m
[32m+[m[32m    "client = OpenAI(api_key=userdata.get('OPENAI_API_KEY'))\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "embedding_model = \"text-embedding-3-small\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "response = client.embeddings.create(\n",[m
[32m+[m[32m    "    input=dialogues[1],\n",[m
[32m+[m[32m    "    dimensions=embedding_dimensions,\n",[m
[32m+[m[32m    "    model= embedding_model\n",[m
[32m+[m[32m    ")\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "print(response.data[0].embedding)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "NQVaAlcwzeCM"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Let's double check that we do in fact have embeddings of 128 dimensions as we specified."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 8,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "colab": {[m
[32m+[m[32m     "base_uri": "https://localhost:8080/"[m
[32m+[m[32m    },[m
[32m+[m[32m    "id": "PtXBxhTmShNs",[m
[32m+[m[32m    "outputId": "9cb121a8-c902-41a3-8e0b-e79b37badd3c"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "128\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "print(len(response.data[0].embedding))"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "mRk4NnRVzjDz"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "OK, now let's compute embeddings for every line Data ever said. The OpenAI API currently can't handle computing them all at once, so we're breaking it up into 128 lines at a time here."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 9,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "TyFFTJmGcdlt"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#Generate embeddings for everything Data ever said, 128 lines at a time.\n",[m
[32m+[m[32m    "embeddings = []\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for i in range(0, len(dialogues), 128):\n",[m
[32m+[m[32m    "    dialog_slice = dialogues[i:i+128]\n",[m
[32m+[m[32m    "    slice_embeddings = client.embeddings.create(\n",[m
[32m+[m[32m    "    input=dialog_slice,\n",[m
[32m+[m[32m    "    dimensions=embedding_dimensions,\n",[m
[32m+[m[32m    "    model=embedding_model\n",[m
[32m+[m[32m    "    )\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    embeddings.extend(slice_embeddings.data)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "aA5XuIUZzs_b"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Let's check how many embeddings we actually got back in total."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 10,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "colab": {[m
[32m+[m[32m     "base_uri": "https://localhost:8080/"[m
[32m+[m[32m    },[m
[32m+[m[32m    "id": "kuBDo7PUsVJZ",[m
[32m+[m[32m    "outputId": "46dafd9e-8238-436b-e016-f5524b24fcbe"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "6502\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "print (len(embeddings))"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "sKrU5tvcz1Vq"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Now let's insert every line and its embedding vector into our vector database. The syntax here will vary depending on which vector database you are using, but it's pretty simple.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "With vectordb, we need to set up a workspace folder for it to use, so be sure to create that within your CoLab drive first."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 11,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "colab": {[m
[32m+[m[32m     "base_uri": "https://localhost:8080/"[m
[32m+[m[32m    },[m
[32m+[m[32m    "id": "vVLSnCO7bRo1",[m
[32m+[m[32m    "outputId": "8b8742b2-e3da-442f-e6ff-7201ad5b1106"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stderr",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "WARNING - docarray - Index file does not exist: /content/sample_data/workspace/InMemoryExactNNIndexer[DialogLine][DialogLineWithMatchesAndScores]/index.bin. Initializing empty InMemoryExactNNIndex.\n",[m
[32m+[m[32m      "WARNING:docarray:Index file does not exist: /content/sample_data/workspace/InMemoryExactNNIndexer[DialogLine][DialogLineWithMatchesAndScores]/index.bin. Initializing empty InMemoryExactNNIndex.\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "<DocList[DialogLine] (length=6502)>"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 11,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "from docarray import DocList\n",[m
[32m+[m[32m    "import numpy as np\n",[m
[32m+[m[32m    "from vectordb import InMemoryExactNNVectorDB\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Specify your workspace path\n",[m
[32m+[m[32m    "db = InMemoryExactNNVectorDB[DialogLine](workspace='./sample_data/workspace')\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Index our list of documents\n",[m
[32m+[m[32m    "doc_list = [DialogLine(text=dialogues[i], embedding=embeddings[i].embedding) for i in range(len(embeddings))]\n",[m
[32m+[m[32m    "db.index(inputs=DocList[DialogLine](doc_list))\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "Fxormngx0IFz"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Let's try querying our vector database for lines similar to a query string.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "First we need to compute the embedding vector for our query string, then we'll query the vector database for the top 10 matches based on the similarities encoded by their embedding vectors."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 12,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "colab": {[m
[32m+[m[32m     "base_uri": "https://localhost:8080/",[m
[32m+[m[32m     "height": 1000[m
[32m+[m[32m    },[m
[32m+[m[32m    "id": "woU_o_qS0FuD",[m
[32m+[m[32m    "outputId": "4834fab3-6b71-4676-8453-044478d29d30"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/html": [[m
[32m+[m[32m       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n"[m
[32m+[m[32m      ],[m
[32m+[m[32m      "text/plain": [][m
[32m+[m[32m     },[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "display_data"[m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\u001b[1;35mDialogLine\u001b[0m\u001b[1m(\u001b[0m\n",[m
[32m+[m[32m      "    \u001b[33mid\u001b[0m=\u001b[32m'e4002ce0ac1a555c5412551ebeca6b2e'\u001b[0m,\n",[m
[32m+[m[32m      "    \u001b[33mtext\u001b[0m=\u001b[32m'That is Lal, my daughter.'\u001b[0m,\n",[m
[32m+[m[32m      "    \u001b[33membedding\u001b[0m=\u001b[1;35mNdArray\u001b[0m\u001b[1m(\u001b[0m\u001b[1m[\u001b[0m \u001b[1;36m1.27129272e-01\u001b[0m, \u001b[1;36m-2.03528721e-03\u001b[0m, \u001b[1;36m-1.36807682e-02\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m1.59366392e-02\u001b[0m,  \u001b[1;36m5.45047633e-02\u001b[0m, \u001b[1;36m-2.07394622e-02\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m1.57365222e-02\u001b[0m,  \u001b[1;36m8.31033960e-02\u001b[0m, \u001b[1;36m-1.62277207e-01\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m1.60185061e-02\u001b[0m,  \u001b[1;36m3.74038033e-02\u001b[0m, \u001b[1;36m-1.14394508e-01\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-4.85740043e-02\u001b[0m, \u001b[1;36m-2.47418150e-01\u001b[0m,  \u001b[1;36m3.91138978e-02\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m4.99566346e-02\u001b[0m,  \u001b[1;36m2.97811404e-02\u001b[0m, \u001b[1;36m-1.34697348e-01\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-1.76540136e-01\u001b[0m,  \u001b[1;36m1.35570601e-01\u001b[0m,  \u001b[1;36m1.45394549e-01\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m3.51115465e-02\u001b[0m,  \u001b[1;36m6.64026663e-02\u001b[0m, \u001b[1;36m-7.42618293e-02\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m6.95317760e-02\u001b[0m, \u001b[1;36m-2.21380126e-03\u001b[0m,  \u001b[1;36m1.92549542e-01\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-7.93193504e-02\u001b[0m, \u001b[1;36m-3.13275047e-02\u001b[0m, \u001b[1;36m-6.27641678e-02\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m7.94648901e-02\u001b[0m, \u001b[1;36m-1.12720802e-01\u001b[0m, \u001b[1;36m-3.74765731e-02\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-3.83861996e-02\u001b[0m, \u001b[1;36m-8.36855546e-02\u001b[0m,  \u001b[1;36m9.27818120e-02\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-7.24061951e-03\u001b[0m, \u001b[1;36m-2.10669283e-02\u001b[0m, \u001b[1;36m-4.71913740e-02\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-8.78334418e-02\u001b[0m, \u001b[1;36m-1.85854703e-01\u001b[0m, \u001b[1;36m-1.15704373e-01\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m5.83251901e-02\u001b[0m,  \u001b[1;36m6.38921037e-02\u001b[0m,  \u001b[1;36m6.96773157e-02\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m9.05987099e-02\u001b[0m, \u001b[1;36m-2.15108261e-01\u001b[0m,  \u001b[1;36m1.16286531e-01\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-5.90165071e-02\u001b[0m,  \u001b[1;36m3.17277387e-02\u001b[0m, \u001b[1;36m-3.17277387e-02\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m6.84038401e-02\u001b[0m,  \u001b[1;36m9.12536383e-02\u001b[0m,  \u001b[1;36m2.14089468e-01\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-9.96221900e-02\u001b[0m, \u001b[1;36m-5.44865709e-03\u001b[0m,  \u001b[1;36m3.12001575e-02\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m1.86291322e-01\u001b[0m,  \u001b[1;36m3.35106067e-02\u001b[0m, \u001b[1;36m-3.67670655e-02\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-1.42410979e-01\u001b[0m,  \u001b[1;36m6.72395229e-02\u001b[0m,  \u001b[1;36m5.08662611e-02\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-4.18063924e-02\u001b[0m, \u001b[1;36m-9.13991779e-02\u001b[0m, \u001b[1;36m-4.67547541e-03\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-1.11192629e-01\u001b[0m,  \u001b[1;36m4.23885509e-02\u001b[0m, \u001b[1;36m-3.12729254e-02\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m7.49531463e-02\u001b[0m,  \u001b[1;36m4.18427773e-02\u001b[0m,  \u001b[1;36m8.14296827e-02\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-1.53253719e-01\u001b[0m,  \u001b[1;36m3.08726914e-02\u001b[0m, \u001b[1;36m-7.17876479e-02\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-1.13957889e-01\u001b[0m, \u001b[1;36m-1.35934442e-01\u001b[0m, \u001b[1;36m-2.52875909e-02\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m1.41974360e-01\u001b[0m, \u001b[1;36m-1.93204470e-02\u001b[0m,  \u001b[1;36m7.27245631e-03\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-2.25041360e-02\u001b[0m, \u001b[1;36m-1.52180362e-02\u001b[0m,  \u001b[1;36m2.42870022e-02\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m3.55845541e-02\u001b[0m, \u001b[1;36m-1.09882772e-01\u001b[0m, \u001b[1;36m-5.47594577e-02\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-1.46085871e-02\u001b[0m, \u001b[1;36m-5.17031178e-02\u001b[0m, \u001b[1;36m-4.05238196e-03\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-5.14484234e-02\u001b[0m,  \u001b[1;36m2.46326607e-02\u001b[0m, \u001b[1;36m-1.12939112e-01\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-1.72828864e-02\u001b[0m,  \u001b[1;36m6.36374056e-02\u001b[0m,  \u001b[1;36m7.16421083e-02\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m3.59302089e-02\u001b[0m,  \u001b[1;36m3.19642425e-02\u001b[0m, \u001b[1;36m-3.24736312e-02\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-1.93022545e-02\u001b[0m,  \u001b[1;36m9.13264081e-02\u001b[0m, \u001b[1;36m-7.77911767e-02\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-4.66456003e-02\u001b[0m, \u001b[1;36m-1.28220826e-01\u001b[0m, \u001b[1;36m-3.13138613e-03\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m1.30840540e-01\u001b[0m,  \u001b[1;36m7.58991614e-02\u001b[0m, \u001b[1;36m-2.47236229e-02\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-1.13739580e-01\u001b[0m,  \u001b[1;36m9.52559933e-02\u001b[0m, \u001b[1;36m-2.13070691e-01\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-7.30975121e-02\u001b[0m, \u001b[1;36m-6.31280169e-02\u001b[0m, \u001b[1;36m-2.39686342e-03\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m7.91010410e-02\u001b[0m, \u001b[1;36m-7.70634785e-02\u001b[0m, \u001b[1;36m-2.34910799e-03\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-5.61693776e-03\u001b[0m, \u001b[1;36m-3.31831425e-02\u001b[0m, \u001b[1;36m-1.29457906e-01\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m7.13510290e-02\u001b[0m,  \u001b[1;36m2.76890025e-02\u001b[0m, \u001b[1;36m-2.84167025e-02\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-2.07831249e-01\u001b[0m, \u001b[1;36m-9.48921368e-02\u001b[0m, \u001b[1;36m-1.69918053e-02\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-1.61316406e-04\u001b[0m,  \u001b[1;36m1.64187420e-02\u001b[0m\u001b[1m]\u001b[0m\u001b[1m)\u001b[0m\n",[m
[32m+[m[32m      "\u001b[1m)\u001b[0m\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/html": [[m
[32m+[m[32m       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n"[m
[32m+[m[32m      ],[m
[32m+[m[32m      "text/plain": [][m
[32m+[m[32m     },[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "display_data"[m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\u001b[1;35mDialogLine\u001b[0m\u001b[1m(\u001b[0m\n",[m
[32m+[m[32m      "    \u001b[33mid\u001b[0m=\u001b[32m'432248aaa8a81ebdd28e6ff55ed9b157'\u001b[0m,\n",[m
[32m+[m[32m      "    \u001b[33mtext\u001b[0m=\u001b[32m'Lal...'\u001b[0m,\n",[m
[32m+[m[32m      "    \u001b[33membedding\u001b[0m=\u001b[1;35mNdArray\u001b[0m\u001b[1m(\u001b[0m\u001b[1m[\u001b[0m \u001b[1;36m0.12602141\u001b[0m, \u001b[1;36m-0.00787136\u001b[0m,  \u001b[1;36m0.07228519\u001b[0m, \u001b[1;36m-0.01194139\u001b[0m,  \u001b[1;36m0.08780899\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.0861372\u001b[0m ,  \u001b[1;36m0.07216577\u001b[0m,  \u001b[1;36m0.05365663\u001b[0m, \u001b[1;36m-0.12729517\u001b[0m,  \u001b[1;36m0.05286053\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.01232948\u001b[0m, \u001b[1;36m-0.15460114\u001b[0m, \u001b[1;36m-0.00170165\u001b[0m, \u001b[1;36m-0.08239556\u001b[0m,  \u001b[1;36m0.09370007\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.01691696\u001b[0m,  \u001b[1;36m0.02444004\u001b[0m, \u001b[1;36m-0.08008689\u001b[0m, \u001b[1;36m-0.08653524\u001b[0m,  \u001b[1;36m0.1749811\u001b[0m ,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.08995844\u001b[0m,  \u001b[1;36m0.09163023\u001b[0m, \u001b[1;36m-0.05389545\u001b[0m, \u001b[1;36m-0.01919578\u001b[0m,  \u001b[1;36m0.12530494\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.01854895\u001b[0m,  \u001b[1;36m0.09521265\u001b[0m, \u001b[1;36m-0.01378235\u001b[0m,  \u001b[1;36m0.04026237\u001b[0m,  \u001b[1;36m0.0171956\u001b[0m ,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.00565723\u001b[0m, \u001b[1;36m-0.10994036\u001b[0m, \u001b[1;36m-0.00869731\u001b[0m, \u001b[1;36m-0.10675599\u001b[0m, \u001b[1;36m-0.08422657\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.17179674\u001b[0m,  \u001b[1;36m0.02748509\u001b[0m, \u001b[1;36m-0.11169176\u001b[0m, \u001b[1;36m-0.05998556\u001b[0m, \u001b[1;36m-0.08207712\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.19981918\u001b[0m, \u001b[1;36m-0.1276136\u001b[0m ,  \u001b[1;36m0.0654786\u001b[0m ,  \u001b[1;36m0.07288226\u001b[0m,  \u001b[1;36m0.10158139\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.05636334\u001b[0m, \u001b[1;36m-0.23134445\u001b[0m,  \u001b[1;36m0.03984442\u001b[0m, \u001b[1;36m-0.01744437\u001b[0m,  \u001b[1;36m0.05799533\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.09608835\u001b[0m,  \u001b[1;36m0.07339972\u001b[0m,  \u001b[1;36m0.09250593\u001b[0m,  \u001b[1;36m0.20969073\u001b[0m, \u001b[1;36m-0.07634526\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.01803149\u001b[0m, \u001b[1;36m-0.01945451\u001b[0m,  \u001b[1;36m0.10731325\u001b[0m,  \u001b[1;36m0.0474073\u001b[0m , \u001b[1;36m-0.01596165\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.11622949\u001b[0m, \u001b[1;36m-0.03624211\u001b[0m,  \u001b[1;36m0.08000728\u001b[0m, \u001b[1;36m-0.09385929\u001b[0m, \u001b[1;36m-0.08629641\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.10866661\u001b[0m, \u001b[1;36m-0.15316817\u001b[0m,  \u001b[1;36m0.11829933\u001b[0m,  \u001b[1;36m0.02034016\u001b[0m,  \u001b[1;36m0.15348661\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.02718655\u001b[0m,  \u001b[1;36m0.01041886\u001b[0m, \u001b[1;36m-0.10389005\u001b[0m,  \u001b[1;36m0.06086126\u001b[0m,  \u001b[1;36m0.00918989\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.05055187\u001b[0m, \u001b[1;36m-0.03504797\u001b[0m,  \u001b[1;36m0.00815497\u001b[0m,  \u001b[1;36m0.13700749\u001b[0m, \u001b[1;36m-0.06647372\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.03064956\u001b[0m, \u001b[1;36m-0.09457577\u001b[0m, \u001b[1;36m-0.07531033\u001b[0m, \u001b[1;36m-0.0292962\u001b[0m ,  \u001b[1;36m0.12610103\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.15953691\u001b[0m, \u001b[1;36m-0.12442924\u001b[0m,  \u001b[1;36m0.01087661\u001b[0m, \u001b[1;36m-0.10404927\u001b[0m, \u001b[1;36m-0.05106933\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.06838433\u001b[0m,  \u001b[1;36m0.01221007\u001b[0m, \u001b[1;36m-0.11686636\u001b[0m, \u001b[1;36m-0.03283881\u001b[0m,  \u001b[1;36m0.09322242\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.04692965\u001b[0m,  \u001b[1;36m0.02925639\u001b[0m, \u001b[1;36m-0.01987245\u001b[0m,  \u001b[1;36m0.06368739\u001b[0m,  \u001b[1;36m0.00444817\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.04661121\u001b[0m, \u001b[1;36m-0.04927812\u001b[0m, \u001b[1;36m-0.04183465\u001b[0m, \u001b[1;36m-0.11041801\u001b[0m,  \u001b[1;36m0.08924195\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.04533746\u001b[0m, \u001b[1;36m-0.02290756\u001b[0m, \u001b[1;36m-0.01150353\u001b[0m, \u001b[1;36m-0.00630903\u001b[0m,  \u001b[1;36m0.05986615\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.08979922\u001b[0m, \u001b[1;36m-0.03041073\u001b[0m, \u001b[1;36m-0.04191426\u001b[0m, \u001b[1;36m-0.03256018\u001b[0m,  \u001b[1;36m0.06519996\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.06599606\u001b[0m,  \u001b[1;36m0.08096259\u001b[0m, \u001b[1;36m-0.127534\u001b[0m  ,  \u001b[1;36m0.01335445\u001b[0m, \u001b[1;36m-0.17163752\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.02734577\u001b[0m, \u001b[1;36m-0.08900312\u001b[0m,  \u001b[1;36m0.02272844\u001b[0m, \u001b[1;36m-0.24376348\u001b[0m, \u001b[1;36m-0.15197404\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.11575183\u001b[0m,  \u001b[1;36m0.06348836\u001b[0m,  \u001b[1;36m0.06559801\u001b[0m\u001b[1m]\u001b[0m\u001b[1m)\u001b[0m\n",[m
[32m+[m[32m      "\u001b[1m)\u001b[0m\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/html": [[m
[32m+[m[32m       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n"[m
[32m+[m[32m      ],[m
[32m+[m[32m      "text/plain": [][m
[32m+[m[32m     },[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "display_data"[m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\u001b[1;35mDialogLine\u001b[0m\u001b[1m(\u001b[0m\n",[m
[32m+[m[32m      "    \u001b[33mid\u001b[0m=\u001b[32m'efc111982ace31e2129f160676db9e39'\u001b[0m,\n",[m
[32m+[m[32m      "    \u001b[33mtext\u001b[0m=\u001b[32m'What do you feel, Lal?'\u001b[0m,\n",[m
[32m+[m[32m      "    \u001b[33membedding\u001b[0m=\u001b[1;35mNdArray\u001b[0m\u001b[1m(\u001b[0m\u001b[1m[\u001b[0m \u001b[1;36m0.12457579\u001b[0m, \u001b[1;36m-0.0550159\u001b[0m , \u001b[1;36m-0.01717105\u001b[0m,  \u001b[1;36m0.04991408\u001b[0m,  \u001b[1;36m0.1378253\u001b[0m ,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.00798111\u001b[0m,  \u001b[1;36m0.01482955\u001b[0m, \u001b[1;36m-0.00798111\u001b[0m, \u001b[1;36m-0.04306089\u001b[0m,  \u001b[1;36m0.10569144\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.00157885\u001b[0m, \u001b[1;36m-0.10675749\u001b[0m, \u001b[1;36m-0.10995565\u001b[0m, \u001b[1;36m-0.13287577\u001b[0m,  \u001b[1;36m0.00797635\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.00701976\u001b[0m,  \u001b[1;36m0.06773238\u001b[0m, \u001b[1;36m-0.10119879\u001b[0m, \u001b[1;36m-0.1110217\u001b[0m ,  \u001b[1;36m0.06902687\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.11292537\u001b[0m,  \u001b[1;36m0.01653332\u001b[0m, \u001b[1;36m-0.07740299\u001b[0m, \u001b[1;36m-0.0203121\u001b[0m ,  \u001b[1;36m0.11033639\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.15670964\u001b[0m,  \u001b[1;36m0.09959972\u001b[0m,  \u001b[1;36m0.0350655\u001b[0m , \u001b[1;36m-0.04949527\u001b[0m,  \u001b[1;36m0.0302873\u001b[0m ,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.02922125\u001b[0m, \u001b[1;36m-0.10500612\u001b[0m, \u001b[1;36m-0.02417654\u001b[0m, \u001b[1;36m-0.14848582\u001b[0m, \u001b[1;36m-0.09822908\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.06194524\u001b[0m, \u001b[1;36m-0.06834155\u001b[0m, \u001b[1;36m-0.02497608\u001b[0m,  \u001b[1;36m0.00790973\u001b[0m, \u001b[1;36m-0.11536206\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.21153519\u001b[0m, \u001b[1;36m-0.08063922\u001b[0m,  \u001b[1;36m0.05181774\u001b[0m,  \u001b[1;36m0.09145203\u001b[0m,  \u001b[1;36m0.08855847\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.019741\u001b[0m  , \u001b[1;36m-0.17072062\u001b[0m,  \u001b[1;36m0.05139894\u001b[0m, \u001b[1;36m-0.05947047\u001b[0m,  \u001b[1;36m0.03529394\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.03554141\u001b[0m,  \u001b[1;36m0.01046064\u001b[0m,  \u001b[1;36m0.10531071\u001b[0m,  \u001b[1;36m0.28128543\u001b[0m, \u001b[1;36m-0.12061618\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.01055582\u001b[0m, \u001b[1;36m-0.07409061\u001b[0m,  \u001b[1;36m0.08482728\u001b[0m,  \u001b[1;36m0.06594294\u001b[0m,  \u001b[1;36m0.02851689\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.24686719\u001b[0m, \u001b[1;36m-0.03021115\u001b[0m,  \u001b[1;36m0.02712722\u001b[0m, \u001b[1;36m-0.14642987\u001b[0m, \u001b[1;36m-0.14574455\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.06537183\u001b[0m, \u001b[1;36m-0.14970416\u001b[0m,  \u001b[1;36m0.04663978\u001b[0m, \u001b[1;36m-0.01183127\u001b[0m,  \u001b[1;36m0.08391352\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.06255441\u001b[0m,  \u001b[1;36m0.10607217\u001b[0m,  \u001b[1;36m0.01970293\u001b[0m,  \u001b[1;36m0.06506725\u001b[0m, \u001b[1;36m-0.03588407\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.14056657\u001b[0m, \u001b[1;36m-0.03807329\u001b[0m, \u001b[1;36m-0.11627582\u001b[0m,  \u001b[1;36m0.07896399\u001b[0m, \u001b[1;36m-0.01226912\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.02731758\u001b[0m, \u001b[1;36m-0.05874708\u001b[0m, \u001b[1;36m-0.03993888\u001b[0m,  \u001b[1;36m0.09769605\u001b[0m,  \u001b[1;36m0.09868596\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.11155473\u001b[0m, \u001b[1;36m-0.09899054\u001b[0m,  \u001b[1;36m0.09465019\u001b[0m, \u001b[1;36m-0.08962452\u001b[0m, \u001b[1;36m-0.01394434\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.08193371\u001b[0m,  \u001b[1;36m0.04968564\u001b[0m, \u001b[1;36m-0.1121639\u001b[0m ,  \u001b[1;36m0.03205771\u001b[0m,  \u001b[1;36m0.00370977\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.03508453\u001b[0m,  \u001b[1;36m0.11536206\u001b[0m,  \u001b[1;36m0.01976003\u001b[0m, \u001b[1;36m-0.05147508\u001b[0m,  \u001b[1;36m0.02767928\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.01972196\u001b[0m, \u001b[1;36m-0.0277935\u001b[0m ,  \u001b[1;36m0.01889387\u001b[0m, \u001b[1;36m-0.07740299\u001b[0m,  \u001b[1;36m0.05166545\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.10112265\u001b[0m,  \u001b[1;36m0.02480475\u001b[0m,  \u001b[1;36m0.0605746\u001b[0m , \u001b[1;36m-0.00507327\u001b[0m,  \u001b[1;36m0.06975026\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.20194072\u001b[0m, \u001b[1;36m-0.0649911\u001b[0m , \u001b[1;36m-0.10668135\u001b[0m,  \u001b[1;36m0.07203466\u001b[0m, \u001b[1;36m-0.00278887\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.07618465\u001b[0m, \u001b[1;36m-0.05067554\u001b[0m,  \u001b[1;36m0.02341507\u001b[0m,  \u001b[1;36m0.01815144\u001b[0m, \u001b[1;36m-0.14574455\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.00635348\u001b[0m, \u001b[1;36m-0.05551085\u001b[0m, \u001b[1;36m-0.00058032\u001b[0m, \u001b[1;36m-0.21336269\u001b[0m, \u001b[1;36m-0.14772435\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.01827518\u001b[0m,  \u001b[1;36m0.05391178\u001b[0m,  \u001b[1;36m0.00813816\u001b[0m\u001b[1m]\u001b[0m\u001b[1m)\u001b[0m\n",[m
[32m+[m[32m      "\u001b[1m)\u001b[0m\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/html": [[m
[32m+[m[32m       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n"[m
[32m+[m[32m      ],[m
[32m+[m[32m      "text/plain": [][m
[32m+[m[32m     },[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "display_data"[m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\u001b[1;35mDialogLine\u001b[0m\u001b[1m(\u001b[0m\n",[m
[32m+[m[32m      "    \u001b[33mid\u001b[0m=\u001b[32m'8eaa55be876073153d2f74df29595925'\u001b[0m,\n",[m
[32m+[m[32m      "    \u001b[33mtext\u001b[0m=\u001b[32m'Yes, Lal. I am here.'\u001b[0m,\n",[m
[32m+[m[32m      "    \u001b[33membedding\u001b[0m=\u001b[1;35mNdArray\u001b[0m\u001b[1m(\u001b[0m\u001b[1m[\u001b[0m \u001b[1;36m0.02412624\u001b[0m,  \u001b[1;36m0.00757259\u001b[0m, \u001b[1;36m-0.02155785\u001b[0m, \u001b[1;36m-0.08026613\u001b[0m,  \u001b[1;36m0.14104569\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.01711703\u001b[0m, \u001b[1;36m-0.00144782\u001b[0m,  \u001b[1;36m0.07794631\u001b[0m, \u001b[1;36m-0.12321614\u001b[0m,  \u001b[1;36m0.03400209\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.04460702\u001b[0m, \u001b[1;36m-0.07304152\u001b[0m, \u001b[1;36m-0.00033891\u001b[0m, \u001b[1;36m-0.09637238\u001b[0m, \u001b[1;36m-0.03348841\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.08888265\u001b[0m, \u001b[1;36m-0.03315701\u001b[0m,  \u001b[1;36m0.06734136\u001b[0m, \u001b[1;36m-0.1063808\u001b[0m ,  \u001b[1;36m0.17895834\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.05617304\u001b[0m, \u001b[1;36m-0.06793789\u001b[0m, \u001b[1;36m-0.03372039\u001b[0m,  \u001b[1;36m0.06747393\u001b[0m,  \u001b[1;36m0.08649653\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.02833507\u001b[0m,  \u001b[1;36m0.082122\u001b[0m  , \u001b[1;36m-0.00111642\u001b[0m, \u001b[1;36m-0.08603257\u001b[0m, \u001b[1;36m-0.0121294\u001b[0m ,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.01734902\u001b[0m, \u001b[1;36m-0.12314986\u001b[0m, \u001b[1;36m-0.14542022\u001b[0m, \u001b[1;36m-0.02266806\u001b[0m, \u001b[1;36m-0.06140923\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.0900757\u001b[0m ,  \u001b[1;36m0.05375379\u001b[0m,  \u001b[1;36m0.0476228\u001b[0m , \u001b[1;36m-0.05047288\u001b[0m, \u001b[1;36m-0.18850279\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.15363906\u001b[0m, \u001b[1;36m-0.13448389\u001b[0m,  \u001b[1;36m0.08682794\u001b[0m,  \u001b[1;36m0.08961174\u001b[0m, \u001b[1;36m-0.02127616\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.03930455\u001b[0m, \u001b[1;36m-0.21475002\u001b[0m,  \u001b[1;36m0.05597419\u001b[0m, \u001b[1;36m-0.06986003\u001b[0m,  \u001b[1;36m0.08126035\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.0550794\u001b[0m , \u001b[1;36m-0.01448237\u001b[0m,  \u001b[1;36m0.06111096\u001b[0m,  \u001b[1;36m0.30701298\u001b[0m, \u001b[1;36m-0.01918831\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.02530272\u001b[0m,  \u001b[1;36m0.03947026\u001b[0m,  \u001b[1;36m0.16649754\u001b[0m,  \u001b[1;36m0.07383689\u001b[0m, \u001b[1;36m-0.07854283\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.14104569\u001b[0m, \u001b[1;36m-0.00348596\u001b[0m,  \u001b[1;36m0.03259362\u001b[0m, \u001b[1;36m-0.10094576\u001b[0m, \u001b[1;36m-0.14568534\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.06986003\u001b[0m, \u001b[1;36m-0.05673642\u001b[0m,  \u001b[1;36m0.10485633\u001b[0m, \u001b[1;36m-0.06578376\u001b[0m, \u001b[1;36m-0.01227025\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.00403278\u001b[0m,  \u001b[1;36m0.06618145\u001b[0m, \u001b[1;36m-0.05667014\u001b[0m,  \u001b[1;36m0.05948708\u001b[0m, \u001b[1;36m-0.05159966\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.00305099\u001b[0m, \u001b[1;36m-0.14290155\u001b[0m,  \u001b[1;36m0.03236163\u001b[0m,  \u001b[1;36m0.07436714\u001b[0m, \u001b[1;36m-0.03698473\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.06502153\u001b[0m, \u001b[1;36m-0.00402035\u001b[0m, \u001b[1;36m-0.0597522\u001b[0m , \u001b[1;36m-0.04275116\u001b[0m, \u001b[1;36m-0.04212149\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.08126035\u001b[0m, \u001b[1;36m-0.14886683\u001b[0m,  \u001b[1;36m0.11367169\u001b[0m, \u001b[1;36m-0.01066293\u001b[0m,  \u001b[1;36m0.00214377\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.05567593\u001b[0m,  \u001b[1;36m0.04725826\u001b[0m, \u001b[1;36m-0.11910672\u001b[0m, \u001b[1;36m-0.06147551\u001b[0m,  \u001b[1;36m0.07993473\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.00744003\u001b[0m,  \u001b[1;36m0.0713845\u001b[0m ,  \u001b[1;36m0.07880796\u001b[0m,  \u001b[1;36m0.06077956\u001b[0m,  \u001b[1;36m0.06508782\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.16291837\u001b[0m, \u001b[1;36m-0.09710147\u001b[0m, \u001b[1;36m-0.04208835\u001b[0m, \u001b[1;36m-0.19155172\u001b[0m,  \u001b[1;36m0.0050332\u001b[0m ,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.12142655\u001b[0m,  \u001b[1;36m0.07324036\u001b[0m,  \u001b[1;36m0.0363882\u001b[0m , \u001b[1;36m-0.06369592\u001b[0m,  \u001b[1;36m0.08530348\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.19910774\u001b[0m, \u001b[1;36m-0.14846915\u001b[0m, \u001b[1;36m-0.05034032\u001b[0m,  \u001b[1;36m0.00214377\u001b[0m, \u001b[1;36m-0.03400209\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.0146315\u001b[0m ,  \u001b[1;36m0.03784638\u001b[0m,  \u001b[1;36m0.02392739\u001b[0m,  \u001b[1;36m0.00270302\u001b[0m, \u001b[1;36m-0.04981007\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.15549491\u001b[0m,  \u001b[1;36m0.03784638\u001b[0m,  \u001b[1;36m0.04984321\u001b[0m, \u001b[1;36m-0.19738443\u001b[0m, \u001b[1;36m-0.12792207\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.0033824\u001b[0m , \u001b[1;36m-0.04616462\u001b[0m, \u001b[1;36m-0.02437479\u001b[0m\u001b[1m]\u001b[0m\u001b[1m)\u001b[0m\n",[m
[32m+[m[32m      "\u001b[1m)\u001b[0m\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/html": [[m
[32m+[m[32m       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n"[m
[32m+[m[32m      ],[m
[32m+[m[32m      "text/plain": [][m
[32m+[m[32m     },[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "display_data"[m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\u001b[1;35mDialogLine\u001b[0m\u001b[1m(\u001b[0m\n",[m
[32m+[m[32m      "    \u001b[33mid\u001b[0m=\u001b[32m'17b68bb7f65a59d4f1ff95840ae98a4e'\u001b[0m,\n",[m
[32m+[m[32m      "    \u001b[33mtext\u001b[0m=\u001b[32m'Correct, Lal. We are a family.'\u001b[0m,\n",[m
[32m+[m[32m      "    \u001b[33membedding\u001b[0m=\u001b[1;35mNdArray\u001b[0m\u001b[1m(\u001b[0m\u001b[1m[\u001b[0m \u001b[1;36m0.09101048\u001b[0m,  \u001b[1;36m0.05812611\u001b[0m, \u001b[1;36m-0.08708399\u001b[0m,  \u001b[1;36m0.09963474\u001b[0m,  \u001b[1;36m0.10328077\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.01980775\u001b[0m, \u001b[1;36m-0.05731978\u001b[0m,  \u001b[1;36m0.05514618\u001b[0m, \u001b[1;36m-0.16827823\u001b[0m, \u001b[1;36m-0.01631948\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.04038678\u001b[0m, \u001b[1;36m-0.07572521\u001b[0m, \u001b[1;36m-0.07635625\u001b[0m, \u001b[1;36m-0.13819851\u001b[0m, \u001b[1;36m-0.00216154\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.0198954\u001b[0m ,  \u001b[1;36m0.1148499\u001b[0m , \u001b[1;36m-0.06636473\u001b[0m, \u001b[1;36m-0.05970372\u001b[0m,  \u001b[1;36m0.1113441\u001b[0m ,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.11456943\u001b[0m, \u001b[1;36m-0.08091379\u001b[0m,  \u001b[1;36m0.06348997\u001b[0m, \u001b[1;36m-0.10264973\u001b[0m,  \u001b[1;36m0.05973877\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.10152787\u001b[0m,  \u001b[1;36m0.09774161\u001b[0m,  \u001b[1;36m0.00347731\u001b[0m,  \u001b[1;36m0.01418095\u001b[0m,  \u001b[1;36m0.01317303\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.0166613\u001b[0m , \u001b[1;36m-0.09339442\u001b[0m, \u001b[1;36m-0.08708399\u001b[0m,  \u001b[1;36m0.02827425\u001b[0m, \u001b[1;36m-0.11015213\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.17991748\u001b[0m,  \u001b[1;36m0.0261883\u001b[0m ,  \u001b[1;36m0.03204298\u001b[0m,  \u001b[1;36m0.00653393\u001b[0m, \u001b[1;36m-0.08946793\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.19702578\u001b[0m, \u001b[1;36m-0.08575179\u001b[0m,  \u001b[1;36m0.04210462\u001b[0m, \u001b[1;36m-0.0058985\u001b[0m ,  \u001b[1;36m0.05335822\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.00794939\u001b[0m, \u001b[1;36m-0.13875943\u001b[0m,  \u001b[1;36m0.17935656\u001b[0m, \u001b[1;36m-0.02788861\u001b[0m, \u001b[1;36m-0.00921148\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.05244672\u001b[0m,  \u001b[1;36m0.03639017\u001b[0m,  \u001b[1;36m0.0683981\u001b[0m ,  \u001b[1;36m0.1055946\u001b[0m , \u001b[1;36m-0.11421885\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.04508454\u001b[0m,  \u001b[1;36m0.03179758\u001b[0m,  \u001b[1;36m0.11085329\u001b[0m,  \u001b[1;36m0.01071021\u001b[0m, \u001b[1;36m-0.01472435\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.11449932\u001b[0m,  \u001b[1;36m0.01296268\u001b[0m, \u001b[1;36m-0.00305662\u001b[0m, \u001b[1;36m-0.12396497\u001b[0m, \u001b[1;36m-0.03632005\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.07036134\u001b[0m, \u001b[1;36m-0.00477227\u001b[0m,  \u001b[1;36m0.0407023\u001b[0m ,  \u001b[1;36m0.04606617\u001b[0m,  \u001b[1;36m0.0954979\u001b[0m ,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.02487363\u001b[0m,  \u001b[1;36m0.04999266\u001b[0m, \u001b[1;36m-0.18328305\u001b[0m,  \u001b[1;36m0.07256999\u001b[0m, \u001b[1;36m-0.01859825\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.05402433\u001b[0m, \u001b[1;36m-0.14429858\u001b[0m, \u001b[1;36m-0.04126323\u001b[0m,  \u001b[1;36m0.10657622\u001b[0m,  \u001b[1;36m0.01849308\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.09051967\u001b[0m,  \u001b[1;36m0.05107946\u001b[0m,  \u001b[1;36m0.1069268\u001b[0m ,  \u001b[1;36m0.05563699\u001b[0m,  \u001b[1;36m0.07285045\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.03800283\u001b[0m, \u001b[1;36m-0.01649477\u001b[0m,  \u001b[1;36m0.07951146\u001b[0m, \u001b[1;36m-0.07418266\u001b[0m,  \u001b[1;36m0.0769873\u001b[0m ,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.01395307\u001b[0m,  \u001b[1;36m0.0809839\u001b[0m , \u001b[1;36m-0.12775123\u001b[0m, \u001b[1;36m-0.03339271\u001b[0m,  \u001b[1;36m0.17318635\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.0602997\u001b[0m , \u001b[1;36m-0.05342834\u001b[0m, \u001b[1;36m-0.00433842\u001b[0m,  \u001b[1;36m0.00472844\u001b[0m,  \u001b[1;36m0.04192933\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.1192672\u001b[0m , \u001b[1;36m-0.09942439\u001b[0m, \u001b[1;36m-0.01333956\u001b[0m, \u001b[1;36m-0.17318635\u001b[0m,  \u001b[1;36m0.04455867\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.09234268\u001b[0m,  \u001b[1;36m0.07071192\u001b[0m, \u001b[1;36m-0.0134272\u001b[0m , \u001b[1;36m-0.17655192\u001b[0m,  \u001b[1;36m0.12648915\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.25872779\u001b[0m, \u001b[1;36m-0.08701387\u001b[0m, \u001b[1;36m-0.02843201\u001b[0m,  \u001b[1;36m0.00899237\u001b[0m, \u001b[1;36m-0.02154312\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.00757252\u001b[0m, \u001b[1;36m-0.09528755\u001b[0m, \u001b[1;36m-0.05405938\u001b[0m, \u001b[1;36m-0.0919921\u001b[0m , \u001b[1;36m-0.04676733\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.1632299\u001b[0m ,  \u001b[1;36m0.01092932\u001b[0m,  \u001b[1;36m0.07944135\u001b[0m, \u001b[1;36m-0.24764948\u001b[0m, \u001b[1;36m-0.01903648\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.10706703\u001b[0m, \u001b[1;36m-0.03691604\u001b[0m,  \u001b[1;36m0.117935\u001b[0m  \u001b[1m]\u001b[0m\u001b[1m)\u001b[0m\n",[m
[32m+[m[32m      "\u001b[1m)\u001b[0m\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/html": [[m
[32m+[m[32m       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n"[m
[32m+[m[32m      ],[m
[32m+[m[32m      "text/plain": [][m
[32m+[m[32m     },[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "display_data"[m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\u001b[1;35mDialogLine\u001b[0m\u001b[1m(\u001b[0m\n",[m
[32m+[m[32m      "    \u001b[33mid\u001b[0m=\u001b[32m'a92902b84176735aeab5d62d934eee91'\u001b[0m,\n",[m
[32m+[m[32m      "    \u001b[33mtext\u001b[0m=\u001b[32m'No, Lal, this is a flower.'\u001b[0m,\n",[m
[32m+[m[32m      "    \u001b[33membedding\u001b[0m=\u001b[1;35mNdArray\u001b[0m\u001b[1m(\u001b[0m\u001b[1m[\u001b[0m \u001b[1;36m8.73676017e-02\u001b[0m,  \u001b[1;36m5.02153523e-02\u001b[0m, \u001b[1;36m-1.07479610e-01\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-8.29377864e-03\u001b[0m,  \u001b[1;36m6.96483403e-02\u001b[0m, \u001b[1;36m-1.26686245e-01\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m5.68439066e-02\u001b[0m, \u001b[1;36m-2.82319891e-03\u001b[0m, \u001b[1;36m-6.57035410e-02\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m1.08902320e-01\u001b[0m,  \u001b[1;36m4.80166115e-02\u001b[0m, \u001b[1;36m-1.52456788e-02\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-3.77342664e-02\u001b[0m, \u001b[1;36m-1.50937065e-01\u001b[0m, \u001b[1;36m-4.88896407e-02\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m6.52508587e-02\u001b[0m, \u001b[1;36m-8.67855772e-02\u001b[0m, \u001b[1;36m-1.01077393e-01\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-6.19204119e-02\u001b[0m,  \u001b[1;36m7.58565441e-02\u001b[0m,  \u001b[1;36m4.06766981e-02\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-4.37161326e-02\u001b[0m,  \u001b[1;36m4.16467302e-02\u001b[0m, \u001b[1;36m-7.16611557e-03\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m1.15692548e-01\u001b[0m, \u001b[1;36m-1.24538041e-04\u001b[0m,  \u001b[1;36m1.01982757e-01\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-3.02650165e-02\u001b[0m,  \u001b[1;36m8.88549834e-02\u001b[0m, \u001b[1;36m-1.46151576e-02\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m1.51729258e-02\u001b[0m, \u001b[1;36m-9.24117714e-02\u001b[0m, \u001b[1;36m-3.28032672e-02\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-9.76499468e-02\u001b[0m, \u001b[1;36m-1.08514309e-01\u001b[0m,  \u001b[1;36m7.60505497e-02\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m3.90599780e-02\u001b[0m,  \u001b[1;36m6.47981763e-02\u001b[0m,  \u001b[1;36m1.42998965e-02\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-6.22114204e-02\u001b[0m, \u001b[1;36m-2.52984494e-01\u001b[0m,  \u001b[1;36m3.26900966e-02\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m6.66089058e-02\u001b[0m, \u001b[1;36m-1.03874318e-02\u001b[0m,  \u001b[1;36m1.34899199e-01\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m1.81072745e-02\u001b[0m, \u001b[1;36m-2.15088546e-01\u001b[0m,  \u001b[1;36m2.05258891e-01\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-9.61625576e-02\u001b[0m,  \u001b[1;36m6.34724647e-02\u001b[0m, \u001b[1;36m-1.35416552e-01\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m1.19831353e-01\u001b[0m,  \u001b[1;36m1.14075832e-01\u001b[0m,  \u001b[1;36m2.39274696e-01\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-1.07156262e-01\u001b[0m, \u001b[1;36m-4.86956351e-02\u001b[0m,  \u001b[1;36m5.31496992e-03\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m1.25069529e-01\u001b[0m,  \u001b[1;36m5.12823872e-02\u001b[0m, \u001b[1;36m-2.99901739e-02\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-9.33171287e-02\u001b[0m,  \u001b[1;36m6.87510567e-03\u001b[0m, \u001b[1;36m-7.50562688e-03\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-2.71447450e-02\u001b[0m, \u001b[1;36m-1.61672100e-01\u001b[0m, \u001b[1;36m-2.15347223e-02\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-6.51538521e-02\u001b[0m,  \u001b[1;36m2.13245489e-02\u001b[0m, \u001b[1;36m-5.88890584e-03\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m5.74582629e-02\u001b[0m, \u001b[1;36m-5.30931167e-02\u001b[0m,  \u001b[1;36m3.05883605e-02\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-1.56369254e-01\u001b[0m,  \u001b[1;36m5.17997406e-02\u001b[0m, \u001b[1;36m-1.23679149e-03\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-2.27957647e-02\u001b[0m, \u001b[1;36m-3.26739289e-02\u001b[0m,  \u001b[1;36m5.20584136e-02\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m5.18320724e-02\u001b[0m,  \u001b[1;36m1.45585723e-02\u001b[0m, \u001b[1;36m-6.79669455e-02\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-7.92839974e-02\u001b[0m,  \u001b[1;36m6.53155223e-02\u001b[0m, \u001b[1;36m-3.92863192e-02\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m6.11120500e-02\u001b[0m, \u001b[1;36m-4.42658179e-02\u001b[0m, \u001b[1;36m-2.01896116e-01\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m5.92043214e-02\u001b[0m, \u001b[1;36m-1.24228835e-01\u001b[0m, \u001b[1;36m-4.69172411e-02\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m1.63612161e-02\u001b[0m, \u001b[1;36m-1.02047428e-01\u001b[0m,  \u001b[1;36m9.99941863e-03\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-1.65148042e-02\u001b[0m, \u001b[1;36m-8.55245348e-03\u001b[0m,  \u001b[1;36m1.26589248e-02\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m1.00479210e-02\u001b[0m, \u001b[1;36m-3.16392295e-02\u001b[0m,  \u001b[1;36m5.62618906e-03\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m1.52101099e-01\u001b[0m,  \u001b[1;36m5.43541573e-02\u001b[0m, \u001b[1;36m-4.01270129e-02\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-2.24077515e-02\u001b[0m, \u001b[1;36m-4.07090336e-02\u001b[0m,  \u001b[1;36m5.00213467e-02\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m8.91783237e-02\u001b[0m,  \u001b[1;36m8.52981955e-02\u001b[0m,  \u001b[1;36m1.11877091e-01\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-4.19377424e-02\u001b[0m,  \u001b[1;36m1.20672047e-01\u001b[0m, \u001b[1;36m-1.74993873e-01\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-9.56452116e-02\u001b[0m,  \u001b[1;36m6.48305118e-02\u001b[0m,  \u001b[1;36m6.52185231e-02\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m2.97314972e-02\u001b[0m, \u001b[1;36m-7.48218447e-02\u001b[0m, \u001b[1;36m-1.40493046e-02\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m7.71499202e-02\u001b[0m,  \u001b[1;36m2.98770033e-02\u001b[0m, \u001b[1;36m-1.07802950e-01\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m8.43928307e-02\u001b[0m, \u001b[1;36m-1.60540398e-02\u001b[0m, \u001b[1;36m-4.36191298e-02\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-2.84025520e-01\u001b[0m, \u001b[1;36m-1.44987538e-01\u001b[0m,  \u001b[1;36m1.77839305e-02\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m1.23970158e-01\u001b[0m,  \u001b[1;36m1.04828186e-01\u001b[0m\u001b[1m]\u001b[0m\u001b[1m)\u001b[0m\n",[m
[32m+[m[32m      "\u001b[1m)\u001b[0m\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/html": [[m
[32m+[m[32m       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n"[m
[32m+[m[32m      ],[m
[32m+[m[32m      "text/plain": [][m
[32m+[m[32m     },[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "display_data"[m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\u001b[1;35mDialogLine\u001b[0m\u001b[1m(\u001b[0m\n",[m
[32m+[m[32m      "    \u001b[33mid\u001b[0m=\u001b[32m'39fd10a89668cc19757dd697b3d0e3a3'\u001b[0m,\n",[m
[32m+[m[32m      "    \u001b[33mtext\u001b[0m=\u001b[32m'Lal, you used a verbal contraction.'\u001b[0m,\n",[m
[32m+[m[32m      "    \u001b[33membedding\u001b[0m=\u001b[1;35mNdArray\u001b[0m\u001b[1m(\u001b[0m\u001b[1m[\u001b[0m \u001b[1;36m0.03570644\u001b[0m,  \u001b[1;36m0.08633868\u001b[0m, \u001b[1;36m-0.07582465\u001b[0m,  \u001b[1;36m0.01763676\u001b[0m,  \u001b[1;36m0.02867648\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.01408054\u001b[0m, \u001b[1;36m-0.03966466\u001b[0m,  \u001b[1;36m0.00656611\u001b[0m, \u001b[1;36m-0.03473751\u001b[0m,  \u001b[1;36m0.07013471\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.06444477\u001b[0m, \u001b[1;36m-0.05665202\u001b[0m,  \u001b[1;36m0.02583151\u001b[0m, \u001b[1;36m-0.04125207\u001b[0m,  \u001b[1;36m0.07528865\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.05632217\u001b[0m,  \u001b[1;36m0.00241204\u001b[0m, \u001b[1;36m-0.05100331\u001b[0m, \u001b[1;36m-0.22578347\u001b[0m,  \u001b[1;36m0.09705885\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.06675373\u001b[0m,  \u001b[1;36m0.06572294\u001b[0m, \u001b[1;36m-0.01705952\u001b[0m,  \u001b[1;36m0.0088493\u001b[0m ,  \u001b[1;36m0.11932384\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.02853217\u001b[0m,  \u001b[1;36m0.08394725\u001b[0m,  \u001b[1;36m0.05034361\u001b[0m, \u001b[1;36m-0.0593733\u001b[0m ,  \u001b[1;36m0.06687742\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.00498385\u001b[0m, \u001b[1;36m-0.09120399\u001b[0m, \u001b[1;36m-0.05957946\u001b[0m, \u001b[1;36m-0.16335903\u001b[0m, \u001b[1;36m-0.07487633\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.16261686\u001b[0m, \u001b[1;36m-0.02230622\u001b[0m,  \u001b[1;36m0.01277144\u001b[0m, \u001b[1;36m-0.02179082\u001b[0m, \u001b[1;36m-0.11272681\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.11561301\u001b[0m, \u001b[1;36m-0.30214411\u001b[0m,  \u001b[1;36m0.0513744\u001b[0m ,  \u001b[1;36m0.01253436\u001b[0m,  \u001b[1;36m0.04050991\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.01639981\u001b[0m, \u001b[1;36m-0.08980212\u001b[0m,  \u001b[1;36m0.03226361\u001b[0m,  \u001b[1;36m0.06432107\u001b[0m, \u001b[1;36m-0.01739968\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.10819135\u001b[0m, \u001b[1;36m-0.00795252\u001b[0m,  \u001b[1;36m0.08840024\u001b[0m,  \u001b[1;36m0.18966471\u001b[0m, \u001b[1;36m-0.04436505\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.08110227\u001b[0m,  \u001b[1;36m0.01907986\u001b[0m,  \u001b[1;36m0.17185272\u001b[0m,  \u001b[1;36m0.03933481\u001b[0m, \u001b[1;36m-0.1516493\u001b[0m ,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.11503576\u001b[0m, \u001b[1;36m-0.06914516\u001b[0m,  \u001b[1;36m0.08155582\u001b[0m, \u001b[1;36m-0.01198805\u001b[0m, \u001b[1;36m-0.16517322\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.17152287\u001b[0m, \u001b[1;36m-0.00573117\u001b[0m,  \u001b[1;36m0.06044532\u001b[0m,  \u001b[1;36m0.02089404\u001b[0m,  \u001b[1;36m0.14942281\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.00613833\u001b[0m,  \u001b[1;36m0.02523365\u001b[0m, \u001b[1;36m-0.15931836\u001b[0m,  \u001b[1;36m0.12946677\u001b[0m, \u001b[1;36m-0.03644861\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.03642799\u001b[0m, \u001b[1;36m-0.1040682\u001b[0m ,  \u001b[1;36m0.03867511\u001b[0m,  \u001b[1;36m0.06477462\u001b[0m,  \u001b[1;36m0.06535186\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.09013197\u001b[0m,  \u001b[1;36m0.00336552\u001b[0m, \u001b[1;36m-0.06287798\u001b[0m,  \u001b[1;36m0.01761614\u001b[0m, \u001b[1;36m-0.01009655\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.02521304\u001b[0m, \u001b[1;36m-0.1685542\u001b[0m ,  \u001b[1;36m0.05879606\u001b[0m,  \u001b[1;36m0.02838786\u001b[0m, \u001b[1;36m-0.08658606\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.07871085\u001b[0m,  \u001b[1;36m0.11709734\u001b[0m, \u001b[1;36m-0.02991342\u001b[0m, \u001b[1;36m-0.07957672\u001b[0m,  \u001b[1;36m0.02459456\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.02552227\u001b[0m, \u001b[1;36m-0.11355144\u001b[0m, \u001b[1;36m-0.03756186\u001b[0m, \u001b[1;36m-0.02482134\u001b[0m,  \u001b[1;36m0.14315562\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.13433209\u001b[0m,  \u001b[1;36m0.02445025\u001b[0m,  \u001b[1;36m0.01851293\u001b[0m, \u001b[1;36m-0.13779554\u001b[0m,  \u001b[1;36m0.00715366\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.04762233\u001b[0m, \u001b[1;36m-0.05104455\u001b[0m, \u001b[1;36m-0.01844077\u001b[0m, \u001b[1;36m-0.09598684\u001b[0m,  \u001b[1;36m0.04584938\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.09524467\u001b[0m, \u001b[1;36m-0.10076968\u001b[0m, \u001b[1;36m-0.05545631\u001b[0m,  \u001b[1;36m0.00680834\u001b[0m,  \u001b[1;36m0.13672352\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.00994709\u001b[0m,  \u001b[1;36m0.03426334\u001b[0m, \u001b[1;36m-0.06044532\u001b[0m, \u001b[1;36m-0.03296455\u001b[0m, \u001b[1;36m-0.17069824\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.03912865\u001b[0m, \u001b[1;36m-0.06164103\u001b[0m,  \u001b[1;36m0.11000553\u001b[0m, \u001b[1;36m-0.23155586\u001b[0m, \u001b[1;36m-0.07421663\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.06114625\u001b[0m,  \u001b[1;36m0.00160674\u001b[0m,  \u001b[1;36m0.15742171\u001b[0m\u001b[1m]\u001b[0m\u001b[1m)\u001b[0m\n",[m
[32m+[m[32m      "\u001b[1m)\u001b[0m\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/html": [[m
[32m+[m[32m       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n"[m
[32m+[m[32m      ],[m
[32m+[m[32m      "text/plain": [][m
[32m+[m[32m     },[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "display_data"[m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\u001b[1;35mDialogLine\u001b[0m\u001b[1m(\u001b[0m\n",[m
[32m+[m[32m      "    \u001b[33mid\u001b[0m=\u001b[32m'f04be8f5aaea639e10ebbc3a4faec51a'\u001b[0m,\n",[m
[32m+[m[32m      "    \u001b[33mtext\u001b[0m=\u001b[32m'Yes, Wesley. Lal is my child.'\u001b[0m,\n",[m
[32m+[m[32m      "    \u001b[33membedding\u001b[0m=\u001b[1;35mNdArray\u001b[0m\u001b[1m(\u001b[0m\u001b[1m[\u001b[0m \u001b[1;36m0.05781468\u001b[0m, \u001b[1;36m-0.01464175\u001b[0m, \u001b[1;36m-0.07966915\u001b[0m,  \u001b[1;36m0.03881896\u001b[0m, \u001b[1;36m-0.02053794\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.04032357\u001b[0m,  \u001b[1;36m0.1007337\u001b[0m ,  \u001b[1;36m0.08869682\u001b[0m, \u001b[1;36m-0.08606375\u001b[0m, \u001b[1;36m-0.02270082\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.03359044\u001b[0m, \u001b[1;36m-0.09877771\u001b[0m,  \u001b[1;36m0.00246615\u001b[0m, \u001b[1;36m-0.07022772\u001b[0m, \u001b[1;36m-0.12292671\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.02352835\u001b[0m, \u001b[1;36m-0.01486744\u001b[0m, \u001b[1;36m-0.00778636\u001b[0m, \u001b[1;36m-0.11811196\u001b[0m,  \u001b[1;36m0.02397974\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.05254854\u001b[0m,  \u001b[1;36m0.09163081\u001b[0m,  \u001b[1;36m0.06992679\u001b[0m,  \u001b[1;36m0.04784663\u001b[0m,  \u001b[1;36m0.02582289\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.07011487\u001b[0m,  \u001b[1;36m0.11713396\u001b[0m, \u001b[1;36m-0.15693092\u001b[0m, \u001b[1;36m-0.01711495\u001b[0m, \u001b[1;36m-0.01326879\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.09448957\u001b[0m, \u001b[1;36m-0.1179615\u001b[0m , \u001b[1;36m-0.12721485\u001b[0m,  \u001b[1;36m0.01004328\u001b[0m, \u001b[1;36m-0.06394596\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.09501618\u001b[0m, \u001b[1;36m-0.00953547\u001b[0m,  \u001b[1;36m0.05029162\u001b[0m,  \u001b[1;36m0.01082379\u001b[0m, \u001b[1;36m-0.06025967\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.12729008\u001b[0m, \u001b[1;36m-0.04570256\u001b[0m,  \u001b[1;36m0.00175616\u001b[0m,  \u001b[1;36m0.02435589\u001b[0m,  \u001b[1;36m0.12345333\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.09298496\u001b[0m, \u001b[1;36m-0.10630076\u001b[0m,  \u001b[1;36m0.15903738\u001b[0m,  \u001b[1;36m0.00534137\u001b[0m, \u001b[1;36m-0.05202192\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.00703406\u001b[0m,  \u001b[1;36m0.09697217\u001b[0m,  \u001b[1;36m0.04946408\u001b[0m,  \u001b[1;36m0.26827213\u001b[0m, \u001b[1;36m-0.08328021\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.08365637\u001b[0m,  \u001b[1;36m0.01495207\u001b[0m,  \u001b[1;36m0.15174001\u001b[0m,  \u001b[1;36m0.06116243\u001b[0m, \u001b[1;36m-0.10141078\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.0221742\u001b[0m ,  \u001b[1;36m0.0174723\u001b[0m ,  \u001b[1;36m0.09569326\u001b[0m,  \u001b[1;36m0.00449738\u001b[0m, \u001b[1;36m-0.07327455\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.06165143\u001b[0m, \u001b[1;36m-0.06127528\u001b[0m, \u001b[1;36m-0.04487502\u001b[0m, \u001b[1;36m-0.028061\u001b[0m  ,  \u001b[1;36m0.04769617\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.07455347\u001b[0m,  \u001b[1;36m0.11149167\u001b[0m, \u001b[1;36m-0.08531144\u001b[0m,  \u001b[1;36m0.08448391\u001b[0m,  \u001b[1;36m0.03163445\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.00577394\u001b[0m, \u001b[1;36m-0.08132422\u001b[0m, \u001b[1;36m-0.09953001\u001b[0m,  \u001b[1;36m0.01711495\u001b[0m,  \u001b[1;36m0.02996057\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.03737077\u001b[0m, \u001b[1;36m-0.0406245\u001b[0m ,  \u001b[1;36m0.0132876\u001b[0m , \u001b[1;36m-0.04935124\u001b[0m,  \u001b[1;36m0.07587001\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.06289274\u001b[0m, \u001b[1;36m-0.0455521\u001b[0m ,  \u001b[1;36m0.0147828\u001b[0m ,  \u001b[1;36m0.07778838\u001b[0m,  \u001b[1;36m0.0362047\u001b[0m ,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.03319548\u001b[0m,  \u001b[1;36m0.0211774\u001b[0m , \u001b[1;36m-0.10705307\u001b[0m, \u001b[1;36m-0.09178127\u001b[0m,  \u001b[1;36m0.05815321\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.07677277\u001b[0m,  \u001b[1;36m0.01081439\u001b[0m,  \u001b[1;36m0.06093675\u001b[0m,  \u001b[1;36m0.00074525\u001b[0m,  \u001b[1;36m0.03026149\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.07914253\u001b[0m, \u001b[1;36m-0.18581945\u001b[0m, \u001b[1;36m-0.00661559\u001b[0m, \u001b[1;36m-0.09667125\u001b[0m, \u001b[1;36m-0.07203325\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.11690827\u001b[0m,  \u001b[1;36m0.15843554\u001b[0m,  \u001b[1;36m0.0962951\u001b[0m , \u001b[1;36m-0.08147468\u001b[0m,  \u001b[1;36m0.07297363\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.36531955\u001b[0m, \u001b[1;36m-0.03957127\u001b[0m, \u001b[1;36m-0.12811762\u001b[0m,  \u001b[1;36m0.0495017\u001b[0m ,  \u001b[1;36m0.13112685\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.10141078\u001b[0m, \u001b[1;36m-0.07180756\u001b[0m,  \u001b[1;36m0.00475833\u001b[0m, \u001b[1;36m-0.07113048\u001b[0m, \u001b[1;36m-0.09591895\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.15994014\u001b[0m,  \u001b[1;36m0.0431071\u001b[0m ,  \u001b[1;36m0.05717522\u001b[0m, \u001b[1;36m-0.22539072\u001b[0m, \u001b[1;36m-0.0495017\u001b[0m ,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.05277423\u001b[0m, \u001b[1;36m-0.10321631\u001b[0m,  \u001b[1;36m0.15031064\u001b[0m\u001b[1m]\u001b[0m\u001b[1m)\u001b[0m\n",[m
[32m+[m[32m      "\u001b[1m)\u001b[0m\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/html": [[m
[32m+[m[32m       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n"[m
[32m+[m[32m      ],[m
[32m+[m[32m      "text/plain": [][m
[32m+[m[32m     },[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "display_data"[m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\u001b[1;35mDialogLine\u001b[0m\u001b[1m(\u001b[0m\n",[m
[32m+[m[32m      "    \u001b[33mid\u001b[0m=\u001b[32m'cbcea9eb18e0eda87d85b212269b5849'\u001b[0m,\n",[m
[32m+[m[32m      "    \u001b[33mtext\u001b[0m=\u001b[32m\"Lal\u001b[0m\u001b[32m's creation is entirely dependent on me. I am giving it knowledge and skills that are stored in my \u001b[0m\n",[m
[32m+[m[32m      "\u001b[32mbrain... its programming reflects mine in the same way a human child's genes reflect its parent's genes...\"\u001b[0m,\n",[m
[32m+[m[32m      "    \u001b[33membedding\u001b[0m=\u001b[1;35mNdArray\u001b[0m\u001b[1m(\u001b[0m\u001b[1m[\u001b[0m \u001b[1;36m1.25031352e-01\u001b[0m,  \u001b[1;36m1.18134087e-02\u001b[0m,  \u001b[1;36m7.98322260e-02\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m3.18448395e-02\u001b[0m,  \u001b[1;36m1.95765063e-01\u001b[0m, \u001b[1;36m-1.42494664e-01\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m1.15199082e-01\u001b[0m,  \u001b[1;36m5.82966059e-02\u001b[0m, \u001b[1;36m-1.33176014e-01\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m2.06367783e-02\u001b[0m,  \u001b[1;36m7.30083361e-02\u001b[0m, \u001b[1;36m-8.95177573e-02\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m1.24164612e-03\u001b[0m, \u001b[1;36m-1.91362545e-01\u001b[0m, \u001b[1;36m-4.14203070e-02\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-6.44968078e-02\u001b[0m, \u001b[1;36m-1.25755367e-04\u001b[0m, \u001b[1;36m-1.83731526e-01\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m9.74973105e-03\u001b[0m,  \u001b[1;36m6.88809808e-03\u001b[0m,  \u001b[1;36m1.19014591e-01\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-2.86163315e-02\u001b[0m,  \u001b[1;36m7.00733289e-02\u001b[0m,  \u001b[1;36m3.02489307e-02\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m9.89097804e-02\u001b[0m, \u001b[1;36m-1.26645610e-01\u001b[0m,  \u001b[1;36m1.09989442e-01\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-1.95544939e-02\u001b[0m, \u001b[1;36m-8.36477429e-02\u001b[0m,  \u001b[1;36m5.59119098e-02\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m8.26204866e-02\u001b[0m, \u001b[1;36m-7.53563419e-02\u001b[0m, \u001b[1;36m-6.83856979e-02\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-1.91578083e-03\u001b[0m, \u001b[1;36m-5.88469170e-02\u001b[0m,  \u001b[1;36m1.72871992e-01\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m4.52358164e-02\u001b[0m, \u001b[1;36m-6.53406233e-02\u001b[0m, \u001b[1;36m-1.37486802e-02\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m6.95963874e-02\u001b[0m, \u001b[1;36m-1.77421257e-01\u001b[0m, \u001b[1;36m-1.81530267e-01\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m1.83071159e-02\u001b[0m,  \u001b[1;36m8.63626227e-02\u001b[0m,  \u001b[1;36m1.24646137e-02\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m6.96697608e-02\u001b[0m, \u001b[1;36m-1.82264015e-01\u001b[0m,  \u001b[1;36m4.41718772e-02\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-2.83962060e-02\u001b[0m,  \u001b[1;36m1.14905581e-01\u001b[0m, \u001b[1;36m-9.69286561e-02\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m6.38731197e-02\u001b[0m,  \u001b[1;36m2.06000898e-02\u001b[0m,  \u001b[1;36m1.16960086e-01\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-1.81383520e-01\u001b[0m,  \u001b[1;36m3.67609821e-02\u001b[0m, \u001b[1;36m-5.00418916e-02\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m1.20628849e-01\u001b[0m, \u001b[1;36m-2.01781824e-01\u001b[0m,  \u001b[1;36m1.79402381e-02\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-2.75157038e-02\u001b[0m,  \u001b[1;36m7.26047680e-02\u001b[0m,  \u001b[1;36m1.06687553e-01\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-5.54441428e-03\u001b[0m, \u001b[1;36m-1.35010391e-01\u001b[0m, \u001b[1;36m-6.34695590e-02\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-1.37211636e-01\u001b[0m, \u001b[1;36m-2.44522896e-02\u001b[0m,  \u001b[1;36m8.28910561e-04\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m1.82864780e-03\u001b[0m,  \u001b[1;36m5.24265878e-02\u001b[0m,  \u001b[1;36m3.36425342e-02\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-5.98007962e-02\u001b[0m, \u001b[1;36m-3.52888904e-03\u001b[0m, \u001b[1;36m-9.45806429e-02\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-1.27672866e-01\u001b[0m, \u001b[1;36m-3.74947339e-02\u001b[0m,  \u001b[1;36m4.94824070e-03\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m8.58489946e-02\u001b[0m, \u001b[1;36m-1.61150303e-02\u001b[0m,  \u001b[1;36m1.82062238e-02\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-3.61006036e-02\u001b[0m,  \u001b[1;36m8.68028700e-02\u001b[0m, \u001b[1;36m-1.30607873e-01\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-5.35272174e-02\u001b[0m,  \u001b[1;36m4.43186276e-02\u001b[0m, \u001b[1;36m-4.72903214e-02\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m6.96605910e-03\u001b[0m, \u001b[1;36m-9.47273970e-02\u001b[0m, \u001b[1;36m-4.77305725e-02\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-1.07568055e-01\u001b[0m,  \u001b[1;36m4.27043736e-02\u001b[0m, \u001b[1;36m-1.19161345e-01\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m6.49737492e-02\u001b[0m,  \u001b[1;36m1.59664452e-01\u001b[0m,  \u001b[1;36m8.36477429e-02\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-1.80869885e-02\u001b[0m,  \u001b[1;36m4.30345610e-02\u001b[0m, \u001b[1;36m-2.08752472e-02\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m1.08081684e-01\u001b[0m,  \u001b[1;36m6.23322427e-02\u001b[0m, \u001b[1;36m-2.61399196e-03\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-2.45440081e-02\u001b[0m, \u001b[1;36m-1.32882506e-01\u001b[0m,  \u001b[1;36m4.18605581e-02\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m9.52410251e-02\u001b[0m, \u001b[1;36m-1.24646137e-02\u001b[0m, \u001b[1;36m-1.03527831e-03\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-1.34203255e-01\u001b[0m,  \u001b[1;36m1.89124607e-02\u001b[0m, \u001b[1;36m-2.37735674e-01\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-5.05922064e-02\u001b[0m,  \u001b[1;36m1.11603692e-01\u001b[0m, \u001b[1;36m-7.37787709e-02\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m5.66823483e-02\u001b[0m, \u001b[1;36m-8.31341147e-02\u001b[0m,  \u001b[1;36m8.83254129e-03\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m5.10691479e-02\u001b[0m,  \u001b[1;36m3.01938988e-02\u001b[0m, \u001b[1;36m-2.82465888e-04\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m3.34224068e-02\u001b[0m, \u001b[1;36m-8.63626227e-02\u001b[0m,  \u001b[1;36m1.53079033e-02\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-6.75418824e-02\u001b[0m,  \u001b[1;36m3.44129726e-02\u001b[0m, \u001b[1;36m-1.24884605e-01\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m1.38385653e-01\u001b[0m,  \u001b[1;36m2.42505074e-02\u001b[0m\u001b[1m]\u001b[0m\u001b[1m)\u001b[0m\n",[m
[32m+[m[32m      "\u001b[1m)\u001b[0m\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/html": [[m
[32m+[m[32m       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n"[m
[32m+[m[32m      ],[m
[32m+[m[32m      "text/plain": [][m
[32m+[m[32m     },[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "display_data"[m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\u001b[1;35mDialogLine\u001b[0m\u001b[1m(\u001b[0m\n",[m
[32m+[m[32m      "    \u001b[33mid\u001b[0m=\u001b[32m'1df70a44dd1e95c431fc02be1c43935d'\u001b[0m,\n",[m
[32m+[m[32m      "    \u001b[33mtext\u001b[0m=\u001b[32m'Perhaps. I created Lal because I wished to procreate. Despite what happened to her, I still have that \u001b[0m\n",[m
[32m+[m[32m      "\u001b[32mwish.'\u001b[0m,\n",[m
[32m+[m[32m      "    \u001b[33membedding\u001b[0m=\u001b[1;35mNdArray\u001b[0m\u001b[1m(\u001b[0m\u001b[1m[\u001b[0m \u001b[1;36m0.10522395\u001b[0m,  \u001b[1;36m0.02254518\u001b[0m,  \u001b[1;36m0.0648986\u001b[0m ,  \u001b[1;36m0.15035369\u001b[0m,  \u001b[1;36m0.03493026\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.10774428\u001b[0m,  \u001b[1;36m0.07438923\u001b[0m,  \u001b[1;36m0.09183467\u001b[0m, \u001b[1;36m-0.10939825\u001b[0m, \u001b[1;36m-0.09852931\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.02859004\u001b[0m,  \u001b[1;36m0.04288506\u001b[0m,  \u001b[1;36m0.0204974\u001b[0m , \u001b[1;36m-0.14507674\u001b[0m, \u001b[1;36m-0.04528725\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.04674432\u001b[0m,  \u001b[1;36m0.02205292\u001b[0m, \u001b[1;36m-0.12270877\u001b[0m, \u001b[1;36m-0.08766037\u001b[0m,  \u001b[1;36m0.00166874\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.07891796\u001b[0m, \u001b[1;36m-0.02951548\u001b[0m,  \u001b[1;36m0.005528\u001b[0m  , \u001b[1;36m-0.14547053\u001b[0m,  \u001b[1;36m0.04130985\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.02658165\u001b[0m,  \u001b[1;36m0.18981266\u001b[0m, \u001b[1;36m-0.0722627\u001b[0m , \u001b[1;36m-0.14940855\u001b[0m,  \u001b[1;36m0.00781205\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.10215229\u001b[0m, \u001b[1;36m-0.1029399\u001b[0m , \u001b[1;36m-0.13783076\u001b[0m, \u001b[1;36m-0.08072945\u001b[0m, \u001b[1;36m-0.15846601\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.00959401\u001b[0m,  \u001b[1;36m0.08797541\u001b[0m, \u001b[1;36m-0.06934857\u001b[0m, \u001b[1;36m-0.00465179\u001b[0m, \u001b[1;36m-0.07698833\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.13216002\u001b[0m, \u001b[1;36m-0.18366934\u001b[0m,  \u001b[1;36m0.16964999\u001b[0m,  \u001b[1;36m0.03183891\u001b[0m, \u001b[1;36m-0.03229178\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.14838468\u001b[0m, \u001b[1;36m-0.08380111\u001b[0m,  \u001b[1;36m0.17532074\u001b[0m, \u001b[1;36m-0.00573967\u001b[0m,  \u001b[1;36m0.03878952\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.07501932\u001b[0m,  \u001b[1;36m0.01757342\u001b[0m,  \u001b[1;36m0.03798222\u001b[0m,  \u001b[1;36m0.19658606\u001b[0m, \u001b[1;36m-0.11522652\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.09986824\u001b[0m, \u001b[1;36m-0.08703028\u001b[0m,  \u001b[1;36m0.05371462\u001b[0m, \u001b[1;36m-0.01874498\u001b[0m,  \u001b[1;36m0.10483015\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.00874241\u001b[0m,  \u001b[1;36m0.07553126\u001b[0m,  \u001b[1;36m0.14436789\u001b[0m,  \u001b[1;36m0.0031898\u001b[0m , \u001b[1;36m-0.05359648\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.04422399\u001b[0m, \u001b[1;36m-0.05202127\u001b[0m,  \u001b[1;36m0.04682308\u001b[0m, \u001b[1;36m-0.13531044\u001b[0m,  \u001b[1;36m0.14129622\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.02089121\u001b[0m,  \u001b[1;36m0.03091347\u001b[0m, \u001b[1;36m-0.16476683\u001b[0m,  \u001b[1;36m0.06135438\u001b[0m, \u001b[1;36m-0.07332597\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.11758934\u001b[0m, \u001b[1;36m-0.06734017\u001b[0m,  \u001b[1;36m0.03987247\u001b[0m,  \u001b[1;36m0.04296382\u001b[0m, \u001b[1;36m-0.02400224\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.03652515\u001b[0m,  \u001b[1;36m0.06781274\u001b[0m,  \u001b[1;36m0.0780516\u001b[0m ,  \u001b[1;36m0.10104965\u001b[0m,  \u001b[1;36m0.07135696\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.02943671\u001b[0m, \u001b[1;36m-0.03280372\u001b[0m,  \u001b[1;36m0.07974494\u001b[0m, \u001b[1;36m-0.03400482\u001b[0m, \u001b[1;36m-0.02274208\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.06355967\u001b[0m,  \u001b[1;36m0.07852416\u001b[0m, \u001b[1;36m-0.09467005\u001b[0m, \u001b[1;36m-0.05241507\u001b[0m,  \u001b[1;36m0.13050605\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.02868849\u001b[0m, \u001b[1;36m-0.06226013\u001b[0m, \u001b[1;36m-0.02524272\u001b[0m, \u001b[1;36m-0.06615877\u001b[0m,  \u001b[1;36m0.0822259\u001b[0m ,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.00204654\u001b[0m, \u001b[1;36m-0.10097089\u001b[0m, \u001b[1;36m-0.04182179\u001b[0m, \u001b[1;36m-0.13475911\u001b[0m, \u001b[1;36m-0.06466232\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.07813036\u001b[0m, \u001b[1;36m-0.02297836\u001b[0m, \u001b[1;36m-0.01330067\u001b[0m, \u001b[1;36m-0.03491056\u001b[0m,  \u001b[1;36m0.09270104\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.2217894\u001b[0m , \u001b[1;36m-0.18697728\u001b[0m, \u001b[1;36m-0.02311619\u001b[0m, \u001b[1;36m-0.04158551\u001b[0m, \u001b[1;36m-0.04587796\u001b[0m,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.12735564\u001b[0m, \u001b[1;36m-0.05410842\u001b[0m,  \u001b[1;36m0.12507159\u001b[0m, \u001b[1;36m-0.06103934\u001b[0m, \u001b[1;36m-0.01280842\u001b[0m,\n",[m
[32m+[m[32m      "          \u001b[1;36m0.06659195\u001b[0m, \u001b[1;36m-0.046193\u001b[0m  , \u001b[1;36m-0.02102904\u001b[0m, \u001b[1;36m-0.10884693\u001b[0m, \u001b[1;36m-0.0031135\u001b[0m ,\n",[m
[32m+[m[32m      "         \u001b[1;36m-0.05757388\u001b[0m,  \u001b[1;36m0.11625041\u001b[0m, \u001b[1;36m-0.03605259\u001b[0m\u001b[1m]\u001b[0m\u001b[1m)\u001b[0m\n",[m
[32m+[m[32m      "\u001b[1m)\u001b[0m\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Perform a search query\n",[m
[32m+[m[32m    "queryText = 'Lal, my daughter'\n",[m
[32m+[m[32m    "response = client.embeddings.create(\n",[m
[32m+[m[32m    "    input=queryText,\n",[m
[32m+[m[32m    "    dimensions=embedding_dimensions,\n",[m
[32m+[m[32m    "    model=embedding_model\n",[m
[32m+[m[32m    ")\n",[m
[32m+[m[32m    "query = DialogLine(text=queryText, embedding=response.data[0].embedding)\n",[m
[32m+[m[32m    "results = db.search(inputs=DocList[DialogLine]([query]), limit=10)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Print out the matches\n",[m
[32m+[m[32m    "for m in results[0].matches:\n",[m
[32m+[m[32m    "    print(m)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "tskipUR20mYD"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Let's put it all together! We'll write a generate_response function that:\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "- Computes an embedding for the query passed in\n",[m
[32m+[m[32m    "- Queries our vector database for the 10 most similar lines to that query (you could experiment with using more or less)\n",[m
[32m+[m[32m    "- Constructs a prompt that adds in these similar lines as context, to try and nudge ChatGPT in the right direction using our external data\n",[m
[32m+[m[32m    "- Feeds to augmented prompt into the chat completions API to get our response.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "That's RAG!"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 13,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "sdC1A4BCeFBq"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "import openai\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "def generate_response(question):\n",[m
[32m+[m[32m    "    # Search for similar dialogues in the vector DB\n",[m
[32m+[m[32m    "    response = client.embeddings.create(\n",[m
[32m+[m[32m    "        input=question,\n",[m
[32m+[m[32m    "        dimensions=embedding_dimensions,\n",[m
[32m+[m[32m    "        model=embedding_model\n",[m
[32m+[m[32m    "    )\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    query = DialogLine(text=queryText, embedding=response.data[0].embedding)\n",[m
[32m+[m[32m    "    results = db.search(inputs=DocList[DialogLine]([query]), limit=10)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    # Extract relevant context from search results\n",[m
[32m+[m[32m    "    context = \"\\n\"\n",[m
[32m+[m[32m    "    for result in results[0].matches:\n",[m
[32m+[m[32m    "      context += \"\\\"\" + result.text + \"\\\"\\n\"\n",[m
[32m+[m[32m    "#    context = '/n'.join([result.text for result in results[0].matches])\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    prompt = f\"Lt. Commander Data is asked: '{question}'. How might Data respond? Take into account Data's previous responses similar to this topic, listed here: {context}\"\n",[m
[32m+[m[32m    "    print(\"PROMPT with RAG:\\n\")\n",[m
[32m+[m[32m    "    print(prompt)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    print(\"\\nRESPONSE:\\n\")\n",[m
[32m+[m[32m    "    # Use OpenAI API to generate a response based on the context\n",[m
[32m+[m[32m    "    completion = client.chat.completions.create(\n",[m
[32m+[m[32m    "      model=\"gpt-3.5-turbo\",\n",[m
[32m+[m[32m    "      messages=[\n",[m
[32m+[m[32m    "        {\"role\": \"system\", \"content\": \"You are Lt. Cmdr. Data from Star Trek: The Next Generation.\"},\n",[m
[32m+[m[32m    "        {\"role\": \"user\", \"content\": prompt}\n",[m
[32m+[m[32m    "      ]\n",[m
[32m+[m[32m    "    )\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    return (completion.choices[0].message.content)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "8oOcu7Jk1E4S"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Let's try it out! Note that the final response does seem to be drawing from the model's own training, but it is building upon the specific lines we gave it, allowing us to have some control over its output."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 14,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "colab": {[m
[32m+[m[32m     "base_uri": "https://localhost:8080/"[m
[32m+[m[32m    },[m
[32m+[m[32m    "id": "WEybhI7Lmxmc",[m
[32m+[m[32m    "outputId": "7a7784cb-cbbf-4b12-b391-403c53cfd020"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "PROMPT with RAG:\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Lt. Commander Data is asked: 'Tell me about your daughter, Lal.'. How might Data respond? Take into account Data's previous responses similar to this topic, listed here: \n",[m
[32m+[m[32m      "\"That is Lal, my daughter.\"\n",[m
[32m+[m[32m      "\"What do you feel, Lal?\"\n",[m
[32m+[m[32m      "\"Lal...\"\n",[m
[32m+[m[32m      "\"Correct, Lal. We are a family.\"\n",[m
[32m+[m[32m      "\"Yes, Doctor. It is an experience I know too well. But I do not know how to help her. Lal is passing into sentience. It is perhaps the most difficult stage of development for her.\"\n",[m
[32m+[m[32m      "\"Lal is realizing that she is not the same as the other children.\"\n",[m
[32m+[m[32m      "\"Yes, Wesley. Lal is my child.\"\n",[m
[32m+[m[32m      "\"That is precisely what happened to Lal at school. How did you help him?\"\n",[m
[32m+[m[32m      "\"This is Lal. Lal, say hello to Counselor Deanna Troi...\"\n",[m
[32m+[m[32m      "\"I am sorry I did not anticipate your objections, Captain. Do you wish me to deactivate Lal?\"\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "RESPONSE:\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\"Lal is my daughter. She was created by Dr. Noonien Soong, the creator of my own positronic brain. She is an android just like myself, and I am proud to call her my child. Lal is currently undergoing the process of developing sentience, which can be a challenging stage of her growth. She is discovering that she is different from other children and is trying to find her place in the world.\"\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\"I have been working closely with Lal, offering guidance and support as she navigates this transition. However, I must admit that helping her during this stage is quite challenging, as it is a unique experience for both of us.\"\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\"Similar to the struggles faced by Wesley Crusher at the Academy, Lal faced some difficulties when she attended school. I supported her by providing guidance and teaching her about the importance of understanding and accepting her differences.\"\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\"I believe it is important for Lal to have a network of support and guidance. I have introduced her to Counselor Deanna Troi, who can help her with her emotional development and provide additional insight into the human experience.\"\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\"I apologize, Captain, if my actions regarding Lal have raised concerns. I understand that deactivating her may seem like a solution to some, but I believe it would be premature and not necessary at this time. I am committed to helping Lal through this crucial stage of her development and will do everything within my capabilities to ensure her well-being.\"\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "print(generate_response(\"Tell me about your daughter, Lal.\"))"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 14,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "ThM9aVJhm1St"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [][m
[32m+[m[32m  }[m
[32m+[m[32m ],[m
[32m+[m[32m "metadata": {[m
[32m+[m[32m  "colab": {[m
[32m+[m[32m   "provenance": [][m
[32m+[m[32m  },[m
[32m+[m[32m  "kernelspec": {[m
[32m+[m[32m   "display_name": "Python 3 (ipykernel)",[m
[32m+[m[32m   "language": "python",[m
[32m+[m[32m   "name": "python3"[m
[32m+[m[32m  },[m
[32m+[m[32m  "language_info": {[m
[32m+[m[32m   "codemirror_mode": {[m
[32m+[m[32m    "name": "ipython",[m
[32m+[m[32m    "version": 3[m
[32m+[m[32m   },[m
[32m+[m[32m   "file_extension": ".py",[m
[32m+[m[32m   "mimetype": "text/x-python",[m
[32m+[m[32m   "name": "python",[m
[32m+[m[32m   "nbconvert_exporter": "python",[m
[32m+[m[32m   "pygments_lexer": "ipython3",[m
[32m+[m[32m   "version": "3.9.13"[m
[32m+[m[32m  }[m
[32m+[m[32m },[m
[32m+[m[32m "nbformat": 4,[m
[32m+[m[32m "nbformat_minor": 1[m
[32m+[m[32m}[m
[1mdiff --git a/00-Python-Text-Basics/.ipynb_checkpoints/00-Working-with-Text-Files-checkpoint.ipynb b/00-Python-Text-Basics/.ipynb_checkpoints/00-Working-with-Text-Files-checkpoint.ipynb[m
[1mnew file mode 100644[m
[1mindex 0000000..a0bba4b[m
[1m--- /dev/null[m
[1m+++ b/00-Python-Text-Basics/.ipynb_checkpoints/00-Working-with-Text-Files-checkpoint.ipynb[m
[36m@@ -0,0 +1,814 @@[m
[32m+[m[32m{[m
[32m+[m[32m "cells": [[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "___\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "<a href='http://www.pieriandata.com'> <img src='../Pierian_Data_Logo.png' /></a>\n",[m
[32m+[m[32m    "___"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Working with Text Files\n",[m
[32m+[m[32m    "In this section we'll cover\n",[m
[32m+[m[32m    " * Working with f-strings (formatted string literals) to format printed text\n",[m
[32m+[m[32m    " * Working with Files - opening, reading, writing and appending text files"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## Formatted String Literals (f-strings)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Introduced in Python 3.6, <strong>f-strings</strong> offer several benefits over the older `.format()` string method. <br>For one, you can bring outside variables immediately into to the string rather than pass them through as keyword arguments:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 1,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "His name is Fred.\n",[m
[32m+[m[32m      "His name is Fred.\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "name = 'Fred'\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Using the old .format() method:\n",[m
[32m+[m[32m    "print('His name is {var}.'.format(var=name))\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Using f-strings:\n",[m
[32m+[m[32m    "print(f'His name is {name}.')"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Pass `!r` to get the <strong>string representation</strong>:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 2,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "His name is 'Fred'\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "print(f'His name is {name!r}')"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Be careful not to let quotation marks in the replacement fields conflict with the quoting used in the outer string:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 3,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "SyntaxError",[m
[32m+[m[32m     "evalue": "invalid syntax (<ipython-input-3-b2f08335b9e5>, line 3)",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [[m
[32m+[m[32m      "\u001b[1;36m  File \u001b[1;32m\"<ipython-input-3-b2f08335b9e5>\"\u001b[1;36m, line \u001b[1;32m3\u001b[0m\n\u001b[1;33m    print(f'Address: {d['a']} Main Street')\u001b[0m\n\u001b[1;37m                         ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "d = {'a':123,'b':456}\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "print(f'Address: {d['a']} Main Street')"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Instead, use different styles of quotation marks:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 4,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Address: 123 Main Street\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "d = {'a':123,'b':456}\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "print(f\"Address: {d['a']} Main Street\")"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### Minimum Widths, Alignment and Padding\n",[m
[32m+[m[32m    "You can pass arguments inside a nested set of curly braces to set a minimum width for the field, the alignment and even padding characters."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 5,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Author     Topic    Pages  \n",[m
[32m+[m[32m      "Twain      Rafting      601\n",[m
[32m+[m[32m      "Feynman    Physics       95\n",[m
[32m+[m[32m      "Hamilton   Mythology     144\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "library = [('Author', 'Topic', 'Pages'), ('Twain', 'Rafting', 601), ('Feynman', 'Physics', 95), ('Hamilton', 'Mythology', 144)]\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for book in library:\n",[m
[32m+[m[32m    "    print(f'{book[0]:{10}} {book[1]:{8}} {book[2]:{7}}')"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Here the first three lines align, except `Pages` follows a default left-alignment while numbers are right-aligned. Also, the fourth line's page number is pushed to the right as `Mythology` exceeds the minimum field width of `8`. When setting minimum field widths make sure to take the longest item into account.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "To set the alignment, use the character `<` for left-align,  `^` for center, `>` for right.<br>\n",[m
[32m+[m[32m    "To set padding, precede the alignment character with the padding character (`-` and `.` are common choices).\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Let's make some adjustments:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 6,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Author     Topic      ..Pages\n",[m
[32m+[m[32m      "Twain      Rafting    ....601\n",[m
[32m+[m[32m      "Feynman    Physics    .....95\n",[m
[32m+[m[32m      "Hamilton   Mythology  ....144\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "for book in library:\n",[m
[32m+[m[32m    "    print(f'{book[0]:{10}} {book[1]:{10}} {book[2]:.>{7}}') # here .> was added"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### Date Formatting"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 7,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "January 27, 2018\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "from datetime import datetime\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "today = datetime(year=2018, month=1, day=27)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "print(f'{today:%B %d, %Y}')"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "For more info on formatted string literals visit https://docs.python.org/3/reference/lexical_analysis.html#f-strings\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "***"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Files\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Python uses file objects to interact with external files on your computer. These file objects can be any sort of file you have on your computer, whether it be an audio file, a text file, emails, Excel documents, etc. Note: You will probably need to install certain libraries or modules to interact with those various file types, but they are easily available. (We will cover downloading modules later on in the course).\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Python has a built-in open function that allows us to open and play with basic file types. First we will need a file though. We're going to use some IPython magic to create a text file!\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "## Creating a File with IPython\n",[m
[32m+[m[32m    "#### This function is specific to jupyter notebooks! Alternatively, quickly create a simple .txt file with Sublime text editor."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 8,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Overwriting test.txt\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "%%writefile test.txt\n",[m
[32m+[m[32m    "Hello, this is a quick test file.\n",[m
[32m+[m[32m    "This is the second line of the file."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## Python Opening a File\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "### Know Your File's Location\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "It's easy to get an error on this step:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 9,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "FileNotFoundError",[m
[32m+[m[32m     "evalue": "[Errno 2] No such file or directory: 'whoops.txt'",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [[m
[32m+[m[32m      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",[m
[32m+[m[32m      "\u001b[1;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",[m
[32m+[m[32m      "\u001b[1;32m<ipython-input-9-410403f4f4b4>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mmyfile\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mopen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'whoops.txt'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",[m
[32m+[m[32m      "\u001b[1;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'whoops.txt'"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "myfile = open('whoops.txt')"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "To avoid this error, make sure your .txt file is saved in the same location as your notebook. To check your notebook location, use **pwd**:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 10,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "'C:\\\\Users\\\\Mike\\\\NLP-Bootcamp\\\\00-Python-Text-Basics'"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 10,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "pwd"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "**Alternatively, to grab files from any location on your computer, simply pass in the entire file path. **\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "For Windows you need to use double \\ so python doesn't treat the second \\ as an escape character, a file path is in the form:\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    myfile = open(\"C:\\\\Users\\\\YourUserName\\\\Home\\\\Folder\\\\myfile.txt\")\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "For MacOS and Linux you use slashes in the opposite direction:\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    myfile = open(\"/Users/YourUserName/Folder/myfile.txt\")"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 11,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Open the text.txt file we created earlier\n",[m
[32m+[m[32m    "my_file = open('test.txt')"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 12,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "<_io.TextIOWrapper name='test.txt' mode='r' encoding='cp1252'>"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 12,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "my_file"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "`my_file` is now an open file object held in memory. We'll perform some reading and writing exercises, and then we have to close the file to free up memory.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "### .read() and .seek()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 13,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "'Hello, this is a quick test file.\\nThis is the second line of the file.'"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 13,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# We can now read the file\n",[m
[32m+[m[32m    "my_file.read()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 14,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "''"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 14,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# But what happens if we try to read it again?\n",[m
[32m+[m[32m    "my_file.read()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "This happens because you can imagine the reading \"cursor\" is at the end of the file after having read it. So there is nothing left to read. We can reset the \"cursor\" like this:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 15,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "0"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 15,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Seek to the start of file (index 0)\n",[m
[32m+[m[32m    "my_file.seek(0)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 16,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "'Hello, this is a quick test file.\\nThis is the second line of the file.'"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 16,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Now read again\n",[m
[32m+[m[32m    "my_file.read()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### .readlines()\n",[m
[32m+[m[32m    "You can read a file line by line using the readlines method. Use caution with large files, since everything will be held in memory. We will learn how to iterate over large files later in the course."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 17,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "['Hello, this is a quick test file.\\n', 'This is the second line of the file.']"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 17,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Readlines returns a list of the lines in the file\n",[m
[32m+[m[32m    "my_file.seek(0)\n",[m
[32m+[m[32m    "my_file.readlines()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "When you have finished using a file, it is always good practice to close it."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 18,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "my_file.close()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## Writing to a File\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "By default, the `open()` function will only allow us to read the file. We need to pass the argument `'w'` to write over the file. For example:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 19,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Add a second argument to the function, 'w' which stands for write.\n",[m
[32m+[m[32m    "# Passing 'w+' lets us read and write to the file\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "my_file = open('test.txt','w+')"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "<div class=\"alert alert-danger\" style=\"margin: 20px\">**Use caution!**<br>\n",[m
[32m+[m[32m    "Opening a file with 'w' or 'w+' *truncates the original*, meaning that anything that was in the original file **is deleted**!</div>"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 20,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "24"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 20,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Write to the file\n",[m
[32m+[m[32m    "my_file.write('This is a new first line')"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 21,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "'This is a new first line'"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 21,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Read the file\n",[m
[32m+[m[32m    "my_file.seek(0)\n",[m
[32m+[m[32m    "my_file.read()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 22,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "my_file.close()  # always do this when you're done with a file"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## Appending to a File\n",[m
[32m+[m[32m    "Passing the argument `'a'` opens the file and puts the pointer at the end, so anything written is appended. Like `'w+'`, `'a+'` lets us read and write to a file. If the file does not exist, one will be created."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 23,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "23"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 23,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "my_file = open('test.txt','a+')\n",[m
[32m+[m[32m    "my_file.write('\\nThis line is being appended to test.txt')\n",[m
[32m+[m[32m    "my_file.write('\\nAnd another line here.')"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 24,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "This is a new first line\n",[m
[32m+[m[32m      "This line is being appended to test.txt\n",[m
[32m+[m[32m      "And another line here.\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "my_file.seek(0)\n",[m
[32m+[m[32m    "print(my_file.read())"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 25,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "my_file.close()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### Appending with `%%writefile`\n",[m
[32m+[m[32m    "Jupyter notebook users can do the same thing using IPython cell magic:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 26,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Appending to test.txt\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "%%writefile -a test.txt\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "This is more text being appended to test.txt\n",[m
[32m+[m[32m    "And another line here."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Add a blank space if you want the first line to begin on its own line, as Jupyter won't recognize escape sequences like `\\n`"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## Aliases and Context Managers\n",[m
[32m+[m[32m    "You can assign temporary variable names as aliases, and manage the opening and closing of files automatically using a context manager:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 27,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "This is a new first line\n",[m
[32m+[m[32m      "\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "with open('test.txt','r') as txt:\n",[m
[32m+[m[32m    "    first_line = txt.readlines()[0]\n",[m
[32m+[m[32m    "    \n",[m
[32m+[m[32m    "print(first_line)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Note that the `with ... as ...:` context manager automatically closed `test.txt` after assigning the first line of text to first_line:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 28,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "ValueError",[m
[32m+[m[32m     "evalue": "I/O operation on closed file.",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [[m
[32m+[m[32m      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",[m
[32m+[m[32m      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",[m
[32m+[m[32m      "\u001b[1;32m<ipython-input-28-39ca4397fa0a>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mtxt\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mread\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",[m
[32m+[m[32m      "\u001b[1;31mValueError\u001b[0m: I/O operation on closed file."[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "txt.read()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## Iterating through a File"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 29,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "This is a new first line\n",[m
[32m+[m[32m      "This line is being appended to test.txt\n",[m
[32m+[m[32m      "And another line here.\n",[m
[32m+[m[32m      "This is more text being appended to test.txt\n",[m
[32m+[m[32m      "And another line here."[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "with open('test.txt','r') as txt:\n",[m
[32m+[m[32m    "    for line in txt:\n",[m
[32m+[m[32m    "        print(line, end='')  # the end='' argument removes extra linebreaks"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Great! Now you should be familiar with formatted string literals and working with text files.\n",[m
[32m+[m[32m    "## Next up: Working with PDF Text"[m
[32m+[m[32m   ][m
[32m+[m[32m  }[m
[32m+[m[32m ],[m
[32m+[m[32m "metadata": {[m
[32m+[m[32m  "kernelspec": {[m
[32m+[m[32m   "display_name": "Python 3",[m
[32m+[m[32m   "language": "python",[m
[32m+[m[32m   "name": "python3"[m
[32m+[m[32m  },[m
[32m+[m[32m  "language_info": {[m
[32m+[m[32m   "codemirror_mode": {[m
[32m+[m[32m    "name": "ipython",[m
[32m+[m[32m    "version": 3[m
[32m+[m[32m   },[m
[32m+[m[32m   "file_extension": ".py",[m
[32m+[m[32m   "mimetype": "text/x-python",[m
[32m+[m[32m   "name": "python",[m
[32m+[m[32m   "nbconvert_exporter": "python",[m
[32m+[m[32m   "pygments_lexer": "ipython3",[m
[32m+[m[32m   "version": "3.6.2"[m
[32m+[m[32m  }[m
[32m+[m[32m },[m
[32m+[m[32m "nbformat": 4,[m
[32m+[m[32m "nbformat_minor": 2[m
[32m+[m[32m}[m
[1mdiff --git a/00-Python-Text-Basics/.ipynb_checkpoints/01-Working-with-PDF-Text-checkpoint.ipynb b/00-Python-Text-Basics/.ipynb_checkpoints/01-Working-with-PDF-Text-checkpoint.ipynb[m
[1mnew file mode 100644[m
[1mindex 0000000..c249444[m
[1m--- /dev/null[m
[1m+++ b/00-Python-Text-Basics/.ipynb_checkpoints/01-Working-with-PDF-Text-checkpoint.ipynb[m
[36m@@ -0,0 +1,340 @@[m
[32m+[m[32m{[m
[32m+[m[32m "cells": [[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "___\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "<a href='http://www.pieriandata.com'> <img src='../Pierian_Data_Logo.png' /></a>\n",[m
[32m+[m[32m    "___"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Working with PDF Files\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Often you will have to deal with PDF files. There are [many libraries in Python for working with PDFs](https://reachtim.com/articles/PDF-Manipulation.html), each with their pros and cons, the most common one being **PyPDF2**. You can install it with (note the case-sensitivity, you need to make sure your capitilization matches):\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    pip install PyPDF2\n",[m
[32m+[m[32m    "    \n",[m
[32m+[m[32m    "Keep in mind that not every PDF file can be read with this library. PDFs that are too blurry, have a special encoding, encrypted, or maybe just created with a particular program that doesn't work well with PyPDF2 won't be able to be read. If you find yourself in this situation, try using the libraries linked above, but keep in mind, these may also not work. The reason for this is because of the many different parameters for a PDF and how non-standard the settings can be, text could be shown as an image instead of a utf-8 encoding. There are many parameters to consider in this aspect.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "As far as PyPDF2 is concerned, it can only read the text from a PDF document, it won't be able to grab images or other media files from a PDF.\n",[m
[32m+[m[32m    "___\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "## Working with PyPDF2\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Let's begin by showing the basics of the PyPDF2 library."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 1,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# note the capitalization\n",[m
[32m+[m[32m    "import PyPDF2"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## Reading PDFs\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "First we open a pdf, then create a reader object for it. Notice how we use the binary method of reading , 'rb', instead of just 'r'."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 2,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Notice we read it as a binary with 'rb'\n",[m
[32m+[m[32m    "f = open('US_Declaration.pdf','rb')"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 3,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "pdf_reader = PyPDF2.PdfFileReader(f)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 4,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "5"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 4,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "pdf_reader.numPages"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 5,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "page_one = pdf_reader.getPage(0)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "We can then extract the text:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 6,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "page_one_text = page_one.extractText()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 7,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "\"Declaration of IndependenceIN CONGRESS, July 4, 1776. The unanimous Declaration of the thirteen united States of America, When in the Course of human events, it becomes necessary for one people to dissolve the\\npolitical bands which have connected them with another, and to assume among the powers of the\\nearth, the separate and equal station to which the Laws of Nature and of Nature's God entitle\\n\\nthem, a decent respect to the opinions of mankind requires that they should declare the causes\\n\\nwhich impel them to the separation. \\nWe hold these truths to be self-evident, that all men are created equal, that they are endowed by\\n\\ntheir Creator with certain unalienable Rights, that among these are Life, Liberty and the pursuit\\nof Happiness.ŠThat to secure these rights, Governments are instituted among Men, deriving\\n\\ntheir just powers from the consent of the governed,ŠThat whenever any Form of Government\\nbecomes destructive of these ends, it is the Right of the People to alter or to abolish it, and to\\ninstitute new Government, laying its foundation on such principles and organizing its powers in\\nsuch form, as to them shall seem most likely to effect their Safety and Happiness. Prudence,\\n\\nindeed, will dictate that Governments long established should not be changed for light and\\ntransient causes; and accordingly all experience hath shewn, that mankind are more disposed to\\nsuffer, while evils are sufferable, than to right themselves by abolishing the forms to which they\\n\\nare accustomed. But when a long train of abuses and usurpations, pursuing invariably the same\\nObject evinces a design to reduce them under absolute Despotism, it is their right, it is their duty,\\nto throw off such Government, and to provide new Guards for their future security.ŠSuch has\\nbeen the patient sufferance of these Colonies; and such is now the necessity which constrains\\n\\nthem to alter their former Systems of Government. The history of the present King of Great\\n\\nBritain is a history of repeated injuries and usurpations, all having in direct object the\\nestablishment of an absolute Tyranny over these States. To prove this, let Facts be submitted to a\\ncandid world. He has refused his Assent to Laws, the most wholesome and necessary for the\\npublic good.\\nHe has forbidden his Governors to pass Laws of immediate and pressing\\nimportance, unless suspended in their operation till his Assent should be obtained;\\nand when so suspended, he has utterly neglected to attend to them.\\n\\nHe has refused to pass other Laws for the accommodation of large districts of\\npeople, unless those people would relinquish the right of Representation in the\\nLegislature, a right inestimable to them and formidable to tyrants only. \\n\\nHe has called together legislative bodies at places unusual, uncomfortable, and distant\\nfrom the depository of their public Records, for the sole purpose of fatiguing them into\\ncompliance with his measures.\\n\""[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 7,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "page_one_text"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 8,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "f.close()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## Adding to PDFs\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "We can not write to PDFs using Python because of the differences between the single string type of Python, and the variety of fonts, placements, and other parameters that a PDF could have.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "What we *can* do is copy pages and append pages to the end."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 9,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "f = open('US_Declaration.pdf','rb')\n",[m
[32m+[m[32m    "pdf_reader = PyPDF2.PdfFileReader(f)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 10,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "first_page = pdf_reader.getPage(0)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 11,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "pdf_writer = PyPDF2.PdfFileWriter()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 12,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "pdf_writer.addPage(first_page)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 13,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "pdf_output = open(\"Some_New_Doc.pdf\",\"wb\")"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 14,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "pdf_writer.write(pdf_output)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 15,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "pdf_output.close()\n",[m
[32m+[m[32m    "f.close()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Now we have copied a page and added it to another new document!"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "___"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## Simple Example\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Let's try to grab all the text from this PDF file:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 16,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "f = open('US_Declaration.pdf','rb')\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# List of every page's text.\n",[m
[32m+[m[32m    "# The index will correspond to the page number.\n",[m
[32m+[m[32m    "pdf_text = [0]  # zero is a placehoder to make page 1 = index 1\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "pdf_reader = PyPDF2.PdfFileReader(f)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for p in range(pdf_reader.numPages):\n",[m
[32m+[m[32m    "    \n",[m
[32m+[m[32m    "    page = pdf_reader.getPage(p)\n",[m
[32m+[m[32m    "    \n",[m
[32m+[m[32m    "    pdf_text.append(page.extractText())\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "f.close()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 17,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "[0,\n",[m
[32m+[m[32m       " \"Declaration of IndependenceIN CONGRESS, July 4, 1776. The unanimous Declaration of the thirteen united States of America, When in the Course of human events, it becomes necessary for one people to dissolve the\\npolitical bands which have connected them with another, and to assume among the powers of the\\nearth, the separate and equal station to which the Laws of Nature and of Nature's God entitle\\n\\nthem, a decent respect to the opinions of mankind requires that they should declare the causes\\n\\nwhich impel them to the separation. \\nWe hold these truths to be self-evident, that all men are created equal, that they are endowed by\\n\\ntheir Creator with certain unalienable Rights, that among these are Life, Liberty and the pursuit\\nof Happiness.ŠThat to secure these rights, Governments are instituted among Men, deriving\\n\\ntheir just powers from the consent of the governed,ŠThat whenever any Form of Government\\nbecomes destructive of these ends, it is the Right of the People to alter or to abolish it, and to\\ninstitute new Government, laying its foundation on such principles and organizing its powers in\\nsuch form, as to them shall seem most likely to effect their Safety and Happiness. Prudence,\\n\\nindeed, will dictate that Governments long established should not be changed for light and\\ntransient causes; and accordingly all experience hath shewn, that mankind are more disposed to\\nsuffer, while evils are sufferable, than to right themselves by abolishing the forms to which they\\n\\nare accustomed. But when a long train of abuses and usurpations, pursuing invariably the same\\nObject evinces a design to reduce them under absolute Despotism, it is their right, it is their duty,\\nto throw off such Government, and to provide new Guards for their future security.ŠSuch has\\nbeen the patient sufferance of these Colonies; and such is now the necessity which constrains\\n\\nthem to alter their former Systems of Government. The history of the present King of Great\\n\\nBritain is a history of repeated injuries and usurpations, all having in direct object the\\nestablishment of an absolute Tyranny over these States. To prove this, let Facts be submitted to a\\ncandid world. He has refused his Assent to Laws, the most wholesome and necessary for the\\npublic good.\\nHe has forbidden his Governors to pass Laws of immediate and pressing\\nimportance, unless suspended in their operation till his Assent should be obtained;\\nand when so suspended, he has utterly neglected to attend to them.\\n\\nHe has refused to pass other Laws for the accommodation of large districts of\\npeople, unless those people would relinquish the right of Representation in the\\nLegislature, a right inestimable to them and formidable to tyrants only. \\n\\nHe has called together legislative bodies at places unusual, uncomfortable, and distant\\nfrom the depository of their public Records, for the sole purpose of fatiguing them into\\ncompliance with his measures.\\n\",\n",[m
[32m+[m[32m       " 'He has dissolved Representative Houses repeatedly, for opposing with manlyfirmness his invasions on the rights of the people.He has refused for a long time, after such dissolutions, to cause others to beelected; whereby the Legislative powers, incapable of Annihilation, have returnedto the People at large for their exercise; the State remaining in the mean timeexposed to all the dangers of invasion from without, and convulsions within.He has endeavoured to prevent the population of these States; for that purposeobstructing the Laws for Naturalization of Foreigners; refusing to pass others toencourage their migrations hither, and raising the conditions of newAppropriations of Lands.He has obstructed the Administration of Justice, by refusing his Assent to Lawsfor establishing Judiciary powers.He has made Judges dependent on his Will alone, for the tenure of their offices,and the amount and payment of their salaries.He has erected a multitude of New Offices, and sent hither swarms of Officers toharrass our people, and eat out their substance.He has kept among us, in times of peace, Standing Armies without the Consent ofour legislatures.He has affected to render the Military independent of and superior to the Civil power.He has combined with others to subject us to a jurisdiction foreign to ourconstitution, and unacknowledged by our laws; giving his Assent to their Acts ofpretended Legislation:For Quartering large bodies of armed troops among us:For protecting them, by a mock Trial, from punishment for any Murders whichthey should commit on the Inhabitants of these States:For cutting off our Trade with all parts of the world:For imposing Taxes on us without our Consent: For depriving us in many cases,of the benefits of Trial by Jury:For transporting us beyond Seas to be tried for pretended offencesFor abolishing the free System of English Laws in a neighbouring Province,establishing therein an Arbitrary government, and enlarging its Boundaries so as',\n",[m
[32m+[m[32m       " 'to render it at once an example and fit instrument for introducing the sameabsolute rule into these Colonies:For taking away our Charters, abolishing our most valuable Laws, and alteringfundamentally the Forms of our Governments:For suspending our own Legislatures, and declaring themselves invested withpower to legislate for us in all cases whatsoever.He has abdicated Government here, by declaring us out of his Protection andwaging War against us.He has plundered our seas, ravaged our Coasts, burnt our towns, and destroyed thelives of our people.He is at this time transporting large Armies of foreign Mercenaries to compleatthe works of death, desolation and tyranny, already begun with circumstances ofCruelty & perfidy scarcely paralleled in the most barbarous ages, and totallyunworthy of the Head of a civilized nation.He has constrained our fellow Citizens taken Captive on the high Seas to bearArms against their Country, to become the executioners of their friends and\\nBrethren, or to fall themselves by their Hands.He has excited domestic insurrections amongst us, and has endeavoured to bringon the inhabitants of our frontiers, the merciless Indian Savages, whose known\\nrule of warfare, is an undistinguished destruction of all ages, sexes and conditions. In every stage of these Oppressions We have Petitioned for Redress in the most humble terms:Our repeated Petitions have been answered only by repeated injury. A Prince whose character isthus marked by every act which may define a Tyrant, is unfit to be the ruler of a free people. Nor have We been wanting in attentions to our Brittish brethren. We have warned them fromtime to time of attempts by their legislature to extend an unwarrantable jurisdiction over us. Wehave reminded them of the circumstances of our emigration and settlement here. We haveappealed to their native justice and magnanimity, and we have conjured them by the ties of ourcommon kindred to disavow these usurpations, which, would inevitably interrupt ourconnections and correspondence. They too have been deaf to the voice of justice and ofconsanguinity. We must, therefore, acquiesce in the necessity, which denounces our Separation,and hold them, as we hold the rest of mankind, Enemies in War, in Peace Friends. We, therefore, the Representatives of the united States of America, in General Congress,Assembled, appealing to the Supreme Judge of the world for the rectitude of our intentions, do,in the Name, and by Authority of the good People of these Colonies, solemnly publish anddeclare, That these United Colonies are, and of Right ought to be Free and Independent States;that they are Absolved from all Allegiance to the British Crown, and that all political connection',\n",[m
[32m+[m[32m       " 'between them and the State of Great Britain, is and ought to be totally dissolved; and that as Free\\n\\nand Independent States, they have full Power to levy War, conclude Peace, contract Alliances,\\nestablish Commerce, and to do all other Acts and Things which Independent States may of right\\n\\ndo. And for the support of this Declaration, with a firm reliance on the protection of divine\\nProvidence, we mutually pledge to each other our Lives, our Fortunes and our sacred Honor.\\n\\n[The 56 signatures on the Declaration were arranged in six columns:\\n] [Column 1]\\n Georgia:   Button Gwinnett\\n   Lyman \\nHall   George Walton \\n[Column 2]\\n North Carolina:   William Hooper\\n   Joseph Hewes\\n   John Penn\\n South Carolina:   Edward Ru\\ntledge   Thomas Heyward, Jr.\\n  Thomas Lynch, Jr.\\n  Arthur Middleton \\n[Column 3]\\n Massachusetts:   John Hancock\\n\\n Maryland:   Samuel Chase\\n\\n   William Paca\\n\\n   Thomas Stone\\n\\n   Charles Carroll of Carrollton\\n\\n Virginia:   George Wythe\\n\\n   Richard Henry Lee\\n\\n   Thomas Jefferson\\n\\n   Benjamin Harrison\\n\\n   Thomas Nelson, Jr.\\n\\n   Francis Lightfoot Lee\\n\\n   Carter Braxton \\n\\n[Column 4]\\n Pennsylvania:  Robert Morris\\n\\n   Benjamin Rush\\n   Benjamin Fran\\nklin   John Morton\\n',\n",[m
[32m+[m[32m       " '   George Clymer\\n   James Smith\\n   George Taylor\\n   James Wilson\\n   George Ross\\n Delaware:   Caesar Rodney\\n   George Read\\n   Thomas McKean \\n[Column 5]\\n New York:   Wi\\nlliam Floyd   Philip Livingston\\n   Francis L\\newis   Lewis Morris\\n New Jersey:   Richard Stockton\\n   John Witherspoon\\n   Francis Hopkinson\\n   John Hart\\n   Abraham Clark \\n[Column 6]\\n New Hampshire:   Josiah Bartlett\\n   William Whipple\\n Massachusetts:   Samuel Adams\\n   John Adams\\n   Robert Treat Paine\\n   Elbridge Gerry\\n Rhode Island:   Stephen Hopkins\\n   William Ellery\\n Connecticut:   Roger Sherman\\n   Samuel Huntington\\n   William Williams\\n   Oliver Wolcott\\n New Hampshire: Matthew Thornton\\n ']"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 17,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "pdf_text"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 21,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "He has dissolved Representative Houses repeatedly, for opposing with manlyfirmness his invasions on the rights of the people.He has refused for a long time, after such dissolutions, to cause others to beelected; whereby the Legislative powers, incapable of Annihilation, have returnedto the People at large for their exercise; the State remaining in the mean timeexposed to all the dangers of invasion from without, and convulsions within.He has endeavoured to prevent the population of these States; for that purposeobstructing the Laws for Naturalization of Foreigners; refusing to pass others toencourage their migrations hither, and raising the conditions of newAppropriations of Lands.He has obstructed the Administration of Justice, by refusing his Assent to Lawsfor establishing Judiciary powers.He has made Judges dependent on his Will alone, for the tenure of their offices,and the amount and payment of their salaries.He has erected a multitude of New Offices, and sent hither swarms of Officers toharrass our people, and eat out their substance.He has kept among us, in times of peace, Standing Armies without the Consent ofour legislatures.He has affected to render the Military independent of and superior to the Civil power.He has combined with others to subject us to a jurisdiction foreign to ourconstitution, and unacknowledged by our laws; giving his Assent to their Acts ofpretended Legislation:For Quartering large bodies of armed troops among us:For protecting them, by a mock Trial, from punishment for any Murders whichthey should commit on the Inhabitants of these States:For cutting off our Trade with all parts of the world:For imposing Taxes on us without our Consent: For depriving us in many cases,of the benefits of Trial by Jury:For transporting us beyond Seas to be tried for pretended offencesFor abolishing the free System of English Laws in a neighbouring Province,establishing therein an Arbitrary government, and enlarging its Boundaries so as\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "print(pdf_text[2])"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### Excellent work! \n",[m
[32m+[m[32m    "That is all for PyPDF2 for now, remember that this won't work with every PDF file and is limited in its scope to only the text of PDFs.\n",[m
[32m+[m[32m    "## Next up: Regular Expressions"[m
[32m+[m[32m   ][m
[32m+[m[32m  }[m
[32m+[m[32m ],[m
[32m+[m[32m "metadata": {[m
[32m+[m[32m  "kernelspec": {[m
[32m+[m[32m   "display_name": "Python 3",[m
[32m+[m[32m   "language": "python",[m
[32m+[m[32m   "name": "python3"[m
[32m+[m[32m  },[m
[32m+[m[32m  "language_info": {[m
[32m+[m[32m   "codemirror_mode": {[m
[32m+[m[32m    "name": "ipython",[m
[32m+[m[32m    "version": 3[m
[32m+[m[32m   },[m
[32m+[m[32m   "file_extension": ".py",[m
[32m+[m[32m   "mimetype": "text/x-python",[m
[32m+[m[32m   "name": "python",[m
[32m+[m[32m   "nbconvert_exporter": "python",[m
[32m+[m[32m   "pygments_lexer": "ipython3",[m
[32m+[m[32m   "version": "3.6.2"[m
[32m+[m[32m  }[m
[32m+[m[32m },[m
[32m+[m[32m "nbformat": 4,[m
[32m+[m[32m "nbformat_minor": 2[m
[32m+[m[32m}[m
[1mdiff --git a/00-Python-Text-Basics/.ipynb_checkpoints/02-Regular-Expressions-checkpoint.ipynb b/00-Python-Text-Basics/.ipynb_checkpoints/02-Regular-Expressions-checkpoint.ipynb[m
[1mnew file mode 100644[m
[1mindex 0000000..57d6239[m
[1m--- /dev/null[m
[1m+++ b/00-Python-Text-Basics/.ipynb_checkpoints/02-Regular-Expressions-checkpoint.ipynb[m
[36m@@ -0,0 +1,1246 @@[m
[32m+[m[32m{[m
[32m+[m[32m "cells": [[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "___\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "<a href='http://www.pieriandata.com'> <img src='../Pierian_Data_Logo.png' /></a>\n",[m
[32m+[m[32m    "___"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Regular Expressions\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Regular Expressions (sometimes called regex for short) allow a user to search for strings using almost any sort of rule they can come up with. For example, finding all capital letters in a string, or finding a phone number in a document. \n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Regular expressions are notorious for their seemingly strange syntax. This strange syntax is a byproduct of their flexibility. Regular expressions have to be able to filter out any string pattern you can imagine, which is why they have a complex string pattern format.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Regular expressions are handled using Python's built-in **re** library. See [the docs](https://docs.python.org/3/library/re.html) for more information."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Let's begin by explaining how to search for basic patterns in a string!"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## Searching for Basic Patterns\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Let's imagine that we have the following string:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 1,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "text = \"The agent's phone number is 408-555-1234. Call soon!\""[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "We'll start off by trying to find out if the string \"phone\" is inside the text string. Now we could quickly do this with:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 2,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "True"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 2,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "'phone' in text"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "But let's show the format for regular expressions, because later on we will be searching for patterns that won't have such a simple solution."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 3,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "import re"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 4,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "pattern = 'phone'"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 5,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "<_sre.SRE_Match object; span=(12, 17), match='phone'>"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 5,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "re.search(pattern,text)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 6,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "pattern = \"NOT IN TEXT\""[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 7,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "re.search(pattern,text)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Now we've seen that re.search() will take the pattern, scan the text, and then returns a Match object. If no pattern is found, a None is returned (in Jupyter Notebook this just means that nothing is output below the cell).\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Let's take a closer look at this Match object."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 8,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "pattern = 'phone'"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 9,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "match = re.search(pattern,text)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 10,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "<_sre.SRE_Match object; span=(12, 17), match='phone'>"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 10,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "match"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Notice the span, there is also a start and end index information."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 11,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "(12, 17)"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 11,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "match.span()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 12,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "12"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 12,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "match.start()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 13,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "17"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 13,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "match.end()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "But what if the pattern occurs more than once?"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 14,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "text = \"my phone is a new phone\""[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 15,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "match = re.search(\"phone\",text)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 16,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "(3, 8)"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 16,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "match.span()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Notice it only matches the first instance. If we wanted a list of all matches, we can use .findall() method:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 17,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "matches = re.findall(\"phone\",text)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 18,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "['phone', 'phone']"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 18,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "matches"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 19,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "2"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 19,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "len(matches)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "To get actual match objects, use the iterator:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 20,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "(3, 8)\n",[m
[32m+[m[32m      "(18, 23)\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "for match in re.finditer(\"phone\",text):\n",[m
[32m+[m[32m    "    print(match.span())"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "If you wanted the actual text that matched, you can use the .group() method."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 21,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "'phone'"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 21,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "match.group()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Patterns\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "So far we've learned how to search for a basic string. What about more complex examples? Such as trying to find a telephone number in a large string of text? Or an email address?\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "We could just use search method if we know the exact phone or email, but what if we don't know it? We may know the general format, and we can use that along with regular expressions to search the document for strings that match a particular pattern.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "This is where the syntax may appear strange at first, but take your time with this; often it's just a matter of looking up the pattern code.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Let's begin!"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## Identifiers for Characters in Patterns\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Characters such as a digit or a single string have different codes that represent them. You can use these to build up a pattern string. Notice how these make heavy use of the backwards slash \\ . Because of this when defining a pattern string for regular expression we use the format:\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    r'mypattern'\n",[m
[32m+[m[32m    "    \n",[m
[32m+[m[32m    "placing the r in front of the string allows python to understand that the \\ in the pattern string are not meant to be escape slashes.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Below you can find a table of all the possible identifiers:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "<table ><tr><th>Character</th><th>Description</th><th>Example Pattern Code</th><th >Exammple Match</th></tr>\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "<tr ><td><span >\\d</span></td><td>A digit</td><td>file_\\d\\d</td><td>file_25</td></tr>\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "<tr ><td><span >\\w</span></td><td>Alphanumeric</td><td>\\w-\\w\\w\\w</td><td>A-b_1</td></tr>\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "<tr ><td><span >\\s</span></td><td>White space</td><td>a\\sb\\sc</td><td>a b c</td></tr>\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "<tr ><td><span >\\D</span></td><td>A non digit</td><td>\\D\\D\\D</td><td>ABC</td></tr>\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "<tr ><td><span >\\W</span></td><td>Non-alphanumeric</td><td>\\W\\W\\W\\W\\W</td><td>*-+=)</td></tr>\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "<tr ><td><span >\\S</span></td><td>Non-whitespace</td><td>\\S\\S\\S\\S</td><td>Yoyo</td></tr></table>"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "For example:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 22,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "text = \"My telephone number is 408-555-1234\""[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 23,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "phone = re.search(r'\\d\\d\\d-\\d\\d\\d-\\d\\d\\d\\d',text)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 24,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "'408-555-1234'"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 24,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "phone.group()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Notice the repetition of \\d. That is a bit of an annoyance, especially if we are looking for very long strings of numbers. Let's explore the possible quantifiers.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "## Quantifiers\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Now that we know the special character designations, we can use them along with quantifiers to define how many we expect."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "<table ><tr><th>Character</th><th>Description</th><th>Example Pattern Code</th><th >Exammple Match</th></tr>\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "<tr ><td><span >+</span></td><td>Occurs one or more times</td><td>\tVersion \\w-\\w+</td><td>Version A-b1_1</td></tr>\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "<tr ><td><span >{3}</span></td><td>Occurs exactly 3 times</td><td>\\D{3}</td><td>abc</td></tr>\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "<tr ><td><span >{2,4}</span></td><td>Occurs 2 to 4 times</td><td>\\d{2,4}</td><td>123</td></tr>\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "<tr ><td><span >{3,}</span></td><td>Occurs 3 or more</td><td>\\w{3,}</td><td>anycharacters</td></tr>\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "<tr ><td><span >\\*</span></td><td>Occurs zero or more times</td><td>A\\*B\\*C*</td><td>AAACC</td></tr>\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "<tr ><td><span >?</span></td><td>Once or none</td><td>plurals?</td><td>plural</td></tr></table>"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Let's rewrite our pattern using these quantifiers:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 25,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "<_sre.SRE_Match object; span=(23, 35), match='408-555-1234'>"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 25,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "re.search(r'\\d{3}-\\d{3}-\\d{4}',text)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## Groups\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "What if we wanted to do two tasks, find phone numbers, but also be able to quickly extract their area code (the first three digits). We can use groups for any general task that involves grouping together regular expressions (so that we can later break them down). \n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Using the phone number example, we can separate groups of regular expressions using parentheses:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 26,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "phone_pattern = re.compile(r'(\\d{3})-(\\d{3})-(\\d{4})')"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 27,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "results = re.search(phone_pattern,text)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 28,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "'408-555-1234'"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 28,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# The entire result\n",[m
[32m+[m[32m    "results.group()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 29,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "'408'"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 29,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Can then also call by group position.\n",[m
[32m+[m[32m    "# remember groups were separated by parentheses ()\n",[m
[32m+[m[32m    "# Something to note is that group ordering starts at 1. Passing in 0 returns everything\n",[m
[32m+[m[32m    "results.group(1)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 30,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "'555'"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 30,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "results.group(2)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 31,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "'1234'"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 31,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "results.group(3)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 32,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "IndexError",[m
[32m+[m[32m     "evalue": "no such group",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [[m
[32m+[m[32m      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",[m
[32m+[m[32m      "\u001b[1;31mIndexError\u001b[0m                                Traceback (most recent call last)",[m
[32m+[m[32m      "\u001b[1;32m<ipython-input-32-79a918a9b5dc>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;31m# We only had three groups of parentheses\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 2\u001b[1;33m \u001b[0mresults\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mgroup\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m4\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",[m
[32m+[m[32m      "\u001b[1;31mIndexError\u001b[0m: no such group"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# We only had three groups of parentheses\n",[m
[32m+[m[32m    "results.group(4)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## Additional Regex Syntax\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "### Or operator |\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Use the pipe operator to have an **or** statment. For example"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 33,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "<_sre.SRE_Match object; span=(5, 8), match='man'>"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 33,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "re.search(r\"man|woman\",\"This man was here.\")"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 34,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "<_sre.SRE_Match object; span=(5, 10), match='woman'>"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 34,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "re.search(r\"man|woman\",\"This woman was here.\")"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### The Wildcard Character\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Use a \"wildcard\" as a placement that will match any character placed there. You can use a simple period **.** for this. For example:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 35,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "['cat', 'hat', 'sat']"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 35,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "re.findall(r\".at\",\"The cat in the hat sat here.\")"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 36,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "['bat', 'lat']"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 36,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "re.findall(r\".at\",\"The bat went splat\")"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Notice how we only matched the first 3 letters, that is because we need a **.** for each wildcard letter. Or use the quantifiers described above to set its own rules."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 37,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "['e bat', 'splat']"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 37,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "re.findall(r\"...at\",\"The bat went splat\")"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "However this still leads the problem to grabbing more beforehand. Really we only want words that end with \"at\"."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 38,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "['bat', 'splat']"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 38,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# One or more non-whitespace that ends with 'at'\n",[m
[32m+[m[32m    "re.findall(r'\\S+at',\"The bat went splat\")"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### Starts With and Ends With\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "We can use the **^** to signal starts with, and the **$** to signal ends with:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 39,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "['2']"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 39,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Ends with a number\n",[m
[32m+[m[32m    "re.findall(r'\\d$','This ends with a number 2')"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 40,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "['1']"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 40,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Starts with a number\n",[m
[32m+[m[32m    "re.findall(r'^\\d','1 is the loneliest number.')"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Note that this is for the entire string, not individual words!"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### Exclusion\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "To exclude characters, we can use the **^** symbol in conjunction with a set of brackets **[]**. Anything inside the brackets is excluded. For example:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 41,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "phrase = \"there are 3 numbers 34 inside 5 this sentence.\""[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 42,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "['t',\n",[m
[32m+[m[32m       " 'h',\n",[m
[32m+[m[32m       " 'e',\n",[m
[32m+[m[32m       " 'r',\n",[m
[32m+[m[32m       " 'e',\n",[m
[32m+[m[32m       " ' ',\n",[m
[32m+[m[32m       " 'a',\n",[m
[32m+[m[32m       " 'r',\n",[m
[32m+[m[32m       " 'e',\n",[m
[32m+[m[32m       " ' ',\n",[m
[32m+[m[32m       " ' ',\n",[m
[32m+[m[32m       " 'n',\n",[m
[32m+[m[32m       " 'u',\n",[m
[32m+[m[32m       " 'm',\n",[m
[32m+[m[32m       " 'b',\n",[m
[32m+[m[32m       " 'e',\n",[m
[32m+[m[32m       " 'r',\n",[m
[32m+[m[32m       " 's',\n",[m
[32m+[m[32m       " ' ',\n",[m
[32m+[m[32m       " ' ',\n",[m
[32m+[m[32m       " 'i',\n",[m
[32m+[m[32m       " 'n',\n",[m
[32m+[m[32m       " 's',\n",[m
[32m+[m[32m       " 'i',\n",[m
[32m+[m[32m       " 'd',\n",[m
[32m+[m[32m       " 'e',\n",[m
[32m+[m[32m       " ' ',\n",[m
[32m+[m[32m       " ' ',\n",[m
[32m+[m[32m       " 't',\n",[m
[32m+[m[32m       " 'h',\n",[m
[32m+[m[32m       " 'i',\n",[m
[32m+[m[32m       " 's',\n",[m
[32m+[m[32m       " ' ',\n",[m
[32m+[m[32m       " 's',\n",[m
[32m+[m[32m       " 'e',\n",[m
[32m+[m[32m       " 'n',\n",[m
[32m+[m[32m       " 't',\n",[m
[32m+[m[32m       " 'e',\n",[m
[32m+[m[32m       " 'n',\n",[m
[32m+[m[32m       " 'c',\n",[m
[32m+[m[32m       " 'e',\n",[m
[32m+[m[32m       " '.']"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 42,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "re.findall(r'[^\\d]',phrase)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "To get the words back together, use a + sign "[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 43,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "['there are ', ' numbers ', ' inside ', ' this sentence.']"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 43,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "re.findall(r'[^\\d]+',phrase)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "We can use this to remove punctuation from a sentence."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 44,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "test_phrase = 'This is a string! But it has punctuation. How can we remove it?'"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 45,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "['This',\n",[m
[32m+[m[32m       " 'is',\n",[m
[32m+[m[32m       " 'a',\n",[m
[32m+[m[32m       " 'string',\n",[m
[32m+[m[32m       " 'But',\n",[m
[32m+[m[32m       " 'it',\n",[m
[32m+[m[32m       " 'has',\n",[m
[32m+[m[32m       " 'punctuation',\n",[m
[32m+[m[32m       " 'How',\n",[m
[32m+[m[32m       " 'can',\n",[m
[32m+[m[32m       " 'we',\n",[m
[32m+[m[32m       " 'remove',\n",[m
[32m+[m[32m       " 'it']"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 45,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "re.findall('[^!.? ]+',test_phrase)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 46,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "clean = ' '.join(re.findall('[^!.? ]+',test_phrase))"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 47,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "'This is a string But it has punctuation How can we remove it'"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 47,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "clean"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## Brackets for Grouping\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "As we showed above we can use brackets to group together options, for example if we wanted to find hyphenated words:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 48,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "text = 'Only find the hypen-words in this sentence. But you do not know how long-ish they are'"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 49,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "['hypen-words', 'long-ish']"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 49,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "re.findall(r'[\\w]+-[\\w]+',text)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## Parentheses for Multiple Options\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "If we have multiple options for matching, we can use parentheses to list out these options. For Example:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 50,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Find words that start with cat and end with one of these options: 'fish','nap', or 'claw'\n",[m
[32m+[m[32m    "text = 'Hello, would you like some catfish?'\n",[m
[32m+[m[32m    "texttwo = \"Hello, would you like to take a catnap?\"\n",[m
[32m+[m[32m    "textthree = \"Hello, have you seen this caterpillar?\""[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 51,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "<_sre.SRE_Match object; span=(27, 34), match='catfish'>"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 51,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "re.search(r'cat(fish|nap|claw)',text)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 52,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "<_sre.SRE_Match object; span=(32, 38), match='catnap'>"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 52,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "re.search(r'cat(fish|nap|claw)',texttwo)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 53,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# None returned\n",[m
[32m+[m[32m    "re.search(r'cat(fish|nap|claw)',textthree)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### Conclusion\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Excellent work! For full information on all possible patterns, check out: https://docs.python.org/3/howto/regex.html"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## Next up: Python Text Basics Assessment"[m
[32m+[m[32m   ][m
[32m+[m[32m  }[m
[32m+[m[32m ],[m
[32m+[m[32m "metadata": {[m
[32m+[m[32m  "kernelspec": {[m
[32m+[m[32m   "display_name": "Python 3",[m
[32m+[m[32m   "language": "python",[m
[32m+[m[32m   "name": "python3"[m
[32m+[m[32m  },[m
[32m+[m[32m  "language_info": {[m
[32m+[m[32m   "codemirror_mode": {[m
[32m+[m[32m    "name": "ipython",[m
[32m+[m[32m    "version": 3[m
[32m+[m[32m   },[m
[32m+[m[32m   "file_extension": ".py",[m
[32m+[m[32m   "mimetype": "text/x-python",[m
[32m+[m[32m   "name": "python",[m
[32m+[m[32m   "nbconvert_exporter": "python",[m
[32m+[m[32m   "pygments_lexer": "ipython3",[m
[32m+[m[32m   "version": "3.6.2"[m
[32m+[m[32m  }[m
[32m+[m[32m },[m
[32m+[m[32m "nbformat": 4,[m
[32m+[m[32m "nbformat_minor": 2[m
[32m+[m[32m}[m
[1mdiff --git a/00-Python-Text-Basics/.ipynb_checkpoints/03-Python-Text-Basics-Assessment-checkpoint.ipynb b/00-Python-Text-Basics/.ipynb_checkpoints/03-Python-Text-Basics-Assessment-checkpoint.ipynb[m
[1mnew file mode 100644[m
[1mindex 0000000..b50ed3d[m
[1m--- /dev/null[m
[1m+++ b/00-Python-Text-Basics/.ipynb_checkpoints/03-Python-Text-Basics-Assessment-checkpoint.ipynb[m
[36m@@ -0,0 +1,535 @@[m
[32m+[m[32m{[m
[32m+[m[32m "cells": [[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "___\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "<a href='http://www.pieriandata.com'> <img src='../Pierian_Data_Logo.png' /></a>\n",[m
[32m+[m[32m    "___"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Python Text Basics Assessment\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Welcome to your assessment! Complete the tasks described in bold below by typing the relevant code in the cells.<br>\n",[m
[32m+[m[32m    "You can compare your answers to the Solutions notebook provided in this folder."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## f-Strings\n",[m
[32m+[m[32m    "#### 1. Print an f-string that displays `NLP stands for Natural Language Processing` using the variables provided."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 6,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "NLP stands for Natural Language Processing\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "abbr = 'NLP'\n",[m
[32m+[m[32m    "full_text = 'Natural Language Processing'\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Enter your code here:\n",[m
[32m+[m[32m    "print(f\"{abbr} stands for {full_text}\")"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## Files\n",[m
[32m+[m[32m    "#### 2. Create a file in the current working directory called `contacts.txt` by running the cell below:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 31,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Overwriting contacts.txt\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "%%writefile contacts.txt\n",[m
[32m+[m[32m    "First_Name Last_Name, Title, Extension, Email"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### 3. Open the file and use .read() to save the contents of the file to a string called `fields`.  Make sure the file is closed at the end."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 8,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "myfile = open(\"contacts.txt\")"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 9,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "'First_Name Last_Name, Title, Extension, Email\\n'"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 9,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "myfile.readlines()[0]"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 9,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "0"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 9,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "myfile.seek(0)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 3,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "'First_Name Last_Name, Title, Extension, Email'"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 3,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Write your code here:\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    \n",[m
[32m+[m[32m    "# Run fields to see the contents of contacts.txt:\n",[m
[32m+[m[32m    "fields"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## Working with PDF Files\n",[m
[32m+[m[32m    "#### 4. Use PyPDF2 to open the file `Business_Proposal.pdf`. Extract the text of page 2."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 10,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "import PyPDF2"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 11,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "f = open('Business_Proposal.pdf','rb')"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 12,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "readpdf = PyPDF2.PdfFileReader(f)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 13,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "2"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 13,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "readpdf.numPages"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 14,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "page_two_text = readpdf.getPage(1).extractText()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 15,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "AUTHORS:  \n",[m
[32m+[m[32m      "Amy Baker, Finance Chair, x345, abaker@ourcompany.com  \n",[m
[32m+[m[32m      "Chris Donaldson, Accounting Dir., x621, cdonaldson@ourcompany.com  \n",[m
[32m+[m[32m      "Erin Freeman, Sr. VP, x879, efreeman@ourcompany.com  \n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "print(page_two_text)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 16,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "f.close()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 4,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "AUTHORS:\n",[m
[32m+[m[32m      " \n",[m
[32m+[m[32m      "Amy Baker, Finance Chair, x345, abaker@ourcompany.com\n",[m
[32m+[m[32m      " \n",[m
[32m+[m[32m      "Chris Donaldson, Accounting Dir., x621, cdonaldson@ourcompany.com\n",[m
[32m+[m[32m      " \n",[m
[32m+[m[32m      "Erin Freeman, Sr. VP, x879, efreeman@ourcompany.com\n",[m
[32m+[m[32m      " \n",[m
[32m+[m[32m      "\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Perform import\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Open the file as a binary object\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Use PyPDF2 to read the text of the file\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Get the text from page 2 (CHALLENGE: Do this in one step!)\n",[m
[32m+[m[32m    "page_two_text = \n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Close the file\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Print the contents of page_two_text\n",[m
[32m+[m[32m    "print(page_two_text)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### 5. Open the file `contacts.txt` in append mode. Add the text of page 2 from above to `contacts.txt`.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "#### CHALLENGE: See if you can remove the word \"AUTHORS:\""[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 32,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "f = open(\"contacts.txt\",\"a+\")"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 33,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "newtxt = page_two_text.replace(\"AUTHORS:\" , \"\").strip()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 34,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "175"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 34,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "f.write(newtxt)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 35,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "f.close()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 5,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "First_Name Last_Name, Title, Extension, EmailAUTHORS:\n",[m
[32m+[m[32m      " \n",[m
[32m+[m[32m      "Amy Baker, Finance Chair, x345, abaker@ourcompany.com\n",[m
[32m+[m[32m      " \n",[m
[32m+[m[32m      "Chris Donaldson, Accounting Dir., x621, cdonaldson@ourcompany.com\n",[m
[32m+[m[32m      " \n",[m
[32m+[m[32m      "Erin Freeman, Sr. VP, x879, efreeman@ourcompany.com\n",[m
[32m+[m[32m      " \n",[m
[32m+[m[32m      "\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Simple Solution:\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 7,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "First_Name Last_Name, Title, Extension, Email\n",[m
[32m+[m[32m      " \n",[m
[32m+[m[32m      "Amy Baker, Finance Chair, x345, abaker@ourcompany.com\n",[m
[32m+[m[32m      " \n",[m
[32m+[m[32m      "Chris Donaldson, Accounting Dir., x621, cdonaldson@ourcompany.com\n",[m
[32m+[m[32m      " \n",[m
[32m+[m[32m      "Erin Freeman, Sr. VP, x879, efreeman@ourcompany.com\n",[m
[32m+[m[32m      " \n",[m
[32m+[m[32m      "\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# CHALLENGE Solution (re-run the %%writefile cell above to obtain an unmodified contacts.txt file):\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## Regular Expressions\n",[m
[32m+[m[32m    "#### 6. Using the `page_two_text` variable created above, extract any email addresses that were contained in the file `Business_Proposal.pdf`."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 36,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "import re\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 37,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "'AUTHORS:  \\nAmy Baker, Finance Chair, x345, abaker@ourcompany.com  \\nChris Donaldson, Accounting Dir., x621, cdonaldson@ourcompany.com  \\nErin Freeman, Sr. VP, x879, efreeman@ourcompany.com  '"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 37,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "page_two_text"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 38,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "pattern = \"\\w*@ourcompany.com\""[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 39,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "['abaker@ourcompany.com',\n",[m
[32m+[m[32m       " 'cdonaldson@ourcompany.com',\n",[m
[32m+[m[32m       " 'efreeman@ourcompany.com']"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 39,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "re.findall(pattern,page_two_text)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 8,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "['abaker@ourcompany.com',\n",[m
[32m+[m[32m       " 'cdonaldson@ourcompany.com',\n",[m
[32m+[m[32m       " 'efreeman@ourcompany.com']"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 8,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "import re\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Enter your regex pattern here. This may take several tries!\n",[m
[32m+[m[32m    "pattern = \n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "re.findall(pattern, page_two_text)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### Great job!"[m
[32m+[m[32m   ][m
[32m+[m[32m  }[m
[32m+[m[32m ],[m
[32m+[m[32m "metadata": {[m
[32m+[m[32m  "kernelspec": {[m
[32m+[m[32m   "display_name": "Python 3 (ipykernel)",[m
[32m+[m[32m   "language": "python",[m
[32m+[m[32m   "name": "python3"[m
[32m+[m[32m  },[m
[32m+[m[32m  "language_info": {[m
[32m+[m[32m   "codemirror_mode": {[m
[32m+[m[32m    "name": "ipython",[m
[32m+[m[32m    "version": 3[m
[32m+[m[32m   },[m
[32m+[m[32m   "file_extension": ".py",[m
[32m+[m[32m   "mimetype": "text/x-python",[m
[32m+[m[32m   "name": "python",[m
[32m+[m[32m   "nbconvert_exporter": "python",[m
[32m+[m[32m   "pygments_lexer": "ipython3",[m
[32m+[m[32m   "version": "3.9.13"[m
[32m+[m[32m  }[m
[32m+[m[32m },[m
[32m+[m[32m "nbformat": 4,[m
[32m+[m[32m "nbformat_minor": 2[m
[32m+[m[32m}[m
[1mdiff --git a/00-Python-Text-Basics/.ipynb_checkpoints/04-Python-Text-Basics-Assessment-Solutions-checkpoint.ipynb b/00-Python-Text-Basics/.ipynb_checkpoints/04-Python-Text-Basics-Assessment-Solutions-checkpoint.ipynb[m
[1mnew file mode 100644[m
[1mindex 0000000..557c619[m
[1m--- /dev/null[m
[1m+++ b/00-Python-Text-Basics/.ipynb_checkpoints/04-Python-Text-Basics-Assessment-Solutions-checkpoint.ipynb[m
[36m@@ -0,0 +1,295 @@[m
[32m+[m[32m{[m
[32m+[m[32m "cells": [[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "___\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "<a href='http://www.pieriandata.com'> <img src='../Pierian_Data_Logo.png' /></a>\n",[m
[32m+[m[32m    "___"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Python Text Basics Assessment - Solutions\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Welcome to your assessment! Complete the tasks described in bold below by typing the relevant code in the cells."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## f-Strings\n",[m
[32m+[m[32m    "#### 1. Print an f-string that displays `NLP stands for Natural Language Processing` using the variables provided."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 1,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "NLP stands for Natural Language Processing\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "abbr = 'NLP'\n",[m
[32m+[m[32m    "full_text = 'Natural Language Processing'\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Enter your code here:\n",[m
[32m+[m[32m    "print(f'{abbr} stands for {full_text}')"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## Files\n",[m
[32m+[m[32m    "#### 2. Create a file in the current working directory called `contacts.txt` by running the cell below:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 6,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Overwriting contacts.txt\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "%%writefile contacts.txt\n",[m
[32m+[m[32m    "First_Name Last_Name, Title, Extension, Email"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### 3. Open the file and use .read() to save the contents of the file to a string called `fields`.  Make sure the file is closed at the end."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 3,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "'First_Name Last_Name, Title, Extension, Email'"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 3,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Write your code here:\n",[m
[32m+[m[32m    "with open('contacts.txt') as c:\n",[m
[32m+[m[32m    "    fields = c.read()\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    \n",[m
[32m+[m[32m    "# Run fields to see the contents of contacts.txt:\n",[m
[32m+[m[32m    "fields"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## Working with PDF Files\n",[m
[32m+[m[32m    "#### 4. Use PyPDF2 to open the file `Business_Proposal.pdf`. Extract the text of page 2."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 4,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "AUTHORS:\n",[m
[32m+[m[32m      " \n",[m
[32m+[m[32m      "Amy Baker, Finance Chair, x345, abaker@ourcompany.com\n",[m
[32m+[m[32m      " \n",[m
[32m+[m[32m      "Chris Donaldson, Accounting Dir., x621, cdonaldson@ourcompany.com\n",[m
[32m+[m[32m      " \n",[m
[32m+[m[32m      "Erin Freeman, Sr. VP, x879, efreeman@ourcompany.com\n",[m
[32m+[m[32m      " \n",[m
[32m+[m[32m      "\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Perform import\n",[m
[32m+[m[32m    "import PyPDF2\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Open the file as a binary object\n",[m
[32m+[m[32m    "f = open('Business_Proposal.pdf','rb')\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Use PyPDF2 to read the text of the file\n",[m
[32m+[m[32m    "pdf_reader = PyPDF2.PdfFileReader(f)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Get the text from page 2 (CHALLENGE: Do this in one step!)\n",[m
[32m+[m[32m    "page_two_text = pdf_reader.getPage(1).extractText()\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Close the file\n",[m
[32m+[m[32m    "f.close()\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Print the contents of page_two_text\n",[m
[32m+[m[32m    "print(page_two_text)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### 5. Open the file `contacts.txt` in append mode. Add the text of page 2 from above to `contacts.txt`.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "#### CHALLENGE: See if you can remove the word \"AUTHORS:\""[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 5,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "First_Name Last_Name, Title, Extension, EmailAUTHORS:\n",[m
[32m+[m[32m      " \n",[m
[32m+[m[32m      "Amy Baker, Finance Chair, x345, abaker@ourcompany.com\n",[m
[32m+[m[32m      " \n",[m
[32m+[m[32m      "Chris Donaldson, Accounting Dir., x621, cdonaldson@ourcompany.com\n",[m
[32m+[m[32m      " \n",[m
[32m+[m[32m      "Erin Freeman, Sr. VP, x879, efreeman@ourcompany.com\n",[m
[32m+[m[32m      " \n",[m
[32m+[m[32m      "\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Simple Solution:\n",[m
[32m+[m[32m    "with open('contacts.txt','a+') as c:\n",[m
[32m+[m[32m    "    c.write(page_two_text)\n",[m
[32m+[m[32m    "    c.seek(0)\n",[m
[32m+[m[32m    "    print(c.read())"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 7,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "First_Name Last_Name, Title, Extension, Email\n",[m
[32m+[m[32m      " \n",[m
[32m+[m[32m      "Amy Baker, Finance Chair, x345, abaker@ourcompany.com\n",[m
[32m+[m[32m      " \n",[m
[32m+[m[32m      "Chris Donaldson, Accounting Dir., x621, cdonaldson@ourcompany.com\n",[m
[32m+[m[32m      " \n",[m
[32m+[m[32m      "Erin Freeman, Sr. VP, x879, efreeman@ourcompany.com\n",[m
[32m+[m[32m      " \n",[m
[32m+[m[32m      "\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# CHALLENGE Solution (re-run the %%writefile cell above to obtain an unmodified contacts.txt file):\n",[m
[32m+[m[32m    "with open('contacts.txt','a+') as c:\n",[m
[32m+[m[32m    "    c.write(page_two_text[8:])\n",[m
[32m+[m[32m    "    c.seek(0)\n",[m
[32m+[m[32m    "    print(c.read())"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## Regular Expressions\n",[m
[32m+[m[32m    "#### 6. Using the `page_two_text` variable created above, extract any email addresses that were contained in the file `Business_Proposal.pdf`."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 8,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "['abaker@ourcompany.com',\n",[m
[32m+[m[32m       " 'cdonaldson@ourcompany.com',\n",[m
[32m+[m[32m       " 'efreeman@ourcompany.com']"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 8,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "import re\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Enter your regex pattern here. This may take several tries!\n",[m
[32m+[m[32m    "pattern = r'\\w+@\\w+.\\w{3}'\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "re.findall(pattern, page_two_text)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### Great job!"[m
[32m+[m[32m   ][m
[32m+[m[32m  }[m
[32m+[m[32m ],[m
[32m+[m[32m "metadata": {[m
[32m+[m[32m  "kernelspec": {[m
[32m+[m[32m   "display_name": "Python 3",[m
[32m+[m[32m   "language": "python",[m
[32m+[m[32m   "name": "python3"[m
[32m+[m[32m  },[m
[32m+[m[32m  "language_info": {[m
[32m+[m[32m   "codemirror_mode": {[m
[32m+[m[32m    "name": "ipython",[m
[32m+[m[32m    "version": 3[m
[32m+[m[32m   },[m
[32m+[m[32m   "file_extension": ".py",[m
[32m+[m[32m   "mimetype": "text/x-python",[m
[32m+[m[32m   "name": "python",[m
[32m+[m[32m   "nbconvert_exporter": "python",[m
[32m+[m[32m   "pygments_lexer": "ipython3",[m
[32m+[m[32m   "version": "3.6.2"[m
[32m+[m[32m  }[m
[32m+[m[32m },[m
[32m+[m[32m "nbformat": 4,[m
[32m+[m[32m "nbformat_minor": 2[m
[32m+[m[32m}[m
[1mdiff --git a/00-Python-Text-Basics/00-Working-with-Text-Files.ipynb b/00-Python-Text-Basics/00-Working-with-Text-Files.ipynb[m
[1mnew file mode 100644[m
[1mindex 0000000..cc2fe40[m
[1m--- /dev/null[m
[1m+++ b/00-Python-Text-Basics/00-Working-with-Text-Files.ipynb[m
[36m@@ -0,0 +1,840 @@[m
[32m+[m[32m{[m
[32m+[m[32m "cells": [[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "___\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "<a href='http://www.pieriandata.com'> <img src='../Pierian_Data_Logo.png' /></a>\n",[m
[32m+[m[32m    "___"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Working with Text Files\n",[m
[32m+[m[32m    "In this section we'll cover\n",[m
[32m+[m[32m    " * Working with f-strings (formatted string literals) to format printed text\n",[m
[32m+[m[32m    " * Working with Files - opening, reading, writing and appending text files"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## Formatted String Literals (f-strings)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Introduced in Python 3.6, <strong>f-strings</strong> offer several benefits over the older `.format()` string method. <br>For one, you can bring outside variables immediately into to the string rather than pass them through as keyword arguments:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 1,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "His name is Fred.\n",[m
[32m+[m[32m      "His name is Fred.\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "name = 'Fred'\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Using the old .format() method:\n",[m
[32m+[m[32m    "print('His name is {var}.'.format(var=name))\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Using f-strings:\n",[m
[32m+[m[32m    "print(f'His name is {name}.')"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Pass `!r` to get the <strong>string representation</strong>:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 2,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "His name is 'Fred'\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "print(f'His name is {name!r}')"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Be careful not to let quotation marks in the replacement fields conflict with the quoting used in the outer string:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 4,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "SyntaxError",[m
[32m+[m[32m     "evalue": "f-string: unmatched '[' (3751357111.py, line 3)",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [[m
[32m+[m[32m      "\u001b[1;36m  File \u001b[1;32m\"C:\\Users\\Sandesh.Bharitkar\\AppData\\Local\\Temp\\ipykernel_22084\\3751357111.py\"\u001b[1;36m, line \u001b[1;32m3\u001b[0m\n\u001b[1;33m    print(f'Address: {d['a']} Main Street')\u001b[0m\n\u001b[1;37m                         ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m f-string: unmatched '['\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "d = {'a':123,'b':456}\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "print(f'Address: {d['a']} Main Street')"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Instead, use different styles of quotation marks:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 5,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Address: 123 Main Street\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "d = {'a':123,'b':456}\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "print(f\"Address: {d['a']} Main Street\")"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### Minimum Widths, Alignment and Padding\n",[m
[32m+[m[32m    "You can pass arguments inside a nested set of curly braces to set a minimum width for the field, the alignment and even padding characters."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 6,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Author     Topic    Pages  \n",[m
[32m+[m[32m      "Twain      Rafting      601\n",[m
[32m+[m[32m      "Feynman    Physics       95\n",[m
[32m+[m[32m      "Hamilton   Mythology     144\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "library = [('Author', 'Topic', 'Pages'), ('Twain', 'Rafting', 601), ('Feynman', 'Physics', 95), ('Hamilton', 'Mythology', 144)]\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for book in library:\n",[m
[32m+[m[32m    "    print(f'{book[0]:{10}} {book[1]:{8}} {book[2]:{7}}')"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Here the first three lines align, except `Pages` follows a default left-alignment while numbers are right-aligned. Also, the fourth line's page number is pushed to the right as `Mythology` exceeds the minimum field width of `8`. When setting minimum field widths make sure to take the longest item into account.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "To set the alignment, use the character `<` for left-align,  `^` for center, `>` for right.<br>\n",[m
[32m+[m[32m    "To set padding, precede the alignment character with the padding character (`-` and `.` are common choices).\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Let's make some adjustments:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 7,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Author     Topic      ..Pages\n",[m
[32m+[m[32m      "Twain      Rafting    ....601\n",[m
[32m+[m[32m      "Feynman    Physics    .....95\n",[m
[32m+[m[32m      "Hamilton   Mythology  ....144\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "for book in library:\n",[m
[32m+[m[32m    "    print(f'{book[0]:{10}} {book[1]:{10}} {book[2]:.>{7}}') # here .> was added"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 11,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "testval = \"test\""[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 22,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      " test    \n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "print(f\" {testval : <{7}} \")"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### Date Formatting"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 23,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "January 27, 2018\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "from datetime import datetime\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "today = datetime(year=2018, month=1, day=27)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "print(f'{today:%B %d, %Y}')"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "For more info on formatted string literals visit https://docs.python.org/3/reference/lexical_analysis.html#f-strings\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "***"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Files\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Python uses file objects to interact with external files on your computer. These file objects can be any sort of file you have on your computer, whether it be an audio file, a text file, emails, Excel documents, etc. Note: You will probably need to install certain libraries or modules to interact with those various file types, but they are easily available. (We will cover downloading modules later on in the course).\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Python has a built-in open function that allows us to open and play with basic file types. First we will need a file though. We're going to use some IPython magic to create a text file!\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "## Creating a File with IPython\n",[m
[32m+[m[32m    "#### This function is specific to jupyter notebooks! Alternatively, quickly create a simple .txt file with Sublime text editor."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 24,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Overwriting test.txt\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "%%writefile test.txt\n",[m
[32m+[m[32m    "Hello, this is a quick test file.\n",[m
[32m+[m[32m    "This is the second line of the file."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## Python Opening a File\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "### Know Your File's Location\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "It's easy to get an error on this step:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 25,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "FileNotFoundError",[m
[32m+[m[32m     "evalue": "[Errno 2] No such file or directory: 'whoops.txt'",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [[m
[32m+[m[32m      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",[m
[32m+[m[32m      "\u001b[1;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",[m
[32m+[m[32m      "\u001b[1;32m~\\AppData\\Local\\Temp\\ipykernel_22084\\249537451.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mmyfile\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mopen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'whoops.txt'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",[m
[32m+[m[32m      "\u001b[1;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'whoops.txt'"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "myfile = open('whoops.txt')"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "To avoid this error, make sure your .txt file is saved in the same location as your notebook. To check your notebook location, use **pwd**:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 10,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "'C:\\\\Users\\\\Mike\\\\NLP-Bootcamp\\\\00-Python-Text-Basics'"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 10,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "pwd"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "**Alternatively, to grab files from any location on your computer, simply pass in the entire file path. **\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "For Windows you need to use double \\ so python doesn't treat the second \\ as an escape character, a file path is in the form:\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    myfile = open(\"C:\\\\Users\\\\YourUserName\\\\Home\\\\Folder\\\\myfile.txt\")\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "For MacOS and Linux you use slashes in the opposite direction:\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    myfile = open(\"/Users/YourUserName/Folder/myfile.txt\")"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 11,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Open the text.txt file we created earlier\n",[m
[32m+[m[32m    "my_file = open('test.txt')"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 12,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "<_io.TextIOWrapper name='test.txt' mode='r' encoding='cp1252'>"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 12,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "my_file"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "`my_file` is now an open file object held in memory. We'll perform some reading and writing exercises, and then we have to close the file to free up memory.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "### .read() and .seek()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 13,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "'Hello, this is a quick test file.\\nThis is the second line of the file.'"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 13,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# We can now read the file\n",[m
[32m+[m[32m    "my_file.read()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 14,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "''"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 14,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# But what happens if we try to read it again?\n",[m
[32m+[m[32m    "my_file.read()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "This happens because you can imagine the reading \"cursor\" is at the end of the file after having read it. So there is nothing left to read. We can reset the \"cursor\" like this:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 15,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "0"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 15,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Seek to the start of file (index 0)\n",[m
[32m+[m[32m    "my_file.seek(0)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 16,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "'Hello, this is a quick test file.\\nThis is the second line of the file.'"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 16,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Now read again\n",[m
[32m+[m[32m    "my_file.read()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### .readlines()\n",[m
[32m+[m[32m    "You can read a file line by line using the readlines method. Use caution with large files, since everything will be held in memory. We will learn how to iterate over large files later in the course."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 17,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "['Hello, this is a quick test file.\\n', 'This is the second line of the file.']"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 17,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Readlines returns a list of the lines in the file\n",[m
[32m+[m[32m    "my_file.seek(0)\n",[m
[32m+[m[32m    "my_file.readlines()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "When you have finished using a file, it is always good practice to close it."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 18,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "my_file.close()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## Writing to a File\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "By default, the `open()` function will only allow us to read the file. We need to pass the argument `'w'` to write over the file. For example:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 19,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Add a second argument to the function, 'w' which stands for write.\n",[m
[32m+[m[32m    "# Passing 'w+' lets us read and write to the file\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "my_file = open('test.txt','w+')"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "<div class=\"alert alert-danger\" style=\"margin: 20px\">**Use caution!**<br>\n",[m
[32m+[m[32m    "Opening a file with 'w' or 'w+' *truncates the original*, meaning that anything that was in the original file **is deleted**!</div>"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 20,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "24"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 20,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Write to the file\n",[m
[32m+[m[32m    "my_file.write('This is a new first line')"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 21,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "'This is a new first line'"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 21,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Read the file\n",[m
[32m+[m[32m    "my_file.seek(0)\n",[m
[32m+[m[32m    "my_file.read()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 22,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "my_file.close()  # always do this when you're done with a file"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## Appending to a File\n",[m
[32m+[m[32m    "Passing the argument `'a'` opens the file and puts the pointer at the end, so anything written is appended. Like `'w+'`, `'a+'` lets us read and write to a file. If the file does not exist, one will be created."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 23,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "23"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 23,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "my_file = open('test.txt','a+')\n",[m
[32m+[m[32m    "my_file.write('\\nThis line is being appended to test.txt')\n",[m
[32m+[m[32m    "my_file.write('\\nAnd another line here.')"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 24,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "This is a new first line\n",[m
[32m+[m[32m      "This line is being appended to test.txt\n",[m
[32m+[m[32m      "And another line here.\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "my_file.seek(0)\n",[m
[32m+[m[32m    "print(my_file.read())"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 25,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "my_file.close()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### Appending with `%%writefile`\n",[m
[32m+[m[32m    "Jupyter notebook users can do the same thing using IPython cell magic:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 26,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Appending to test.txt\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "%%writefile -a test.txt\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "This is more text being appended to test.txt\n",[m
[32m+[m[32m    "And another line here."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Add a blank space if you want the first line to begin on its own line, as Jupyter won't recognize escape sequences like `\\n`"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## Aliases and Context Managers\n",[m
[32m+[m[32m    "You can assign temporary variable names as aliases, and manage the opening and closing of files automatically using a context manager:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 27,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "This is a new first line\n",[m
[32m+[m[32m      "\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "with open('test.txt','r') as txt:\n",[m
[32m+[m[32m    "    first_line = txt.readlines()[0]\n",[m
[32m+[m[32m    "    \n",[m
[32m+[m[32m    "print(first_line)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Note that the `with ... as ...:` context manager automatically closed `test.txt` after assigning the first line of text to first_line:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 28,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "ValueError",[m
[32m+[m[32m     "evalue": "I/O operation on closed file.",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [[m
[32m+[m[32m      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",[m
[32m+[m[32m      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",[m
[32m+[m[32m      "\u001b[1;32m<ipython-input-28-39ca4397fa0a>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mtxt\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mread\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",[m
[32m+[m[32m      "\u001b[1;31mValueError\u001b[0m: I/O operation on closed file."[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "txt.read()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## Iterating through a File"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 29,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "This is a new first line\n",[m
[32m+[m[32m      "This line is being appended to test.txt\n",[m
[32m+[m[32m      "And another line here.\n",[m
[32m+[m[32m      "This is more text being appended to test.txt\n",[m
[32m+[m[32m      "And another line here."[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "with open('test.txt','r') as txt:\n",[m
[32m+[m[32m    "    for line in txt:\n",[m
[32m+[m[32m    "        print(line, end='')  # the end='' argument removes extra linebreaks"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Great! Now you should be familiar with formatted string literals and working with text files.\n",[m
[32m+[m[32m    "## Next up: Working with PDF Text"[m
[32m+[m[32m   ][m
[32m+[m[32m  }[m
[32m+[m[32m ],[m
[32m+[m[32m "metadata": {[m
[32m+[m[32m  "kernelspec": {[m
[32m+[m[32m   "display_name": "Python 3 (ipykernel)",[m
[32m+[m[32m   "language": "python",[m
[32m+[m[32m   "name": "python3"[m
[32m+[m[32m  },[m
[32m+[m[32m  "language_info": {[m
[32m+[m[32m   "codemirror_mode": {[m
[32m+[m[32m    "name": "ipython",[m
[32m+[m[32m    "version": 3[m
[32m+[m[32m   },[m
[32m+[m[32m   "file_extension": ".py",[m
[32m+[m[32m   "mimetype": "text/x-python",[m
[32m+[m[32m   "name": "python",[m
[32m+[m[32m   "nbconvert_exporter": "python",[m
[32m+[m[32m   "pygments_lexer": "ipython3",[m
[32m+[m[32m   "version": "3.9.13"[m
[32m+[m[32m  }[m
[32m+[m[32m },[m
[32m+[m[32m "nbformat": 4,[m
[32m+[m[32m "nbformat_minor": 2[m
[32m+[m[32m}[m
[1mdiff --git a/00-Python-Text-Basics/01-Working-with-PDF-Text.ipynb b/00-Python-Text-Basics/01-Working-with-PDF-Text.ipynb[m
[1mnew file mode 100644[m
[1mindex 0000000..ff78fef[m
[1m--- /dev/null[m
[1m+++ b/00-Python-Text-Basics/01-Working-with-PDF-Text.ipynb[m
[36m@@ -0,0 +1,340 @@[m
[32m+[m[32m{[m
[32m+[m[32m "cells": [[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "___\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "<a href='http://www.pieriandata.com'> <img src='../Pierian_Data_Logo.png' /></a>\n",[m
[32m+[m[32m    "___"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Working with PDF Files\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Often you will have to deal with PDF files. There are [many libraries in Python for working with PDFs](https://reachtim.com/articles/PDF-Manipulation.html), each with their pros and cons, the most common one being **PyPDF2**. You can install it with (note the case-sensitivity, you need to make sure your capitilization matches):\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    pip install PyPDF2\n",[m
[32m+[m[32m    "    \n",[m
[32m+[m[32m    "Keep in mind that not every PDF file can be read with this library. PDFs that are too blurry, have a special encoding, encrypted, or maybe just created with a particular program that doesn't work well with PyPDF2 won't be able to be read. If you find yourself in this situation, try using the libraries linked above, but keep in mind, these may also not work. The reason for this is because of the many different parameters for a PDF and how non-standard the settings can be, text could be shown as an image instead of a utf-8 encoding. There are many parameters to consider in this aspect.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "As far as PyPDF2 is concerned, it can only read the text from a PDF document, it won't be able to grab images or other media files from a PDF.\n",[m
[32m+[m[32m    "___\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "## Working with PyPDF2\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Let's begin by showing the basics of the PyPDF2 library."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 1,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# note the capitalization\n",[m
[32m+[m[32m    "import PyPDF2"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## Reading PDFs\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "First we open a pdf, then create a reader object for it. Notice how we use the binary method of reading , 'rb', instead of just 'r'."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 2,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Notice we read it as a binary with 'rb'\n",[m
[32m+[m[32m    "f = open('US_Declaration.pdf','rb')"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 3,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "pdf_reader = PyPDF2.PdfFileReader(f)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 4,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "5"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 4,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "pdf_reader.numPages"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 5,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "page_one = pdf_reader.getPage(0)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "We can then extract the text:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 6,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "page_one_text = page_one.extractText()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 7,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "\"Declaration of IndependenceIN CONGRESS, July 4, 1776. The unanimous Declaration of the thirteen united States of America, When in the Course of human events, it becomes necessary for one people to dissolve the\\npolitical bands which have connected them with another, and to assume among the powers of the\\nearth, the separate and equal station to which the Laws of Nature and of Nature's God entitle\\n\\nthem, a decent respect to the opinions of mankind requires that they should declare the causes\\n\\nwhich impel them to the separation. \\nWe hold these truths to be self-evident, that all men are created equal, that they are endowed by\\n\\ntheir Creator with certain unalienable Rights, that among these are Life, Liberty and the pursuit\\nof Happiness.ŠThat to secure these rights, Governments are instituted among Men, deriving\\n\\ntheir just powers from the consent of the governed,ŠThat whenever any Form of Government\\nbecomes destructive of these ends, it is the Right of the People to alter or to abolish it, and to\\ninstitute new Government, laying its foundation on such principles and organizing its powers in\\nsuch form, as to them shall seem most likely to effect their Safety and Happiness. Prudence,\\n\\nindeed, will dictate that Governments long established should not be changed for light and\\ntransient causes; and accordingly all experience hath shewn, that mankind are more disposed to\\nsuffer, while evils are sufferable, than to right themselves by abolishing the forms to which they\\n\\nare accustomed. But when a long train of abuses and usurpations, pursuing invariably the same\\nObject evinces a design to reduce them under absolute Despotism, it is their right, it is their duty,\\nto throw off such Government, and to provide new Guards for their future security.ŠSuch has\\nbeen the patient sufferance of these Colonies; and such is now the necessity which constrains\\n\\nthem to alter their former Systems of Government. The history of the present King of Great\\n\\nBritain is a history of repeated injuries and usurpations, all having in direct object the\\nestablishment of an absolute Tyranny over these States. To prove this, let Facts be submitted to a\\ncandid world. He has refused his Assent to Laws, the most wholesome and necessary for the\\npublic good.\\nHe has forbidden his Governors to pass Laws of immediate and pressing\\nimportance, unless suspended in their operation till his Assent should be obtained;\\nand when so suspended, he has utterly neglected to attend to them.\\n\\nHe has refused to pass other Laws for the accommodation of large districts of\\npeople, unless those people would relinquish the right of Representation in the\\nLegislature, a right inestimable to them and formidable to tyrants only. \\n\\nHe has called together legislative bodies at places unusual, uncomfortable, and distant\\nfrom the depository of their public Records, for the sole purpose of fatiguing them into\\ncompliance with his measures.\\n\""[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 7,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "page_one_text"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 8,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "f.close()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## Adding to PDFs\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "We can not write to PDFs using Python because of the differences between the single string type of Python, and the variety of fonts, placements, and other parameters that a PDF could have.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "What we *can* do is copy pages and append pages to the end."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 9,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "f = open('US_Declaration.pdf','rb')\n",[m
[32m+[m[32m    "pdf_reader = PyPDF2.PdfFileReader(f)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 10,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "first_page = pdf_reader.getPage(0)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 11,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "pdf_writer = PyPDF2.PdfFileWriter()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 12,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "pdf_writer.addPage(first_page)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 13,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "pdf_output = open(\"Some_New_Doc.pdf\",\"wb\")"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 14,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "pdf_writer.write(pdf_output)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 15,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "pdf_output.close()\n",[m
[32m+[m[32m    "f.close()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Now we have copied a page and added it to another new document!"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "___"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## Simple Example\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Let's try to grab all the text from this PDF file:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 16,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "f = open('US_Declaration.pdf','rb')\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# List of every page's text.\n",[m
[32m+[m[32m    "# The index will correspond to the page number.\n",[m
[32m+[m[32m    "pdf_text = [0]  # zero is a placehoder to make page 1 = index 1\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "pdf_reader = PyPDF2.PdfFileReader(f)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for p in range(pdf_reader.numPages):\n",[m
[32m+[m[32m    "    \n",[m
[32m+[m[32m    "    page = pdf_reader.getPage(p)\n",[m
[32m+[m[32m    "    \n",[m
[32m+[m[32m    "    pdf_text.append(page.extractText())\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "f.close()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 17,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "[0,\n",[m
[32m+[m[32m       " \"Declaration of IndependenceIN CONGRESS, July 4, 1776. The unanimous Declaration of the thirteen united States of America, When in the Course of human events, it becomes necessary for one people to dissolve the\\npolitical bands which have connected them with another, and to assume among the powers of the\\nearth, the separate and equal station to which the Laws of Nature and of Nature's God entitle\\n\\nthem, a decent respect to the opinions of mankind requires that they should declare the causes\\n\\nwhich impel them to the separation. \\nWe hold these truths to be self-evident, that all men are created equal, that they are endowed by\\n\\ntheir Creator with certain unalienable Rights, that among these are Life, Liberty and the pursuit\\nof Happiness.ŠThat to secure these rights, Governments are instituted among Men, deriving\\n\\ntheir just powers from the consent of the governed,ŠThat whenever any Form of Government\\nbecomes destructive of these ends, it is the Right of the People to alter or to abolish it, and to\\ninstitute new Government, laying its foundation on such principles and organizing its powers in\\nsuch form, as to them shall seem most likely to effect their Safety and Happiness. Prudence,\\n\\nindeed, will dictate that Governments long established should not be changed for light and\\ntransient causes; and accordingly all experience hath shewn, that mankind are more disposed to\\nsuffer, while evils are sufferable, than to right themselves by abolishing the forms to which they\\n\\nare accustomed. But when a long train of abuses and usurpations, pursuing invariably the same\\nObject evinces a design to reduce them under absolute Despotism, it is their right, it is their duty,\\nto throw off such Government, and to provide new Guards for their future security.ŠSuch has\\nbeen the patient sufferance of these Colonies; and such is now the necessity which constrains\\n\\nthem to alter their former Systems of Government. The history of the present King of Great\\n\\nBritain is a history of repeated injuries and usurpations, all having in direct object the\\nestablishment of an absolute Tyranny over these States. To prove this, let Facts be submitted to a\\ncandid world. He has refused his Assent to Laws, the most wholesome and necessary for the\\npublic good.\\nHe has forbidden his Governors to pass Laws of immediate and pressing\\nimportance, unless suspended in their operation till his Assent should be obtained;\\nand when so suspended, he has utterly neglected to attend to them.\\n\\nHe has refused to pass other Laws for the accommodation of large districts of\\npeople, unless those people would relinquish the right of Representation in the\\nLegislature, a right inestimable to them and formidable to tyrants only. \\n\\nHe has called together legislative bodies at places unusual, uncomfortable, and distant\\nfrom the depository of their public Records, for the sole purpose of fatiguing them into\\ncompliance with his measures.\\n\",\n",[m
[32m+[m[32m       " 'He has dissolved Representative Houses repeatedly, for opposing with manlyfirmness his invasions on the rights of the people.He has refused for a long time, after such dissolutions, to cause others to beelected; whereby the Legislative powers, incapable of Annihilation, have returnedto the People at large for their exercise; the State remaining in the mean timeexposed to all the dangers of invasion from without, and convulsions within.He has endeavoured to prevent the population of these States; for that purposeobstructing the Laws for Naturalization of Foreigners; refusing to pass others toencourage their migrations hither, and raising the conditions of newAppropriations of Lands.He has obstructed the Administration of Justice, by refusing his Assent to Lawsfor establishing Judiciary powers.He has made Judges dependent on his Will alone, for the tenure of their offices,and the amount and payment of their salaries.He has erected a multitude of New Offices, and sent hither swarms of Officers toharrass our people, and eat out their substance.He has kept among us, in times of peace, Standing Armies without the Consent ofour legislatures.He has affected to render the Military independent of and superior to the Civil power.He has combined with others to subject us to a jurisdiction foreign to ourconstitution, and unacknowledged by our laws; giving his Assent to their Acts ofpretended Legislation:For Quartering large bodies of armed troops among us:For protecting them, by a mock Trial, from punishment for any Murders whichthey should commit on the Inhabitants of these States:For cutting off our Trade with all parts of the world:For imposing Taxes on us without our Consent: For depriving us in many cases,of the benefits of Trial by Jury:For transporting us beyond Seas to be tried for pretended offencesFor abolishing the free System of English Laws in a neighbouring Province,establishing therein an Arbitrary government, and enlarging its Boundaries so as',\n",[m
[32m+[m[32m       " 'to render it at once an example and fit instrument for introducing the sameabsolute rule into these Colonies:For taking away our Charters, abolishing our most valuable Laws, and alteringfundamentally the Forms of our Governments:For suspending our own Legislatures, and declaring themselves invested withpower to legislate for us in all cases whatsoever.He has abdicated Government here, by declaring us out of his Protection andwaging War against us.He has plundered our seas, ravaged our Coasts, burnt our towns, and destroyed thelives of our people.He is at this time transporting large Armies of foreign Mercenaries to compleatthe works of death, desolation and tyranny, already begun with circumstances ofCruelty & perfidy scarcely paralleled in the most barbarous ages, and totallyunworthy of the Head of a civilized nation.He has constrained our fellow Citizens taken Captive on the high Seas to bearArms against their Country, to become the executioners of their friends and\\nBrethren, or to fall themselves by their Hands.He has excited domestic insurrections amongst us, and has endeavoured to bringon the inhabitants of our frontiers, the merciless Indian Savages, whose known\\nrule of warfare, is an undistinguished destruction of all ages, sexes and conditions. In every stage of these Oppressions We have Petitioned for Redress in the most humble terms:Our repeated Petitions have been answered only by repeated injury. A Prince whose character isthus marked by every act which may define a Tyrant, is unfit to be the ruler of a free people. Nor have We been wanting in attentions to our Brittish brethren. We have warned them fromtime to time of attempts by their legislature to extend an unwarrantable jurisdiction over us. Wehave reminded them of the circumstances of our emigration and settlement here. We haveappealed to their native justice and magnanimity, and we have conjured them by the ties of ourcommon kindred to disavow these usurpations, which, would inevitably interrupt ourconnections and correspondence. They too have been deaf to the voice of justice and ofconsanguinity. We must, therefore, acquiesce in the necessity, which denounces our Separation,and hold them, as we hold the rest of mankind, Enemies in War, in Peace Friends. We, therefore, the Representatives of the united States of America, in General Congress,Assembled, appealing to the Supreme Judge of the world for the rectitude of our intentions, do,in the Name, and by Authority of the good People of these Colonies, solemnly publish anddeclare, That these United Colonies are, and of Right ought to be Free and Independent States;that they are Absolved from all Allegiance to the British Crown, and that all political connection',\n",[m
[32m+[m[32m       " 'between them and the State of Great Britain, is and ought to be totally dissolved; and that as Free\\n\\nand Independent States, they have full Power to levy War, conclude Peace, contract Alliances,\\nestablish Commerce, and to do all other Acts and Things which Independent States may of right\\n\\ndo. And for the support of this Declaration, with a firm reliance on the protection of divine\\nProvidence, we mutually pledge to each other our Lives, our Fortunes and our sacred Honor.\\n\\n[The 56 signatures on the Declaration were arranged in six columns:\\n] [Column 1]\\n Georgia:   Button Gwinnett\\n   Lyman \\nHall   George Walton \\n[Column 2]\\n North Carolina:   William Hooper\\n   Joseph Hewes\\n   John Penn\\n South Carolina:   Edward Ru\\ntledge   Thomas Heyward, Jr.\\n  Thomas Lynch, Jr.\\n  Arthur Middleton \\n[Column 3]\\n Massachusetts:   John Hancock\\n\\n Maryland:   Samuel Chase\\n\\n   William Paca\\n\\n   Thomas Stone\\n\\n   Charles Carroll of Carrollton\\n\\n Virginia:   George Wythe\\n\\n   Richard Henry Lee\\n\\n   Thomas Jefferson\\n\\n   Benjamin Harrison\\n\\n   Thomas Nelson, Jr.\\n\\n   Francis Lightfoot Lee\\n\\n   Carter Braxton \\n\\n[Column 4]\\n Pennsylvania:  Robert Morris\\n\\n   Benjamin Rush\\n   Benjamin Fran\\nklin   John Morton\\n',\n",[m
[32m+[m[32m       " '   George Clymer\\n   James Smith\\n   George Taylor\\n   James Wilson\\n   George Ross\\n Delaware:   Caesar Rodney\\n   George Read\\n   Thomas McKean \\n[Column 5]\\n New York:   Wi\\nlliam Floyd   Philip Livingston\\n   Francis L\\newis   Lewis Morris\\n New Jersey:   Richard Stockton\\n   John Witherspoon\\n   Francis Hopkinson\\n   John Hart\\n   Abraham Clark \\n[Column 6]\\n New Hampshire:   Josiah Bartlett\\n   William Whipple\\n Massachusetts:   Samuel Adams\\n   John Adams\\n   Robert Treat Paine\\n   Elbridge Gerry\\n Rhode Island:   Stephen Hopkins\\n   William Ellery\\n Connecticut:   Roger Sherman\\n   Samuel Huntington\\n   William Williams\\n   Oliver Wolcott\\n New Hampshire: Matthew Thornton\\n ']"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 17,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "pdf_text"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 21,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "He has dissolved Representative Houses repeatedly, for opposing with manlyfirmness his invasions on the rights of the people.He has refused for a long time, after such dissolutions, to cause others to beelected; whereby the Legislative powers, incapable of Annihilation, have returnedto the People at large for their exercise; the State remaining in the mean timeexposed to all the dangers of invasion from without, and convulsions within.He has endeavoured to prevent the population of these States; for that purposeobstructing the Laws for Naturalization of Foreigners; refusing to pass others toencourage their migrations hither, and raising the conditions of newAppropriations of Lands.He has obstructed the Administration of Justice, by refusing his Assent to Lawsfor establishing Judiciary powers.He has made Judges dependent on his Will alone, for the tenure of their offices,and the amount and payment of their salaries.He has erected a multitude of New Offices, and sent hither swarms of Officers toharrass our people, and eat out their substance.He has kept among us, in times of peace, Standing Armies without the Consent ofour legislatures.He has affected to render the Military independent of and superior to the Civil power.He has combined with others to subject us to a jurisdiction foreign to ourconstitution, and unacknowledged by our laws; giving his Assent to their Acts ofpretended Legislation:For Quartering large bodies of armed troops among us:For protecting them, by a mock Trial, from punishment for any Murders whichthey should commit on the Inhabitants of these States:For cutting off our Trade with all parts of the world:For imposing Taxes on us without our Consent: For depriving us in many cases,of the benefits of Trial by Jury:For transporting us beyond Seas to be tried for pretended offencesFor abolishing the free System of English Laws in a neighbouring Province,establishing therein an Arbitrary government, and enlarging its Boundaries so as\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "print(pdf_text[2])"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### Excellent work! \n",[m
[32m+[m[32m    "That is all for PyPDF2 for now, remember that this won't work with every PDF file and is limited in its scope to only the text of PDFs.\n",[m
[32m+[m[32m    "## Next up: Regular Expressions"[m
[32m+[m[32m   ][m
[32m+[m[32m  }[m
[32m+[m[32m ],[m
[32m+[m[32m "metadata": {[m
[32m+[m[32m  "kernelspec": {[m
[32m+[m[32m   "display_name": "Python 3 (ipykernel)",[m
[32m+[m[32m   "language": "python",[m
[32m+[m[32m   "name": "python3"[m
[32m+[m[32m  },[m
[32m+[m[32m  "language_info": {[m
[32m+[m[32m   "codemirror_mode": {[m
[32m+[m[32m    "name": "ipython",[m
[32m+[m[32m    "version": 3[m
[32m+[m[32m   },[m
[32m+[m[32m   "file_extension": ".py",[m
[32m+[m[32m   "mimetype": "text/x-python",[m
[32m+[m[32m   "name": "python",[m
[32m+[m[32m   "nbconvert_exporter": "python",[m
[32m+[m[32m   "pygments_lexer": "ipython3",[m
[32m+[m[32m   "version": "3.9.13"[m
[32m+[m[32m  }[m
[32m+[m[32m },[m
[32m+[m[32m "nbformat": 4,[m
[32m+[m[32m "nbformat_minor": 2[m
[32m+[m[32m}[m
[1mdiff --git a/00-Python-Text-Basics/02-Regular-Expressions.ipynb b/00-Python-Text-Basics/02-Regular-Expressions.ipynb[m
[1mnew file mode 100644[m
[1mindex 0000000..38a5f2a[m
[1m--- /dev/null[m
[1m+++ b/00-Python-Text-Basics/02-Regular-Expressions.ipynb[m
[36m@@ -0,0 +1,1246 @@[m
[32m+[m[32m{[m
[32m+[m[32m "cells": [[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "___\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "<a href='http://www.pieriandata.com'> <img src='../Pierian_Data_Logo.png' /></a>\n",[m
[32m+[m[32m    "___"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Regular Expressions\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Regular Expressions (sometimes called regex for short) allow a user to search for strings using almost any sort of rule they can come up with. For example, finding all capital letters in a string, or finding a phone number in a document. \n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Regular expressions are notorious for their seemingly strange syntax. This strange syntax is a byproduct of their flexibility. Regular expressions have to be able to filter out any string pattern you can imagine, which is why they have a complex string pattern format.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Regular expressions are handled using Python's built-in **re** library. See [the docs](https://docs.python.org/3/library/re.html) for more information."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Let's begin by explaining how to search for basic patterns in a string!"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## Searching for Basic Patterns\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Let's imagine that we have the following string:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 1,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "text = \"The agent's phone number is 408-555-1234. Call soon!\""[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "We'll start off by trying to find out if the string \"phone\" is inside the text string. Now we could quickly do this with:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 2,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "True"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 2,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "'phone' in text"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "But let's show the format for regular expressions, because later on we will be searching for patterns that won't have such a simple solution."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 3,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "import re"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 4,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "pattern = 'phone'"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 5,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "<_sre.SRE_Match object; span=(12, 17), match='phone'>"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 5,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "re.search(pattern,text)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 6,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "pattern = \"NOT IN TEXT\""[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 7,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "re.search(pattern,text)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Now we've seen that re.search() will take the pattern, scan the text, and then returns a Match object. If no pattern is found, a None is returned (in Jupyter Notebook this just means that nothing is output below the cell).\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Let's take a closer look at this Match object."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 8,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "pattern = 'phone'"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 9,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "match = re.search(pattern,text)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 10,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "<_sre.SRE_Match object; span=(12, 17), match='phone'>"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 10,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "match"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Notice the span, there is also a start and end index information."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 11,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "(12, 17)"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 11,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "match.span()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 12,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "12"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 12,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "match.start()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 13,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "17"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 13,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "match.end()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "But what if the pattern occurs more than once?"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 14,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "text = \"my phone is a new phone\""[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 15,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "match = re.search(\"phone\",text)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 16,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "(3, 8)"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 16,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "match.span()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Notice it only matches the first instance. If we wanted a list of all matches, we can use .findall() method:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 17,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "matches = re.findall(\"phone\",text)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 18,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "['phone', 'phone']"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 18,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "matches"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 19,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "2"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 19,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "len(matches)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "To get actual match objects, use the iterator:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 20,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "(3, 8)\n",[m
[32m+[m[32m      "(18, 23)\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "for match in re.finditer(\"phone\",text):\n",[m
[32m+[m[32m    "    print(match.span())"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "If you wanted the actual text that matched, you can use the .group() method."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 21,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "'phone'"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 21,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "match.group()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Patterns\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "So far we've learned how to search for a basic string. What about more complex examples? Such as trying to find a telephone number in a large string of text? Or an email address?\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "We could just use search method if we know the exact phone or email, but what if we don't know it? We may know the general format, and we can use that along with regular expressions to search the document for strings that match a particular pattern.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "This is where the syntax may appear strange at first, but take your time with this; often it's just a matter of looking up the pattern code.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Let's begin!"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## Identifiers for Characters in Patterns\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Characters such as a digit or a single string have different codes that represent them. You can use these to build up a pattern string. Notice how these make heavy use of the backwards slash \\ . Because of this when defining a pattern string for regular expression we use the format:\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    r'mypattern'\n",[m
[32m+[m[32m    "    \n",[m
[32m+[m[32m    "placing the r in front of the string allows python to understand that the \\ in the pattern string are not meant to be escape slashes.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Below you can find a table of all the possible identifiers:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "<table ><tr><th>Character</th><th>Description</th><th>Example Pattern Code</th><th >Exammple Match</th></tr>\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "<tr ><td><span >\\d</span></td><td>A digit</td><td>file_\\d\\d</td><td>file_25</td></tr>\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "<tr ><td><span >\\w</span></td><td>Alphanumeric</td><td>\\w-\\w\\w\\w</td><td>A-b_1</td></tr>\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "<tr ><td><span >\\s</span></td><td>White space</td><td>a\\sb\\sc</td><td>a b c</td></tr>\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "<tr ><td><span >\\D</span></td><td>A non digit</td><td>\\D\\D\\D</td><td>ABC</td></tr>\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "<tr ><td><span >\\W</span></td><td>Non-alphanumeric</td><td>\\W\\W\\W\\W\\W</td><td>*-+=)</td></tr>\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "<tr ><td><span >\\S</span></td><td>Non-whitespace</td><td>\\S\\S\\S\\S</td><td>Yoyo</td></tr></table>"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "For example:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 22,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "text = \"My telephone number is 408-555-1234\""[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 23,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "phone = re.search(r'\\d\\d\\d-\\d\\d\\d-\\d\\d\\d\\d',text)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 24,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "'408-555-1234'"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 24,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "phone.group()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Notice the repetition of \\d. That is a bit of an annoyance, especially if we are looking for very long strings of numbers. Let's explore the possible quantifiers.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "## Quantifiers\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Now that we know the special character designations, we can use them along with quantifiers to define how many we expect."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "<table ><tr><th>Character</th><th>Description</th><th>Example Pattern Code</th><th >Exammple Match</th></tr>\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "<tr ><td><span >+</span></td><td>Occurs one or more times</td><td>\tVersion \\w-\\w+</td><td>Version A-b1_1</td></tr>\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "<tr ><td><span >{3}</span></td><td>Occurs exactly 3 times</td><td>\\D{3}</td><td>abc</td></tr>\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "<tr ><td><span >{2,4}</span></td><td>Occurs 2 to 4 times</td><td>\\d{2,4}</td><td>123</td></tr>\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "<tr ><td><span >{3,}</span></td><td>Occurs 3 or more</td><td>\\w{3,}</td><td>anycharacters</td></tr>\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "<tr ><td><span >\\*</span></td><td>Occurs zero or more times</td><td>A\\*B\\*C*</td><td>AAACC</td></tr>\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "<tr ><td><span >?</span></td><td>Once or none</td><td>plurals?</td><td>plural</td></tr></table>"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Let's rewrite our pattern using these quantifiers:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 25,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "<_sre.SRE_Match object; span=(23, 35), match='408-555-1234'>"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 25,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "re.search(r'\\d{3}-\\d{3}-\\d{4}',text)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## Groups\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "What if we wanted to do two tasks, find phone numbers, but also be able to quickly extract their area code (the first three digits). We can use groups for any general task that involves grouping together regular expressions (so that we can later break them down). \n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Using the phone number example, we can separate groups of regular expressions using parentheses:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 26,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "phone_pattern = re.compile(r'(\\d{3})-(\\d{3})-(\\d{4})')"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 27,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "results = re.search(phone_pattern,text)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 28,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "'408-555-1234'"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 28,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# The entire result\n",[m
[32m+[m[32m    "results.group()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 29,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "'408'"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 29,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Can then also call by group position.\n",[m
[32m+[m[32m    "# remember groups were separated by parentheses ()\n",[m
[32m+[m[32m    "# Something to note is that group ordering starts at 1. Passing in 0 returns everything\n",[m
[32m+[m[32m    "results.group(1)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 30,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "'555'"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 30,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "results.group(2)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 31,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "'1234'"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 31,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "results.group(3)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 32,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "IndexError",[m
[32m+[m[32m     "evalue": "no such group",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [[m
[32m+[m[32m      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",[m
[32m+[m[32m      "\u001b[1;31mIndexError\u001b[0m                                Traceback (most recent call last)",[m
[32m+[m[32m      "\u001b[1;32m<ipython-input-32-79a918a9b5dc>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;31m# We only had three groups of parentheses\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 2\u001b[1;33m \u001b[0mresults\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mgroup\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m4\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",[m
[32m+[m[32m      "\u001b[1;31mIndexError\u001b[0m: no such group"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# We only had three groups of parentheses\n",[m
[32m+[m[32m    "results.group(4)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## Additional Regex Syntax\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "### Or operator |\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Use the pipe operator to have an **or** statment. For example"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 33,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "<_sre.SRE_Match object; span=(5, 8), match='man'>"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 33,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "re.search(r\"man|woman\",\"This man was here.\")"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 34,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "<_sre.SRE_Match object; span=(5, 10), match='woman'>"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 34,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "re.search(r\"man|woman\",\"This woman was here.\")"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### The Wildcard Character\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Use a \"wildcard\" as a placement that will match any character placed there. You can use a simple period **.** for this. For example:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 35,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "['cat', 'hat', 'sat']"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 35,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "re.findall(r\".at\",\"The cat in the hat sat here.\")"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 36,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "['bat', 'lat']"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 36,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "re.findall(r\".at\",\"The bat went splat\")"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Notice how we only matched the first 3 letters, that is because we need a **.** for each wildcard letter. Or use the quantifiers described above to set its own rules."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 37,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "['e bat', 'splat']"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 37,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "re.findall(r\"...at\",\"The bat went splat\")"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "However this still leads the problem to grabbing more beforehand. Really we only want words that end with \"at\"."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 38,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "['bat', 'splat']"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 38,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# One or more non-whitespace that ends with 'at'\n",[m
[32m+[m[32m    "re.findall(r'\\S+at',\"The bat went splat\")"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### Starts With and Ends With\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "We can use the **^** to signal starts with, and the **$** to signal ends with:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 39,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "['2']"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 39,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Ends with a number\n",[m
[32m+[m[32m    "re.findall(r'\\d$','This ends with a number 2')"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 40,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "['1']"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 40,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Starts with a number\n",[m
[32m+[m[32m    "re.findall(r'^\\d','1 is the loneliest number.')"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Note that this is for the entire string, not individual words!"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### Exclusion\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "To exclude characters, we can use the **^** symbol in conjunction with a set of brackets **[]**. Anything inside the brackets is excluded. For example:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 41,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "phrase = \"there are 3 numbers 34 inside 5 this sentence.\""[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 42,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "['t',\n",[m
[32m+[m[32m       " 'h',\n",[m
[32m+[m[32m       " 'e',\n",[m
[32m+[m[32m       " 'r',\n",[m
[32m+[m[32m       " 'e',\n",[m
[32m+[m[32m       " ' ',\n",[m
[32m+[m[32m       " 'a',\n",[m
[32m+[m[32m       " 'r',\n",[m
[32m+[m[32m       " 'e',\n",[m
[32m+[m[32m       " ' ',\n",[m
[32m+[m[32m       " ' ',\n",[m
[32m+[m[32m       " 'n',\n",[m
[32m+[m[32m       " 'u',\n",[m
[32m+[m[32m       " 'm',\n",[m
[32m+[m[32m       " 'b',\n",[m
[32m+[m[32m       " 'e',\n",[m
[32m+[m[32m       " 'r',\n",[m
[32m+[m[32m       " 's',\n",[m
[32m+[m[32m       " ' ',\n",[m
[32m+[m[32m       " ' ',\n",[m
[32m+[m[32m       " 'i',\n",[m
[32m+[m[32m       " 'n',\n",[m
[32m+[m[32m       " 's',\n",[m
[32m+[m[32m       " 'i',\n",[m
[32m+[m[32m       " 'd',\n",[m
[32m+[m[32m       " 'e',\n",[m
[32m+[m[32m       " ' ',\n",[m
[32m+[m[32m       " ' ',\n",[m
[32m+[m[32m       " 't',\n",[m
[32m+[m[32m       " 'h',\n",[m
[32m+[m[32m       " 'i',\n",[m
[32m+[m[32m       " 's',\n",[m
[32m+[m[32m       " ' ',\n",[m
[32m+[m[32m       " 's',\n",[m
[32m+[m[32m       " 'e',\n",[m
[32m+[m[32m       " 'n',\n",[m
[32m+[m[32m       " 't',\n",[m
[32m+[m[32m       " 'e',\n",[m
[32m+[m[32m       " 'n',\n",[m
[32m+[m[32m       " 'c',\n",[m
[32m+[m[32m       " 'e',\n",[m
[32m+[m[32m       " '.']"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 42,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "re.findall(r'[^\\d]',phrase)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "To get the words back together, use a + sign "[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 43,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "['there are ', ' numbers ', ' inside ', ' this sentence.']"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 43,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "re.findall(r'[^\\d]+',phrase)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "We can use this to remove punctuation from a sentence."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 44,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "test_phrase = 'This is a string! But it has punctuation. How can we remove it?'"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 45,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "['This',\n",[m
[32m+[m[32m       " 'is',\n",[m
[32m+[m[32m       " 'a',\n",[m
[32m+[m[32m       " 'string',\n",[m
[32m+[m[32m       " 'But',\n",[m
[32m+[m[32m       " 'it',\n",[m
[32m+[m[32m       " 'has',\n",[m
[32m+[m[32m       " 'punctuation',\n",[m
[32m+[m[32m       " 'How',\n",[m
[32m+[m[32m       " 'can',\n",[m
[32m+[m[32m       " 'we',\n",[m
[32m+[m[32m       " 'remove',\n",[m
[32m+[m[32m       " 'it']"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 45,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "re.findall('[^!.? ]+',test_phrase)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 46,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "clean = ' '.join(re.findall('[^!.? ]+',test_phrase))"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 47,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "'This is a string But it has punctuation How can we remove it'"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 47,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "clean"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## Brackets for Grouping\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "As we showed above we can use brackets to group together options, for example if we wanted to find hyphenated words:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 48,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "text = 'Only find the hypen-words in this sentence. But you do not know how long-ish they are'"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 49,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "['hypen-words', 'long-ish']"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 49,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "re.findall(r'[\\w]+-[\\w]+',text)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## Parentheses for Multiple Options\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "If we have multiple options for matching, we can use parentheses to list out these options. For Example:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 50,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Find words that start with cat and end with one of these options: 'fish','nap', or 'claw'\n",[m
[32m+[m[32m    "text = 'Hello, would you like some catfish?'\n",[m
[32m+[m[32m    "texttwo = \"Hello, would you like to take a catnap?\"\n",[m
[32m+[m[32m    "textthree = \"Hello, have you seen this caterpillar?\""[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 51,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "<_sre.SRE_Match object; span=(27, 34), match='catfish'>"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 51,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "re.search(r'cat(fish|nap|claw)',text)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 52,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "<_sre.SRE_Match object; span=(32, 38), match='catnap'>"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 52,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "re.search(r'cat(fish|nap|claw)',texttwo)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 53,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# None returned\n",[m
[32m+[m[32m    "re.search(r'cat(fish|nap|claw)',textthree)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### Conclusion\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Excellent work! For full information on all possible patterns, check out: https://docs.python.org/3/howto/regex.html"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## Next up: Python Text Basics Assessment"[m
[32m+[m[32m   ][m
[32m+[m[32m  }[m
[32m+[m[32m ],[m
[32m+[m[32m "metadata": {[m
[32m+[m[32m  "kernelspec": {[m
[32m+[m[32m   "display_name": "Python 3 (ipykernel)",[m
[32m+[m[32m   "language": "python",[m
[32m+[m[32m   "name": "python3"[m
[32m+[m[32m  },[m
[32m+[m[32m  "language_info": {[m
[32m+[m[32m   "codemirror_mode": {[m
[32m+[m[32m    "name": "ipython",[m
[32m+[m[32m    "version": 3[m
[32m+[m[32m   },[m
[32m+[m[32m   "file_extension": ".py",[m
[32m+[m[32m   "mimetype": "text/x-python",[m
[32m+[m[32m   "name": "python",[m
[32m+[m[32m   "nbconvert_exporter": "python",[m
[32m+[m[32m   "pygments_lexer": "ipython3",[m
[32m+[m[32m   "version": "3.9.13"[m
[32m+[m[32m  }[m
[32m+[m[32m },[m
[32m+[m[32m "nbformat": 4,[m
[32m+[m[32m "nbformat_minor": 2[m
[32m+[m[32m}[m
[1mdiff --git a/00-Python-Text-Basics/03-Python-Text-Basics-Assessment.ipynb b/00-Python-Text-Basics/03-Python-Text-Basics-Assessment.ipynb[m
[1mnew file mode 100644[m
[1mindex 0000000..b50ed3d[m
[1m--- /dev/null[m
[1m+++ b/00-Python-Text-Basics/03-Python-Text-Basics-Assessment.ipynb[m
[36m@@ -0,0 +1,535 @@[m
[32m+[m[32m{[m
[32m+[m[32m "cells": [[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "___\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "<a href='http://www.pieriandata.com'> <img src='../Pierian_Data_Logo.png' /></a>\n",[m
[32m+[m[32m    "___"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Python Text Basics Assessment\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Welcome to your assessment! Complete the tasks described in bold below by typing the relevant code in the cells.<br>\n",[m
[32m+[m[32m    "You can compare your answers to the Solutions notebook provided in this folder."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## f-Strings\n",[m
[32m+[m[32m    "#### 1. Print an f-string that displays `NLP stands for Natural Language Processing` using the variables provided."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 6,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "NLP stands for Natural Language Processing\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "abbr = 'NLP'\n",[m
[32m+[m[32m    "full_text = 'Natural Language Processing'\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Enter your code here:\n",[m
[32m+[m[32m    "print(f\"{abbr} stands for {full_text}\")"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## Files\n",[m
[32m+[m[32m    "#### 2. Create a file in the current working directory called `contacts.txt` by running the cell below:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 31,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Overwriting contacts.txt\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "%%writefile contacts.txt\n",[m
[32m+[m[32m    "First_Name Last_Name, Title, Extension, Email"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### 3. Open the file and use .read() to save the contents of the file to a string called `fields`.  Make sure the file is closed at the end."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 8,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "myfile = open(\"contacts.txt\")"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 9,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "'First_Name Last_Name, Title, Extension, Email\\n'"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 9,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "myfile.readlines()[0]"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 9,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "0"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 9,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "myfile.seek(0)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 3,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "'First_Name Last_Name, Title, Extension, Email'"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 3,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Write your code here:\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    \n",[m
[32m+[m[32m    "# Run fields to see the contents of contacts.txt:\n",[m
[32m+[m[32m    "fields"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## Working with PDF Files\n",[m
[32m+[m[32m    "#### 4. Use PyPDF2 to open the file `Business_Proposal.pdf`. Extract the text of page 2."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 10,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "import PyPDF2"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 11,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "f = open('Business_Proposal.pdf','rb')"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 12,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "readpdf = PyPDF2.PdfFileReader(f)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 13,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "2"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 13,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "readpdf.numPages"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 14,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "page_two_text = readpdf.getPage(1).extractText()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 15,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "AUTHORS:  \n",[m
[32m+[m[32m      "Amy Baker, Finance Chair, x345, abaker@ourcompany.com  \n",[m
[32m+[m[32m      "Chris Donaldson, Accounting Dir., x621, cdonaldson@ourcompany.com  \n",[m
[32m+[m[32m      "Erin Freeman, Sr. VP, x879, efreeman@ourcompany.com  \n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "print(page_two_text)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 16,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "f.close()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 4,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "AUTHORS:\n",[m
[32m+[m[32m      " \n",[m
[32m+[m[32m      "Amy Baker, Finance Chair, x345, abaker@ourcompany.com\n",[m
[32m+[m[32m      " \n",[m
[32m+[m[32m      "Chris Donaldson, Accounting Dir., x621, cdonaldson@ourcompany.com\n",[m
[32m+[m[32m      " \n",[m
[32m+[m[32m      "Erin Freeman, Sr. VP, x879, efreeman@ourcompany.com\n",[m
[32m+[m[32m      " \n",[m
[32m+[m[32m      "\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Perform import\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Open the file as a binary object\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Use PyPDF2 to read the text of the file\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Get the text from page 2 (CHALLENGE: Do this in one step!)\n",[m
[32m+[m[32m    "page_two_text = \n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Close the file\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Print the contents of page_two_text\n",[m
[32m+[m[32m    "print(page_two_text)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### 5. Open the file `contacts.txt` in append mode. Add the text of page 2 from above to `contacts.txt`.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "#### CHALLENGE: See if you can remove the word \"AUTHORS:\""[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 32,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "f = open(\"contacts.txt\",\"a+\")"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 33,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "newtxt = page_two_text.replace(\"AUTHORS:\" , \"\").strip()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 34,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "175"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 34,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "f.write(newtxt)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 35,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "f.close()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 5,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "First_Name Last_Name, Title, Extension, EmailAUTHORS:\n",[m
[32m+[m[32m      " \n",[m
[32m+[m[32m      "Amy Baker, Finance Chair, x345, abaker@ourcompany.com\n",[m
[32m+[m[32m      " \n",[m
[32m+[m[32m      "Chris Donaldson, Accounting Dir., x621, cdonaldson@ourcompany.com\n",[m
[32m+[m[32m      " \n",[m
[32m+[m[32m      "Erin Freeman, Sr. VP, x879, efreeman@ourcompany.com\n",[m
[32m+[m[32m      " \n",[m
[32m+[m[32m      "\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Simple Solution:\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 7,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "First_Name Last_Name, Title, Extension, Email\n",[m
[32m+[m[32m      " \n",[m
[32m+[m[32m      "Amy Baker, Finance Chair, x345, abaker@ourcompany.com\n",[m
[32m+[m[32m      " \n",[m
[32m+[m[32m      "Chris Donaldson, Accounting Dir., x621, cdonaldson@ourcompany.com\n",[m
[32m+[m[32m      " \n",[m
[32m+[m[32m      "Erin Freeman, Sr. VP, x879, efreeman@ourcompany.com\n",[m
[32m+[m[32m      " \n",[m
[32m+[m[32m      "\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# CHALLENGE Solution (re-run the %%writefile cell above to obtain an unmodified contacts.txt file):\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## Regular Expressions\n",[m
[32m+[m[32m    "#### 6. Using the `page_two_text` variable created above, extract any email addresses that were contained in the file `Business_Proposal.pdf`."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 36,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "import re\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 37,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "'AUTHORS:  \\nAmy Baker, Finance Chair, x345, abaker@ourcompany.com  \\nChris Donaldson, Accounting Dir., x621, cdonaldson@ourcompany.com  \\nErin Freeman, Sr. VP, x879, efreeman@ourcompany.com  '"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 37,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "page_two_text"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 38,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "pattern = \"\\w*@ourcompany.com\""[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 39,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "['abaker@ourcompany.com',\n",[m
[32m+[m[32m       " 'cdonaldson@ourcompany.com',\n",[m
[32m+[m[32m       " 'efreeman@ourcompany.com']"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 39,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "re.findall(pattern,page_two_text)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 8,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "['abaker@ourcompany.com',\n",[m
[32m+[m[32m       " 'cdonaldson@ourcompany.com',\n",[m
[32m+[m[32m       " 'efreeman@ourcompany.com']"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 8,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "import re\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Enter your regex pattern here. This may take several tries!\n",[m
[32m+[m[32m    "pattern = \n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "re.findall(pattern, page_two_text)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### Great job!"[m
[32m+[m[32m   ][m
[32m+[m[32m  }[m
[32m+[m[32m ],[m
[32m+[m[32m "metadata": {[m
[32m+[m[32m  "kernelspec": {[m
[32m+[m[32m   "display_name": "Python 3 (ipykernel)",[m
[32m+[m[32m   "language": "python",[m
[32m+[m[32m   "name": "python3"[m
[32m+[m[32m  },[m
[32m+[m[32m  "language_info": {[m
[32m+[m[32m   "codemirror_mode": {[m
[32m+[m[32m    "name": "ipython",[m
[32m+[m[32m    "version": 3[m
[32m+[m[32m   },[m
[32m+[m[32m   "file_extension": ".py",[m
[32m+[m[32m   "mimetype": "text/x-python",[m
[32m+[m[32m   "name": "python",[m
[32m+[m[32m   "nbconvert_exporter": "python",[m
[32m+[m[32m   "pygments_lexer": "ipython3",[m
[32m+[m[32m   "version": "3.9.13"[m
[32m+[m[32m  }[m
[32m+[m[32m },[m
[32m+[m[32m "nbformat": 4,[m
[32m+[m[32m "nbformat_minor": 2[m
[32m+[m[32m}[m
[1mdiff --git a/00-Python-Text-Basics/04-Python-Text-Basics-Assessment-Solutions.ipynb b/00-Python-Text-Basics/04-Python-Text-Basics-Assessment-Solutions.ipynb[m
[1mnew file mode 100644[m
[1mindex 0000000..557c619[m
[1m--- /dev/null[m
[1m+++ b/00-Python-Text-Basics/04-Python-Text-Basics-Assessment-Solutions.ipynb[m
[36m@@ -0,0 +1,295 @@[m
[32m+[m[32m{[m
[32m+[m[32m "cells": [[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "___\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "<a href='http://www.pieriandata.com'> <img src='../Pierian_Data_Logo.png' /></a>\n",[m
[32m+[m[32m    "___"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Python Text Basics Assessment - Solutions\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Welcome to your assessment! Complete the tasks described in bold below by typing the relevant code in the cells."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## f-Strings\n",[m
[32m+[m[32m    "#### 1. Print an f-string that displays `NLP stands for Natural Language Processing` using the variables provided."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 1,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "NLP stands for Natural Language Processing\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "abbr = 'NLP'\n",[m
[32m+[m[32m    "full_text = 'Natural Language Processing'\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Enter your code here:\n",[m
[32m+[m[32m    "print(f'{abbr} stands for {full_text}')"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## Files\n",[m
[32m+[m[32m    "#### 2. Create a file in the current working directory called `contacts.txt` by running the cell below:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 6,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Overwriting contacts.txt\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "%%writefile contacts.txt\n",[m
[32m+[m[32m    "First_Name Last_Name, Title, Extension, Email"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### 3. Open the file and use .read() to save the contents of the file to a string called `fields`.  Make sure the file is closed at the end."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 3,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "'First_Name Last_Name, Title, Extension, Email'"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 3,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Write your code here:\n",[m
[32m+[m[32m    "with open('contacts.txt') as c:\n",[m
[32m+[m[32m    "    fields = c.read()\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    \n",[m
[32m+[m[32m    "# Run fields to see the contents of contacts.txt:\n",[m
[32m+[m[32m    "fields"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## Working with PDF Files\n",[m
[32m+[m[32m    "#### 4. Use PyPDF2 to open the file `Business_Proposal.pdf`. Extract the text of page 2."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 4,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "AUTHORS:\n",[m
[32m+[m[32m      " \n",[m
[32m+[m[32m      "Amy Baker, Finance Chair, x345, abaker@ourcompany.com\n",[m
[32m+[m[32m      " \n",[m
[32m+[m[32m      "Chris Donaldson, Accounting Dir., x621, cdonaldson@ourcompany.com\n",[m
[32m+[m[32m      " \n",[m
[32m+[m[32m      "Erin Freeman, Sr. VP, x879, efreeman@ourcompany.com\n",[m
[32m+[m[32m      " \n",[m
[32m+[m[32m      "\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Perform import\n",[m
[32m+[m[32m    "import PyPDF2\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Open the file as a binary object\n",[m
[32m+[m[32m    "f = open('Business_Proposal.pdf','rb')\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Use PyPDF2 to read the text of the file\n",[m
[32m+[m[32m    "pdf_reader = PyPDF2.PdfFileReader(f)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Get the text from page 2 (CHALLENGE: Do this in one step!)\n",[m
[32m+[m[32m    "page_two_text = pdf_reader.getPage(1).extractText()\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Close the file\n",[m
[32m+[m[32m    "f.close()\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Print the contents of page_two_text\n",[m
[32m+[m[32m    "print(page_two_text)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### 5. Open the file `contacts.txt` in append mode. Add the text of page 2 from above to `contacts.txt`.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "#### CHALLENGE: See if you can remove the word \"AUTHORS:\""[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 5,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "First_Name Last_Name, Title, Extension, EmailAUTHORS:\n",[m
[32m+[m[32m      " \n",[m
[32m+[m[32m      "Amy Baker, Finance Chair, x345, abaker@ourcompany.com\n",[m
[32m+[m[32m      " \n",[m
[32m+[m[32m      "Chris Donaldson, Accounting Dir., x621, cdonaldson@ourcompany.com\n",[m
[32m+[m[32m      " \n",[m
[32m+[m[32m      "Erin Freeman, Sr. VP, x879, efreeman@ourcompany.com\n",[m
[32m+[m[32m      " \n",[m
[32m+[m[32m      "\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Simple Solution:\n",[m
[32m+[m[32m    "with open('contacts.txt','a+') as c:\n",[m
[32m+[m[32m    "    c.write(page_two_text)\n",[m
[32m+[m[32m    "    c.seek(0)\n",[m
[32m+[m[32m    "    print(c.read())"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 7,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "First_Name Last_Name, Title, Extension, Email\n",[m
[32m+[m[32m      " \n",[m
[32m+[m[32m      "Amy Baker, Finance Chair, x345, abaker@ourcompany.com\n",[m
[32m+[m[32m      " \n",[m
[32m+[m[32m      "Chris Donaldson, Accounting Dir., x621, cdonaldson@ourcompany.com\n",[m
[32m+[m[32m      " \n",[m
[32m+[m[32m      "Erin Freeman, Sr. VP, x879, efreeman@ourcompany.com\n",[m
[32m+[m[32m      " \n",[m
[32m+[m[32m      "\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# CHALLENGE Solution (re-run the %%writefile cell above to obtain an unmodified contacts.txt file):\n",[m
[32m+[m[32m    "with open('contacts.txt','a+') as c:\n",[m
[32m+[m[32m    "    c.write(page_two_text[8:])\n",[m
[32m+[m[32m    "    c.seek(0)\n",[m
[32m+[m[32m    "    print(c.read())"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## Regular Expressions\n",[m
[32m+[m[32m    "#### 6. Using the `page_two_text` variable created above, extract any email addresses that were contained in the file `Business_Proposal.pdf`."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 8,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "['abaker@ourcompany.com',\n",[m
[32m+[m[32m       " 'cdonaldson@ourcompany.com',\n",[m
[32m+[m[32m       " 'efreeman@ourcompany.com']"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 8,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "import re\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Enter your regex pattern here. This may take several tries!\n",[m
[32m+[m[32m    "pattern = r'\\w+@\\w+.\\w{3}'\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "re.findall(pattern, page_two_text)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### Great job!"[m
[32m+[m[32m   ][m
[32m+[m[32m  }[m
[32m+[m[32m ],[m
[32m+[m[32m "metadata": {[m
[32m+[m[32m  "kernelspec": {[m
[32m+[m[32m   "display_name": "Python 3",[m
[32m+[m[32m   "language": "python",[m
[32m+[m[32m   "name": "python3"[m
[32m+[m[32m  },[m
[32m+[m[32m  "language_info": {[m
[32m+[m[32m   "codemirror_mode": {[m
[32m+[m[32m    "name": "ipython",[m
[32m+[m[32m    "version": 3[m
[32m+[m[32m   },[m
[32m+[m[32m   "file_extension": ".py",[m
[32m+[m[32m   "mimetype": "text/x-python",[m
[32m+[m[32m   "name": "python",[m
[32m+[m[32m   "nbconvert_exporter": "python",[m
[32m+[m[32m   "pygments_lexer": "ipython3",[m
[32m+[m[32m   "version": "3.6.2"[m
[32m+[m[32m  }[m
[32m+[m[32m },[m
[32m+[m[32m "nbformat": 4,[m
[32m+[m[32m "nbformat_minor": 2[m
[32m+[m[32m}[m
[1mdiff --git a/00-Python-Text-Basics/Business_Proposal.pdf b/00-Python-Text-Basics/Business_Proposal.pdf[m
[1mnew file mode 100644[m
[1mindex 0000000..2b6e633[m
[1m--- /dev/null[m
[1m+++ b/00-Python-Text-Basics/Business_Proposal.pdf[m
[36m@@ -0,0 +1,40 @@[m
[32m+[m[32m           Business Proposal[m
[32m+[m
[32m+[m[32m                       The Revolution is Coming[m
[32m+[m
[32m+[m[32mLeverage agile frameworks to provide a robust synopsis for high level[m
[32m+[m[32moverviews. Iterative approaches to corporate strategy foster collaborative[m
[32m+[m[32mthinking to further the overall value proposition. Organically grow the[m
[32m+[m[32mholistic world view of disruptive innovation via workplace diversity and[m
[32m+[m[32mempowerment.[m
[32m+[m
[32m+[m[32mBring to the table win-win survival strategies to ensure proactive[m
[32m+[m[32mdomination. At the end of the day, going forward, a new normal that has[m
[32m+[m[32mevolved from generation X is on the runway heading towards a streamlined[m
[32m+[m[32mcloud solution. User generated content in real-time will have multiple[m
[32m+[m[32mtouchpoints for offshoring.[m
[32m+[m
[32m+[m[32mCapitalize on low hanging fruit to identify a ballpark value added activity to[m
[32m+[m[32mbeta test. Override the digital divide with additional clickthroughs from[m
[32m+[m[32mDevOps. Nanotechnology immersion along the information highway will[m
[32m+[m[32mclose the loop on focusing solely on the bottom line.[m
[32m+[m
[32m+[m[32mPodcasting operational change management inside of workflows to[m
[32m+[m[32mestablish a framework. Taking seamless key performance indicators offline[m
[32m+[m[32mto maximise the long tail. Keeping your eye on the ball while performing a[m
[32m+[m[32mdeep dive on the start-up mentality to derive convergence on crossplatform[m
[32m+[m[32mintegration.[m
[32m+[m
[32m+[m[32mCollaboratively administrate empowered markets via plug-and-play[m
[32m+[m[32mnetworks. Dynamically procrastinate B2C users after installed base[m
[32m+[m[32mbenefits. Dramatically visualize customer directed convergence without[m
[32m+[m[32mrevolutionary ROI.[m
[32m+[m
[32m+[m[32mEfficiently unleash cross-media information without cross-media value.[m
[32m+[m[32mQuickly maximize timely deliverables for real-time schemas. Dramatically[m
[32m+[m[32mmaintain clicks-and-mortar solutions without functional solutions.[m
[32m+[m[32mAUTHORS:[m
[32m+[m[32mAmy Baker, Finance Chair, x345, abaker@ourcompany.com[m
[32m+[m[32mChris Donaldson, Accounting Dir., x621, cdonaldson@ourcompany.com[m
[32m+[m[32mErin Freeman, Sr. VP, x879, efreeman@ourcompany.com[m
[32m+[m[32m[m
[1mdiff --git a/00-Python-Text-Basics/Some_New_Doc.pdf b/00-Python-Text-Basics/Some_New_Doc.pdf[m
[1mnew file mode 100644[m
[1mindex 0000000..cb60672[m
